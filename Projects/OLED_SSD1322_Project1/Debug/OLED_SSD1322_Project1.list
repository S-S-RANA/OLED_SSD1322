
OLED_SSD1322_Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae0  08009ae0  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ae8  08009ae8  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08009af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020264  2**0
                  CONTENTS
 10 .bss          00000a28  20000264  20000264  00020264  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c8c  20000c8c  00020264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014edb  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003978  00000000  00000000  000351b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a8  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d74  00000000  00000000  00039cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f56  00000000  00000000  0003aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018653  00000000  00000000  0005e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbb7a  00000000  00000000  00076ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e80  00000000  00000000  00142b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001479f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a68 	.word	0x08009a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08009a68 	.word	0x08009a68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Delay>:
#define  WHITE  0xFFFFFF
#define  BLACK  0x000000

const unsigned char interface = 1;    // 0 = 8-bit parallel (6800 mode) interface; 1 = 8-bit parallel (8080 mode) interface; 2 = 4-wire SPI interface

void Delay(int miliseconds){
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	for (int i = miliseconds; i < miliseconds; i--){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e00d      	b.n	8000596 <Delay+0x2a>
		for (int j = 0; j > 24000; j++);
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	e002      	b.n	8000586 <Delay+0x1a>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800058c:	4293      	cmp	r3, r2
 800058e:	dcf7      	bgt.n	8000580 <Delay+0x14>
	for (int i = miliseconds; i < miliseconds; i--){
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3b01      	subs	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	dbed      	blt.n	800057a <Delay+0xe>
	}
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <OLED_Command_12864RGB>:
/*======= FONT TABLE 5x8 ========*/
/*============= END =============*/
/*===============================*/

void OLED_Command_12864RGB(unsigned char c)        // send command to OLED
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
   unsigned char i;
   unsigned char mask = 0x80;
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	73fb      	strb	r3, [r7, #15]

				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_RESET); // Set CS_PIN LOW
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4854      	ldr	r0, [pc, #336]	; (8000714 <OLED_Command_12864RGB+0x168>)
 80005c2:	f001 fb2f 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_RESET); // Set RS_PIN LOW
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	4852      	ldr	r0, [pc, #328]	; (8000718 <OLED_Command_12864RGB+0x16c>)
 80005ce:	f001 fb29 	bl	8001c24 <HAL_GPIO_WritePin>

				  if(c&0x01)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <OLED_Command_12864RGB+0x3c>
					  HAL_GPIO_WritePin(GPIOC, D0_Pin,GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	484e      	ldr	r0, [pc, #312]	; (800071c <OLED_Command_12864RGB+0x170>)
 80005e2:	f001 fb1f 	bl	8001c24 <HAL_GPIO_WritePin>
 80005e6:	e004      	b.n	80005f2 <OLED_Command_12864RGB+0x46>
				  else
					  HAL_GPIO_WritePin(GPIOC, D0_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	484b      	ldr	r0, [pc, #300]	; (800071c <OLED_Command_12864RGB+0x170>)
 80005ee:	f001 fb19 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x02)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <OLED_Command_12864RGB+0x5c>
					  HAL_GPIO_WritePin(GPIOC, D1_Pin,GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2104      	movs	r1, #4
 8000600:	4846      	ldr	r0, [pc, #280]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000602:	f001 fb0f 	bl	8001c24 <HAL_GPIO_WritePin>
 8000606:	e004      	b.n	8000612 <OLED_Command_12864RGB+0x66>
				  else
					  HAL_GPIO_WritePin(GPIOC, D1_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	4843      	ldr	r0, [pc, #268]	; (800071c <OLED_Command_12864RGB+0x170>)
 800060e:	f001 fb09 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x04)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <OLED_Command_12864RGB+0x7c>
					  HAL_GPIO_WritePin(GPIOC, D2_Pin,GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	483e      	ldr	r0, [pc, #248]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000622:	f001 faff 	bl	8001c24 <HAL_GPIO_WritePin>
 8000626:	e004      	b.n	8000632 <OLED_Command_12864RGB+0x86>
				  else
					  HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2110      	movs	r1, #16
 800062c:	483b      	ldr	r0, [pc, #236]	; (800071c <OLED_Command_12864RGB+0x170>)
 800062e:	f001 faf9 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x08)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <OLED_Command_12864RGB+0x9c>
					  HAL_GPIO_WritePin(GPIOC, D3_Pin,GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4836      	ldr	r0, [pc, #216]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000642:	f001 faef 	bl	8001c24 <HAL_GPIO_WritePin>
 8000646:	e004      	b.n	8000652 <OLED_Command_12864RGB+0xa6>
				  else
					  HAL_GPIO_WritePin(GPIOC, D3_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2120      	movs	r1, #32
 800064c:	4833      	ldr	r0, [pc, #204]	; (800071c <OLED_Command_12864RGB+0x170>)
 800064e:	f001 fae9 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x10)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <OLED_Command_12864RGB+0xbc>
					  HAL_GPIO_WritePin(GPIOC, D4_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	482e      	ldr	r0, [pc, #184]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000662:	f001 fadf 	bl	8001c24 <HAL_GPIO_WritePin>
 8000666:	e004      	b.n	8000672 <OLED_Command_12864RGB+0xc6>
				  else
					  HAL_GPIO_WritePin(GPIOC, D4_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	482b      	ldr	r0, [pc, #172]	; (800071c <OLED_Command_12864RGB+0x170>)
 800066e:	f001 fad9 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x20)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <OLED_Command_12864RGB+0xde>
					  HAL_GPIO_WritePin(GPIOC, D5_Pin,GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000684:	f001 face 	bl	8001c24 <HAL_GPIO_WritePin>
 8000688:	e005      	b.n	8000696 <OLED_Command_12864RGB+0xea>
				  else
					  HAL_GPIO_WritePin(GPIOC, D5_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <OLED_Command_12864RGB+0x170>)
 8000692:	f001 fac7 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x40)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <OLED_Command_12864RGB+0x102>
					  HAL_GPIO_WritePin(GPIOC, D6_Pin,GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	481d      	ldr	r0, [pc, #116]	; (800071c <OLED_Command_12864RGB+0x170>)
 80006a8:	f001 fabc 	bl	8001c24 <HAL_GPIO_WritePin>
 80006ac:	e005      	b.n	80006ba <OLED_Command_12864RGB+0x10e>
				  else
					  HAL_GPIO_WritePin(GPIOC, D6_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <OLED_Command_12864RGB+0x170>)
 80006b6:	f001 fab5 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(c&0x80)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da06      	bge.n	80006d0 <OLED_Command_12864RGB+0x124>
					  HAL_GPIO_WritePin(GPIOC, D7_Pin,GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <OLED_Command_12864RGB+0x170>)
 80006ca:	f001 faab 	bl	8001c24 <HAL_GPIO_WritePin>
 80006ce:	e005      	b.n	80006dc <OLED_Command_12864RGB+0x130>
				  else
					  HAL_GPIO_WritePin(GPIOC, D7_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <OLED_Command_12864RGB+0x170>)
 80006d8:	f001 faa4 	bl	8001c24 <HAL_GPIO_WritePin>


				  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET); // Set RW_PIN LOW
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <OLED_Command_12864RGB+0x16c>)
 80006e4:	f001 fa9e 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);    // Set E_PIN HIGH
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <OLED_Command_12864RGB+0x16c>)
 80006f0:	f001 fa98 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_RESET);  // Set E_PIN LOW
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <OLED_Command_12864RGB+0x16c>)
 80006fc:	f001 fa92 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET);   // Set CS_PIN HIGH
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <OLED_Command_12864RGB+0x168>)
 8000708:	f001 fa8c 	bl	8001c24 <HAL_GPIO_WritePin>



}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020400 	.word	0x40020400
 8000718:	40020c00 	.word	0x40020c00
 800071c:	40020800 	.word	0x40020800

08000720 <OLED_Data_12864RGB>:

void OLED_Data_12864RGB(unsigned char d)        // send data to OLED
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
                unsigned char i;
                unsigned char mask = 0x80;
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	73fb      	strb	r3, [r7, #15]

				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_RESET); // Set CS_PIN LOW
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000734:	4854      	ldr	r0, [pc, #336]	; (8000888 <OLED_Data_12864RGB+0x168>)
 8000736:	f001 fa75 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_SET); // Set RS_PIN
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000740:	4852      	ldr	r0, [pc, #328]	; (800088c <OLED_Data_12864RGB+0x16c>)
 8000742:	f001 fa6f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x01)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <OLED_Data_12864RGB+0x3c>
					  HAL_GPIO_WritePin(GPIOC, D0_Pin,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2102      	movs	r1, #2
 8000754:	484e      	ldr	r0, [pc, #312]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000756:	f001 fa65 	bl	8001c24 <HAL_GPIO_WritePin>
 800075a:	e004      	b.n	8000766 <OLED_Data_12864RGB+0x46>
				  else
					  HAL_GPIO_WritePin(GPIOC, D0_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	484b      	ldr	r0, [pc, #300]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000762:	f001 fa5f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x02)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <OLED_Data_12864RGB+0x5c>
					  HAL_GPIO_WritePin(GPIOC, D1_Pin,GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2104      	movs	r1, #4
 8000774:	4846      	ldr	r0, [pc, #280]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000776:	f001 fa55 	bl	8001c24 <HAL_GPIO_WritePin>
 800077a:	e004      	b.n	8000786 <OLED_Data_12864RGB+0x66>
				  else
					  HAL_GPIO_WritePin(GPIOC, D1_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	4843      	ldr	r0, [pc, #268]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000782:	f001 fa4f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x04)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <OLED_Data_12864RGB+0x7c>
					  HAL_GPIO_WritePin(GPIOC, D2_Pin,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	483e      	ldr	r0, [pc, #248]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000796:	f001 fa45 	bl	8001c24 <HAL_GPIO_WritePin>
 800079a:	e004      	b.n	80007a6 <OLED_Data_12864RGB+0x86>
				  else
					  HAL_GPIO_WritePin(GPIOC, D2_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	483b      	ldr	r0, [pc, #236]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007a2:	f001 fa3f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x08)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d005      	beq.n	80007bc <OLED_Data_12864RGB+0x9c>
					  HAL_GPIO_WritePin(GPIOC, D3_Pin,GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007b6:	f001 fa35 	bl	8001c24 <HAL_GPIO_WritePin>
 80007ba:	e004      	b.n	80007c6 <OLED_Data_12864RGB+0xa6>
				  else
					  HAL_GPIO_WritePin(GPIOC, D3_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	4833      	ldr	r0, [pc, #204]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007c2:	f001 fa2f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x10)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <OLED_Data_12864RGB+0xbc>
					  HAL_GPIO_WritePin(GPIOC, D4_Pin,GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	482e      	ldr	r0, [pc, #184]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007d6:	f001 fa25 	bl	8001c24 <HAL_GPIO_WritePin>
 80007da:	e004      	b.n	80007e6 <OLED_Data_12864RGB+0xc6>
				  else
					  HAL_GPIO_WritePin(GPIOC, D4_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007e2:	f001 fa1f 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x20)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d006      	beq.n	80007fe <OLED_Data_12864RGB+0xde>
					  HAL_GPIO_WritePin(GPIOC, D5_Pin,GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	4826      	ldr	r0, [pc, #152]	; (8000890 <OLED_Data_12864RGB+0x170>)
 80007f8:	f001 fa14 	bl	8001c24 <HAL_GPIO_WritePin>
 80007fc:	e005      	b.n	800080a <OLED_Data_12864RGB+0xea>
				  else
					  HAL_GPIO_WritePin(GPIOC, D5_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <OLED_Data_12864RGB+0x170>)
 8000806:	f001 fa0d 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x40)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <OLED_Data_12864RGB+0x102>
					  HAL_GPIO_WritePin(GPIOC, D6_Pin,GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081a:	481d      	ldr	r0, [pc, #116]	; (8000890 <OLED_Data_12864RGB+0x170>)
 800081c:	f001 fa02 	bl	8001c24 <HAL_GPIO_WritePin>
 8000820:	e005      	b.n	800082e <OLED_Data_12864RGB+0x10e>
				  else
					  HAL_GPIO_WritePin(GPIOC, D6_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4819      	ldr	r0, [pc, #100]	; (8000890 <OLED_Data_12864RGB+0x170>)
 800082a:	f001 f9fb 	bl	8001c24 <HAL_GPIO_WritePin>


				  if(d&0x80)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da06      	bge.n	8000844 <OLED_Data_12864RGB+0x124>
					  HAL_GPIO_WritePin(GPIOC, D7_Pin,GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <OLED_Data_12864RGB+0x170>)
 800083e:	f001 f9f1 	bl	8001c24 <HAL_GPIO_WritePin>
 8000842:	e005      	b.n	8000850 <OLED_Data_12864RGB+0x130>
				  else
					  HAL_GPIO_WritePin(GPIOC, D7_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <OLED_Data_12864RGB+0x170>)
 800084c:	f001 f9ea 	bl	8001c24 <HAL_GPIO_WritePin>




				  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET); // Set RW_PIN LOW
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <OLED_Data_12864RGB+0x16c>)
 8000858:	f001 f9e4 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);  // Set E_PIN
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <OLED_Data_12864RGB+0x16c>)
 8000864:	f001 f9de 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_RESET);  // Set E_PIN LOW
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <OLED_Data_12864RGB+0x16c>)
 8000870:	f001 f9d8 	bl	8001c24 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET); // Set CS_PIN
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <OLED_Data_12864RGB+0x168>)
 800087c:	f001 f9d2 	bl	8001c24 <HAL_GPIO_WritePin>

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40020400 	.word	0x40020400
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020800 	.word	0x40020800

08000894 <OLED_SetColumnAddress_12864RGB>:

void OLED_SetColumnAddress_12864RGB(unsigned char x_start, unsigned char x_end)    // set column address start + end
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
   OLED_Command_12864RGB(0x15);
 80008a4:	2015      	movs	r0, #21
 80008a6:	f7ff fe81 	bl	80005ac <OLED_Command_12864RGB>
   OLED_Data_12864RGB(x_start);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff37 	bl	8000720 <OLED_Data_12864RGB>
   OLED_Data_12864RGB(x_end);
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff33 	bl	8000720 <OLED_Data_12864RGB>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <OLED_SetRowAddress_12864RGB>:

void OLED_SetRowAddress_12864RGB(unsigned char y_start, unsigned char y_end)    // set row address start + end
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	460a      	mov	r2, r1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	4613      	mov	r3, r2
 80008d0:	71bb      	strb	r3, [r7, #6]
   OLED_Command_12864RGB(0x75);
 80008d2:	2075      	movs	r0, #117	; 0x75
 80008d4:	f7ff fe6a 	bl	80005ac <OLED_Command_12864RGB>
   OLED_Data_12864RGB(y_start);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff20 	bl	8000720 <OLED_Data_12864RGB>
   OLED_Data_12864RGB(y_end);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff1c 	bl	8000720 <OLED_Data_12864RGB>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <OLED_WriteMemoryStart_12864RGB>:

void OLED_WriteMemoryStart_12864RGB(void)    // write to RAM command
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    OLED_Command_12864RGB(0x5C);
 80008f4:	205c      	movs	r0, #92	; 0x5c
 80008f6:	f7ff fe59 	bl	80005ac <OLED_Command_12864RGB>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}

080008fe <OLED_Pixel_12864RGB>:

void OLED_Pixel_12864RGB(unsigned long color)    // write one pixel of a given color
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
        OLED_Data_12864RGB((color>>16));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	0c1b      	lsrs	r3, r3, #16
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff07 	bl	8000720 <OLED_Data_12864RGB>
        OLED_Data_12864RGB((color>>8));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff01 	bl	8000720 <OLED_Data_12864RGB>
        OLED_Data_12864RGB(color);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fefc 	bl	8000720 <OLED_Data_12864RGB>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <OLED_FillScreen_12864RGB>:

void OLED_FillScreen_12864RGB(unsigned long color)    // fill screen with a given color
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
   unsigned int i,j;
   OLED_SetColumnAddress_12864RGB(0x00, 0x7F);
 8000938:	217f      	movs	r1, #127	; 0x7f
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff ffaa 	bl	8000894 <OLED_SetColumnAddress_12864RGB>
   OLED_SetRowAddress_12864RGB(0x00, 0x40);
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ffbd 	bl	80008c2 <OLED_SetRowAddress_12864RGB>
   OLED_WriteMemoryStart_12864RGB();
 8000948:	f7ff ffd2 	bl	80008f0 <OLED_WriteMemoryStart_12864RGB>
   for(i=0;i<64;i++)
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e00e      	b.n	8000970 <OLED_FillScreen_12864RGB+0x40>
   {
      for(j=0;j<128;j++)
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	e005      	b.n	8000964 <OLED_FillScreen_12864RGB+0x34>
      {
	 OLED_Pixel_12864RGB(color);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffd0 	bl	80008fe <OLED_Pixel_12864RGB>
      for(j=0;j<128;j++)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3301      	adds	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b7f      	cmp	r3, #127	; 0x7f
 8000968:	d9f6      	bls.n	8000958 <OLED_FillScreen_12864RGB+0x28>
   for(i=0;i<64;i++)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b3f      	cmp	r3, #63	; 0x3f
 8000974:	d9ed      	bls.n	8000952 <OLED_FillScreen_12864RGB+0x22>
      }
   }
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <OLED_Text_12864RGB>:
/*===== LOW LEVEL FUNCTIONS =====*/
/*============= END =============*/
/*===============================*/

void OLED_Text_12864RGB(unsigned char x_pos, unsigned char y_pos, unsigned char letter, unsigned long textColor, unsigned long backgroundColor)  // function to show text
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	460b      	mov	r3, r1
 800098e:	71bb      	strb	r3, [r7, #6]
 8000990:	4613      	mov	r3, r2
 8000992:	717b      	strb	r3, [r7, #5]
    int i;
    int count;
    unsigned char mask = 0x01;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]

    for(i=0;i<8;i++)     //each character is 8 px tall
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e033      	b.n	8000a06 <OLED_Text_12864RGB+0x86>
    {
        OLED_SetColumnAddress_12864RGB(x_pos, 0x77);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2177      	movs	r1, #119	; 0x77
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff76 	bl	8000894 <OLED_SetColumnAddress_12864RGB>
        OLED_SetRowAddress_12864RGB(y_pos, 0x7F);
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	217f      	movs	r1, #127	; 0x7f
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff88 	bl	80008c2 <OLED_SetRowAddress_12864RGB>
        OLED_WriteMemoryStart_12864RGB();
 80009b2:	f7ff ff9d 	bl	80008f0 <OLED_WriteMemoryStart_12864RGB>
        for (count=0;count<5;count++)    //each character is 5px wide
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	e018      	b.n	80009ee <OLED_Text_12864RGB+0x6e>
        {
            if((Ascii_1[letter][count] & mask) == mask)
 80009bc:	797a      	ldrb	r2, [r7, #5]
 80009be:	4916      	ldr	r1, [pc, #88]	; (8000a18 <OLED_Text_12864RGB+0x98>)
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	18ca      	adds	r2, r1, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4413      	add	r3, r2
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	4013      	ands	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	7bfa      	ldrb	r2, [r7, #15]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d103      	bne.n	80009e2 <OLED_Text_12864RGB+0x62>
                OLED_Pixel_12864RGB(textColor);
 80009da:	6838      	ldr	r0, [r7, #0]
 80009dc:	f7ff ff8f 	bl	80008fe <OLED_Pixel_12864RGB>
 80009e0:	e002      	b.n	80009e8 <OLED_Text_12864RGB+0x68>
            else
                OLED_Pixel_12864RGB(backgroundColor);
 80009e2:	6a38      	ldr	r0, [r7, #32]
 80009e4:	f7ff ff8b 	bl	80008fe <OLED_Pixel_12864RGB>
        for (count=0;count<5;count++)    //each character is 5px wide
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	3301      	adds	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	dde3      	ble.n	80009bc <OLED_Text_12864RGB+0x3c>
        }
        y_pos++;
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	3301      	adds	r3, #1
 80009f8:	71bb      	strb	r3, [r7, #6]
        mask = mask << 1;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
    for(i=0;i<8;i++)     //each character is 8 px tall
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	ddc8      	ble.n	800099e <OLED_Text_12864RGB+0x1e>
   }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000

08000a1c <printString>:
            mask = mask << 1;		//mask = mask >> 1;
        }
   }
}
int printString( char name[8], int xpos, int ypos)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b090      	sub	sp, #64	; 0x40
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]

    int ascii_values[8] = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fc41 	bl	80092b8 <memset>
    for (int i = 0; name[i] != '\0'; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
 8000a3a:	e00d      	b.n	8000a58 <printString+0x3c>
        ascii_values[i] = name[i];
 8000a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	3338      	adds	r3, #56	; 0x38
 8000a4c:	443b      	add	r3, r7
 8000a4e:	f843 2c28 	str.w	r2, [r3, #-40]
    for (int i = 0; name[i] != '\0'; i++) {
 8000a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a54:	3301      	adds	r3, #1
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1eb      	bne.n	8000a3c <printString+0x20>
    }
	for(int i = 0;i < 10;i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
 8000a68:	e01b      	b.n	8000aa2 <printString+0x86>
	{
		OLED_Text_12864RGB(xpos+i*8, ypos, ascii_values[i]-32, WHITE, BLACK);
 8000a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4413      	add	r3, r2
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	3338      	adds	r3, #56	; 0x38
 8000a84:	443b      	add	r3, r7
 8000a86:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	3b20      	subs	r3, #32
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a98:	f7ff ff72 	bl	8000980 <OLED_Text_12864RGB>
	for(int i = 0;i < 10;i++)
 8000a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa4:	2b09      	cmp	r3, #9
 8000aa6:	dde0      	ble.n	8000a6a <printString+0x4e>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <OLED_Init_12864RGB>:
/*********************************/

//void OLED_Init_12864RGB(void)      //OLED initialization

void OLED_Init_12864RGB(void)      //OLED initialization
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

 HAL_GPIO_WritePin(GPIOB, RES_Pin, GPIO_PIN_RESET); // Set RES_PIN LOW
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000abe:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <OLED_Init_12864RGB+0x120>)
 8000ac0:	f001 f8b0 	bl	8001c24 <HAL_GPIO_WritePin>
 Delay(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f7ff fd50 	bl	800056c <Delay>
 HAL_GPIO_WritePin(GPIOB, RES_Pin, GPIO_PIN_SET); // Set RES_PIN LOW
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad2:	4840      	ldr	r0, [pc, #256]	; (8000bd4 <OLED_Init_12864RGB+0x120>)
 8000ad4:	f001 f8a6 	bl	8001c24 <HAL_GPIO_WritePin>
 Delay(500);
 8000ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000adc:	f7ff fd46 	bl	800056c <Delay>

    //Set_Sleep_Mode_12864(0xAF);                          // Display OFF
  OLED_Command_12864RGB(0xAF);
 8000ae0:	20af      	movs	r0, #175	; 0xaf
 8000ae2:	f7ff fd63 	bl	80005ac <OLED_Command_12864RGB>
  //Set_Command_Lock_12864(0x12);                        // Unlock commands for OLED
  OLED_Command_12864RGB(0xFD);
 8000ae6:	20fd      	movs	r0, #253	; 0xfd
 8000ae8:	f7ff fd60 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x12);
 8000aec:	2012      	movs	r0, #18
 8000aee:	f7ff fe17 	bl	8000720 <OLED_Data_12864RGB>
  //Set_Display_Clock__Oscillator_Frequency_12864(0x91); // Set Display Clock / Oscillator Frequency
  OLED_Command_12864RGB(0xB3);
 8000af2:	20b3      	movs	r0, #179	; 0xb3
 8000af4:	f7ff fd5a 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x91);
 8000af8:	2091      	movs	r0, #145	; 0x91
 8000afa:	f7ff fe11 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Multiplex_Ratio_12864(0x3F);                     // Set Multiplex Ratio
  OLED_Command_12864RGB(0xCA);
 8000afe:	20ca      	movs	r0, #202	; 0xca
 8000b00:	f7ff fd54 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x3F);
 8000b04:	203f      	movs	r0, #63	; 0x3f
 8000b06:	f7ff fe0b 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Display_Offset_12864(0x00);                      // Set Display Offset
  OLED_Command_12864RGB(0xA2);
 8000b0a:	20a2      	movs	r0, #162	; 0xa2
 8000b0c:	f7ff fd4e 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x00);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fe05 	bl	8000720 <OLED_Data_12864RGB>

  //Function_Selection_12864(0x01);                      // Function Selection
  OLED_Command_12864RGB(0xAB);
 8000b16:	20ab      	movs	r0, #171	; 0xab
 8000b18:	f7ff fd48 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x01);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff fdff 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Display_Start_Line_12864(0x00);                  // Set Display Start Line
  OLED_Command_12864RGB(0xA1);
 8000b22:	20a1      	movs	r0, #161	; 0xa1
 8000b24:	f7ff fd42 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fdf9 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Remap_12864(0x16, 0x11);                         // Set Remap. (A[1]) & (A[4]) can be adjusted to flip display orientation
  OLED_Command_12864RGB(0xA0);
 8000b2e:	20a0      	movs	r0, #160	; 0xa0
 8000b30:	f7ff fd3c 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x16);
 8000b34:	2016      	movs	r0, #22
 8000b36:	f7ff fdf3 	bl	8000720 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0x11);
 8000b3a:	2011      	movs	r0, #17
 8000b3c:	f7ff fdf0 	bl	8000720 <OLED_Data_12864RGB>
  //Master_Contrast_Control_12864(0x0F);                 // Master Contrast Control
  OLED_Command_12864RGB(0xC7);
 8000b40:	20c7      	movs	r0, #199	; 0xc7
 8000b42:	f7ff fd33 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x0F);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f7ff fdea 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Contrast_Control_12864(0x9F);                    // Set Contrast Control
  OLED_Command_12864RGB(0xC1);
 8000b4c:	20c1      	movs	r0, #193	; 0xc1
 8000b4e:	f7ff fd2d 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x9F);
 8000b52:	209f      	movs	r0, #159	; 0x9f
 8000b54:	f7ff fde4 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Phase_Length_12864(0x72);
  OLED_Command_12864RGB(0xB1);
 8000b58:	20b1      	movs	r0, #177	; 0xb1
 8000b5a:	f7ff fd27 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x72);
 8000b5e:	2072      	movs	r0, #114	; 0x72
 8000b60:	f7ff fdde 	bl	8000720 <OLED_Data_12864RGB>
  // Set Phase Length
  //Set_Precharge_Voltage_12864(0x1F);                   // Set Precharge Voltage
  OLED_Command_12864RGB(0xBB);
 8000b64:	20bb      	movs	r0, #187	; 0xbb
 8000b66:	f7ff fd21 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x1F);
 8000b6a:	201f      	movs	r0, #31
 8000b6c:	f7ff fdd8 	bl	8000720 <OLED_Data_12864RGB>

  //Enable_External_VSL(0xA0, 0xFD);                     // Enable External VSL
  OLED_Command_12864RGB(0xB4);
 8000b70:	20b4      	movs	r0, #180	; 0xb4
 8000b72:	f7ff fd1b 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0xA0);
 8000b76:	20a0      	movs	r0, #160	; 0xa0
 8000b78:	f7ff fdd2 	bl	8000720 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0xFD);
 8000b7c:	20fd      	movs	r0, #253	; 0xfd
 8000b7e:	f7ff fdcf 	bl	8000720 <OLED_Data_12864RGB>

  //Set_VCOMH_Voltage_12864(0x04);                       // Set VCOMH Voltage
  OLED_Command_12864RGB(0xBE);
 8000b82:	20be      	movs	r0, #190	; 0xbe
 8000b84:	f7ff fd12 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x04);
 8000b88:	2004      	movs	r0, #4
 8000b8a:	f7ff fdc9 	bl	8000720 <OLED_Data_12864RGB>

  //Display_Mode_12864(0xA6);                            // Set Normal Display
  OLED_Command_12864RGB(0xA6);
 8000b8e:	20a6      	movs	r0, #166	; 0xa6
 8000b90:	f7ff fd0c 	bl	80005ac <OLED_Command_12864RGB>

  //Exit_Partial_Display_12864();                        // Exit Partial Display Mode
  OLED_Command_12864RGB(0xA9);
 8000b94:	20a9      	movs	r0, #169	; 0xa9
 8000b96:	f7ff fd09 	bl	80005ac <OLED_Command_12864RGB>
  //Display_Enhancement_12864(0xA2);         // Display Enhancement
  OLED_Command_12864RGB(0xD1);
 8000b9a:	20d1      	movs	r0, #209	; 0xd1
 8000b9c:	f7ff fd06 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0xA2);
 8000ba0:	20a2      	movs	r0, #162	; 0xa2
 8000ba2:	f7ff fdbd 	bl	8000720 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0x20);
 8000ba6:	2020      	movs	r0, #32
 8000ba8:	f7ff fdba 	bl	8000720 <OLED_Data_12864RGB>

  //Set_GPIO_12864(0x00);                    // Set GPIO
  OLED_Command_12864RGB(0xB5);
 8000bac:	20b5      	movs	r0, #181	; 0xb5
 8000bae:	f7ff fcfd 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x00);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fdb4 	bl	8000720 <OLED_Data_12864RGB>

  //Default_Grayscale_Command_12864();       // Default Linear Grayscale Table
  OLED_Command_12864RGB(0xB9);
 8000bb8:	20b9      	movs	r0, #185	; 0xb9
 8000bba:	f7ff fcf7 	bl	80005ac <OLED_Command_12864RGB>
  //Set_Second_Precharge_Period_12864(0x08); // Set Second Precharge Period
  OLED_Command_12864RGB(0xB6);
 8000bbe:	20b6      	movs	r0, #182	; 0xb6
 8000bc0:	f7ff fcf4 	bl	80005ac <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x08);
 8000bc4:	2008      	movs	r0, #8
 8000bc6:	f7ff fdab 	bl	8000720 <OLED_Data_12864RGB>

  //Set_Sleep_Mode_12864(0xAF); // Display ON
  OLED_Command_12864RGB(0xAF);
 8000bca:	20af      	movs	r0, #175	; 0xaf
 8000bcc:	f7ff fcee 	bl	80005ac <OLED_Command_12864RGB>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <setup>:
/*======= INITIALIZATION ========*/
/*============= END =============*/
/*===============================*/

void setup()                                       // for Arduino, runs first at power on
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0


	  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <setup+0x44>)
 8000be4:	f001 f81e 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, BS0_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <setup+0x44>)
 8000bf0:	f001 f818 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, BS1_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <setup+0x44>)
 8000bfc:	f001 f812 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <setup+0x48>)
 8000c08:	f001 f80c 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <setup+0x48>)
 8000c14:	f001 f806 	bl	8001c24 <HAL_GPIO_WritePin>

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <counter>:
uint8_t count = 0;
char ch_Count[5];
void counter( )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOA, B1_Pin)==1)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4817      	ldr	r0, [pc, #92]	; (8000c88 <counter+0x64>)
 8000c2c:	f000 ffe2 	bl	8001bf4 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d125      	bne.n	8000c82 <counter+0x5e>
	{
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);			//SET LED5
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3c:	4813      	ldr	r0, [pc, #76]	; (8000c8c <counter+0x68>)
 8000c3e:	f000 fff1 	bl	8001c24 <HAL_GPIO_WritePin>
		memset(ch_Count, 0, sizeof(ch_Count));
 8000c42:	2205      	movs	r2, #5
 8000c44:	2100      	movs	r1, #0
 8000c46:	4812      	ldr	r0, [pc, #72]	; (8000c90 <counter+0x6c>)
 8000c48:	f008 fb36 	bl	80092b8 <memset>
		sprintf(ch_Count, "%d", count);
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <counter+0x70>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4911      	ldr	r1, [pc, #68]	; (8000c98 <counter+0x74>)
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <counter+0x6c>)
 8000c56:	f008 fb0f 	bl	8009278 <siprintf>
//		OLED_Text_12864RGB(28, 20, count, WHITE, BLACK);
		printString(ch_Count, 28, 20);
 8000c5a:	2214      	movs	r2, #20
 8000c5c:	211c      	movs	r1, #28
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <counter+0x6c>)
 8000c60:	f7ff fedc 	bl	8000a1c <printString>
		HAL_Delay(200);
 8000c64:	20c8      	movs	r0, #200	; 0xc8
 8000c66:	f000 fcf3 	bl	8001650 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <counter+0x68>)
 8000c72:	f000 ffd7 	bl	8001c24 <HAL_GPIO_WritePin>
		count++;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <counter+0x70>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <counter+0x70>)
 8000c80:	701a      	strb	r2, [r3, #0]

	}

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	20000378 	.word	0x20000378
 8000c94:	20000374 	.word	0x20000374
 8000c98:	08009a80 	.word	0x08009a80

08000c9c <loop>:

void loop()                                        // main loop, runs after "setup()"
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af02      	add	r7, sp, #8
   OLED_Init_12864RGB();                           // initialize display
 8000ca2:	f7ff ff07 	bl	8000ab4 <OLED_Init_12864RGB>

   OLED_FillScreen_12864RGB(BLACK);                // fill screen with black
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fe42 	bl	8000930 <OLED_FillScreen_12864RGB>


   OLED_Text_12864RGB(28, 0, 35, WHITE, BLACK);   // C
 8000cac:	2300      	movs	r3, #0
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cb4:	2223      	movs	r2, #35	; 0x23
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f7ff fe61 	bl	8000980 <OLED_Text_12864RGB>
   OLED_Text_12864RGB(36, 0, 47, WHITE, BLACK);   // O
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cc6:	222f      	movs	r2, #47	; 0x2f
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2024      	movs	r0, #36	; 0x24
 8000ccc:	f7ff fe58 	bl	8000980 <OLED_Text_12864RGB>
   OLED_Text_12864RGB(44, 0, 53, WHITE, BLACK);   // U
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cd8:	2235      	movs	r2, #53	; 0x35
 8000cda:	2100      	movs	r1, #0
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f7ff fe4f 	bl	8000980 <OLED_Text_12864RGB>
   OLED_Text_12864RGB(52, 0, 46, WHITE, BLACK);   // N
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cea:	222e      	movs	r2, #46	; 0x2e
 8000cec:	2100      	movs	r1, #0
 8000cee:	2034      	movs	r0, #52	; 0x34
 8000cf0:	f7ff fe46 	bl	8000980 <OLED_Text_12864RGB>
   OLED_Text_12864RGB(60, 0, 52, WHITE, BLACK);   // T
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cfc:	2234      	movs	r2, #52	; 0x34
 8000cfe:	2100      	movs	r1, #0
 8000d00:	203c      	movs	r0, #60	; 0x3c
 8000d02:	f7ff fe3d 	bl	8000980 <OLED_Text_12864RGB>
   OLED_Text_12864RGB(68, 0, 0, WHITE, BLACK);    //
 8000d06:	2300      	movs	r3, #0
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2044      	movs	r0, #68	; 0x44
 8000d14:	f7ff fe34 	bl	8000980 <OLED_Text_12864RGB>

   printString("MARSHALL", 28, 50);
 8000d18:	2232      	movs	r2, #50	; 0x32
 8000d1a:	211c      	movs	r1, #28
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <loop+0x8c>)
 8000d1e:	f7ff fe7d 	bl	8000a1c <printString>


   while(1)
	   {
	   	   counter();
 8000d22:	f7ff ff7f 	bl	8000c24 <counter>
 8000d26:	e7fc      	b.n	8000d22 <loop+0x86>
 8000d28:	08009a84 	.word	0x08009a84

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f000 fc1c 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f812 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 f90e 	bl	8000f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d3c:	f000 f878 	bl	8000e30 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d40:	f000 f8a4 	bl	8000e8c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d44:	f000 f8d2 	bl	8000eec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d48:	f007 fed0 	bl	8008aec <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 8000d4c:	f7ff ff44 	bl	8000bd8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d50:	f007 fef2 	bl	8008b38 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 8000d54:	f7ff ffa2 	bl	8000c9c <loop>
    MX_USB_HOST_Process();
 8000d58:	e7fa      	b.n	8000d50 <main+0x24>
	...

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b094      	sub	sp, #80	; 0x50
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	2230      	movs	r2, #48	; 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f008 faa4 	bl	80092b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <SystemClock_Config+0xd0>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fe36 	bl	8004a54 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dee:	f000 f9d9 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2105      	movs	r1, #5
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 f897 	bl	8004f44 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e1c:	f000 f9c2 	bl	80011a4 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_I2C1_Init+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x58>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_I2C1_Init+0x50>)
 8000e6e:	f003 f80d 	bl	8003e8c <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 f994 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000280 	.word	0x20000280
 8000e84:	40005400 	.word	0x40005400
 8000e88:	000186a0 	.word	0x000186a0

08000e8c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_I2S3_Init+0x58>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <MX_I2S3_Init+0x5c>)
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2S3_Init+0x54>)
 8000ecc:	f003 f922 	bl	8004114 <HAL_I2S_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ed6:	f000 f965 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200002d4 	.word	0x200002d4
 8000ee4:	40003c00 	.word	0x40003c00
 8000ee8:	00017700 	.word	0x00017700

08000eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_SPI1_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_SPI1_Init+0x64>)
 8000f3e:	f004 fb4f 	bl	80055e0 <HAL_SPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f48:	f000 f92c 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000031c 	.word	0x2000031c
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	4b86      	ldr	r3, [pc, #536]	; (800118c <MX_GPIO_Init+0x234>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a85      	ldr	r2, [pc, #532]	; (800118c <MX_GPIO_Init+0x234>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b83      	ldr	r3, [pc, #524]	; (800118c <MX_GPIO_Init+0x234>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	; (800118c <MX_GPIO_Init+0x234>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a7e      	ldr	r2, [pc, #504]	; (800118c <MX_GPIO_Init+0x234>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b7c      	ldr	r3, [pc, #496]	; (800118c <MX_GPIO_Init+0x234>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b78      	ldr	r3, [pc, #480]	; (800118c <MX_GPIO_Init+0x234>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a77      	ldr	r2, [pc, #476]	; (800118c <MX_GPIO_Init+0x234>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b75      	ldr	r3, [pc, #468]	; (800118c <MX_GPIO_Init+0x234>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b71      	ldr	r3, [pc, #452]	; (800118c <MX_GPIO_Init+0x234>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a70      	ldr	r2, [pc, #448]	; (800118c <MX_GPIO_Init+0x234>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b6e      	ldr	r3, [pc, #440]	; (800118c <MX_GPIO_Init+0x234>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b6a      	ldr	r3, [pc, #424]	; (800118c <MX_GPIO_Init+0x234>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a69      	ldr	r2, [pc, #420]	; (800118c <MX_GPIO_Init+0x234>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b67      	ldr	r3, [pc, #412]	; (800118c <MX_GPIO_Init+0x234>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b63      	ldr	r3, [pc, #396]	; (800118c <MX_GPIO_Init+0x234>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a62      	ldr	r2, [pc, #392]	; (800118c <MX_GPIO_Init+0x234>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b60      	ldr	r3, [pc, #384]	; (800118c <MX_GPIO_Init+0x234>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2108      	movs	r1, #8
 800101a:	485d      	ldr	r0, [pc, #372]	; (8001190 <MX_GPIO_Init+0x238>)
 800101c:	f000 fe02 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2101      	movs	r1, #1
 8001024:	485b      	ldr	r0, [pc, #364]	; (8001194 <MX_GPIO_Init+0x23c>)
 8001026:	f000 fdfd 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800102a:	2200      	movs	r2, #0
 800102c:	f640 3176 	movw	r1, #2934	; 0xb76
 8001030:	4858      	ldr	r0, [pc, #352]	; (8001194 <MX_GPIO_Init+0x23c>)
 8001032:	f000 fdf7 	bl	8001c24 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BS0_Pin|BS1_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800103c:	4856      	ldr	r0, [pc, #344]	; (8001198 <MX_GPIO_Init+0x240>)
 800103e:	f000 fdf1 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RES_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001048:	4853      	ldr	r0, [pc, #332]	; (8001198 <MX_GPIO_Init+0x240>)
 800104a:	f000 fdeb 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RD_GPIO_Port, RD_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	4851      	ldr	r0, [pc, #324]	; (800119c <MX_GPIO_Init+0x244>)
 8001056:	f000 fde5 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR_Pin|RS_Pin|LD4_Pin|LD3_Pin
 800105a:	2200      	movs	r2, #0
 800105c:	f24f 6110 	movw	r1, #62992	; 0xf610
 8001060:	484e      	ldr	r0, [pc, #312]	; (800119c <MX_GPIO_Init+0x244>)
 8001062:	f000 fddf 	bl	8001c24 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001066:	2308      	movs	r3, #8
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <MX_GPIO_Init+0x238>)
 800107e:	f000 fc1d 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin D0_Pin D1_Pin D2_Pin
                           D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|D0_Pin|D1_Pin|D2_Pin
 8001082:	f640 3377 	movw	r3, #2935	; 0xb77
 8001086:	61fb      	str	r3, [r7, #28]
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <MX_GPIO_Init+0x23c>)
 800109c:	f000 fc0e 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010a0:	2308      	movs	r3, #8
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b0:	2305      	movs	r3, #5
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4836      	ldr	r0, [pc, #216]	; (8001194 <MX_GPIO_Init+0x23c>)
 80010bc:	f000 fbfe 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4832      	ldr	r0, [pc, #200]	; (80011a0 <MX_GPIO_Init+0x248>)
 80010d6:	f000 fbf1 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	482a      	ldr	r0, [pc, #168]	; (8001198 <MX_GPIO_Init+0x240>)
 80010ee:	f000 fbe5 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001104:	2305      	movs	r3, #5
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_GPIO_Init+0x240>)
 8001110:	f000 fbd4 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BS0_Pin BS1_Pin CS_Pin RES_Pin */
  GPIO_InitStruct.Pin = BS0_Pin|BS1_Pin|CS_Pin|RES_Pin;
 8001114:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <MX_GPIO_Init+0x240>)
 800112e:	f000 fbc5 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin WR_Pin RS_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RD_Pin|WR_Pin|RS_Pin|LD4_Pin
 8001132:	f24f 7310 	movw	r3, #63248	; 0xf710
 8001136:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_GPIO_Init+0x244>)
 800114c:	f000 fbb6 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001150:	2320      	movs	r3, #32
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_GPIO_Init+0x244>)
 8001164:	f000 fbaa 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800116c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0x238>)
 800117e:	f000 fb9d 	bl	80018bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40021000 	.word	0x40021000
 8001194:	40020800 	.word	0x40020800
 8001198:	40020400 	.word	0x40020400
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020000 	.word	0x40020000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ee:	2007      	movs	r0, #7
 80011f0:	f000 fb22 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_I2C_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12c      	bne.n	800127c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_I2C_MspInit+0x88>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800123e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001244:	2312      	movs	r3, #18
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001248:	2301      	movs	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001250:	2304      	movs	r3, #4
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <HAL_I2C_MspInit+0x8c>)
 800125c:	f000 fb2e 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_I2C_MspInit+0x88>)
 800126a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005400 	.word	0x40005400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a31      	ldr	r2, [pc, #196]	; (8001380 <HAL_I2S_MspInit+0xf0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d15a      	bne.n	8001376 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f843 	bl	800535c <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80012dc:	f7ff ff62 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_I2S_MspInit+0xf4>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001344:	2306      	movs	r3, #6
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <HAL_I2S_MspInit+0xf8>)
 8001350:	f000 fab4 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001354:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001366:	2306      	movs	r3, #6
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <HAL_I2S_MspInit+0xfc>)
 8001372:	f000 faa3 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	; 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40003c00 	.word	0x40003c00
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020800 	.word	0x40020800

08001390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_SPI_MspInit+0x84>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013ea:	23e0      	movs	r3, #224	; 0xe0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fa:	2305      	movs	r3, #5
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_SPI_MspInit+0x8c>)
 8001406:	f000 fa59 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013000 	.word	0x40013000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8d0 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <OTG_FS_IRQHandler+0x10>)
 800147a:	f000 fecd 	bl	8002218 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000764 	.word	0x20000764

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f007 ff16 	bl	80092e8 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000380 	.word	0x20000380
 80014f0:	20000c90 	.word	0x20000c90

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f007 fed5 	bl	80092f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fbef 	bl	8000d2c <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 800155c:	08009af0 	.word	0x08009af0
  ldr r2, =_sbss
 8001560:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8001564:	20000c8c 	.word	0x20000c8c

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f94f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe06 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f967 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f92f 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001e8 	.word	0x200001e8
 8001608:	200001f0 	.word	0x200001f0
 800160c:	200001ec 	.word	0x200001ec

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200001f0 	.word	0x200001f0
 8001634:	20000384 	.word	0x20000384

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000384 	.word	0x20000384

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001f0 	.word	0x200001f0

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e16b      	b.n	8001bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 815a 	bne.w	8001baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80b4 	beq.w	8001baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x314>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x318>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x222>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x31c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x21e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x320>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_Init+0x324>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x216>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x328>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x212>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x20a>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae90 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	4613      	mov	r3, r2
 8001c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e059      	b.n	8001d1c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f006 ff90 	bl	8008ba8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c96:	d102      	bne.n	8001c9e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fd9a 	bl	80057dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7c1a      	ldrb	r2, [r3, #16]
 8001cb0:	f88d 2000 	strb.w	r2, [sp]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	f003 fd1b 	bl	80056f2 <USB_CoreInit>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e026      	b.n	8001d1c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fd92 	bl	80057fe <USB_SetCurrentMode>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e017      	b.n	8001d1c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7c1a      	ldrb	r2, [r3, #16]
 8001cf4:	f88d 2000 	strb.w	r2, [sp]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfc:	f003 ff34 	bl	8005b68 <USB_HostInit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e004      	b.n	8001d1c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70bb      	strb	r3, [r7, #2]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001d3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d40:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_HCD_HC_Init+0x2c>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e09d      	b.n	8001e8c <HAL_HCD_HC_Init+0x168>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3319      	adds	r3, #25
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3314      	adds	r3, #20
 8001d7c:	787a      	ldrb	r2, [r7, #1]
 8001d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3315      	adds	r3, #21
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3326      	adds	r3, #38	; 0x26
 8001da4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001da8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	78bb      	ldrb	r3, [r7, #2]
 8001dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3316      	adds	r3, #22
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fbc8 	bl	8002560 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da0a      	bge.n	8001dee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3317      	adds	r3, #23
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e009      	b.n	8001e02 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3317      	adds	r3, #23
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f812 	bl	8005e30 <USB_GetHostSpeed>
 8001e0c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10b      	bne.n	8001e2e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_HCD_HC_Init+0x10a>
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2bbc      	cmp	r3, #188	; 0xbc
 8001e28:	d901      	bls.n	8001e2e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001e2a:	23bc      	movs	r3, #188	; 0xbc
 8001e2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3328      	adds	r3, #40	; 0x28
 8001e58:	4602      	mov	r2, r0
 8001e5a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	787c      	ldrb	r4, [r7, #1]
 8001e66:	78ba      	ldrb	r2, [r7, #2]
 8001e68:	78f9      	ldrb	r1, [r7, #3]
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4623      	mov	r3, r4
 8001e7a:	f004 f801 	bl	8005e80 <USB_HC_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_HCD_HC_Halt+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e00f      	b.n	8001ed2 <HAL_HCD_HC_Halt+0x3e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fb93 	bl	80065ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	70fb      	strb	r3, [r7, #3]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70bb      	strb	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3317      	adds	r3, #23
 8001f06:	78ba      	ldrb	r2, [r7, #2]
 8001f08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3326      	adds	r3, #38	; 0x26
 8001f1a:	787a      	ldrb	r2, [r7, #1]
 8001f1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f1e:	7c3b      	ldrb	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	332a      	adds	r3, #42	; 0x2a
 8001f34:	2203      	movs	r2, #3
 8001f36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3319      	adds	r3, #25
 8001f48:	7f3a      	ldrb	r2, [r7, #28]
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e009      	b.n	8001f62 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	332a      	adds	r3, #42	; 0x2a
 8001f5e:	2202      	movs	r2, #2
 8001f60:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f62:	787b      	ldrb	r3, [r7, #1]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	f200 8102 	bhi.w	800216e <HAL_HCD_HC_SubmitRequest+0x292>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08002159 	.word	0x08002159
 8001f78:	08002045 	.word	0x08002045
 8001f7c:	080020cf 	.word	0x080020cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001f80:	7c3b      	ldrb	r3, [r7, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 80f5 	bne.w	8002172 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001f88:	78bb      	ldrb	r3, [r7, #2]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12d      	bne.n	8001fea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001f8e:	8b3b      	ldrh	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	333d      	adds	r3, #61	; 0x3d
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333d      	adds	r3, #61	; 0x3d
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	332a      	adds	r3, #42	; 0x2a
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001fd2:	e0ce      	b.n	8002172 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	332a      	adds	r3, #42	; 0x2a
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	701a      	strb	r2, [r3, #0]
      break;
 8001fe8:	e0c3      	b.n	8002172 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	331a      	adds	r3, #26
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	f040 80b8 	bne.w	8002172 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	333c      	adds	r3, #60	; 0x3c
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	332a      	adds	r3, #42	; 0x2a
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
      break;
 800202c:	e0a1      	b.n	8002172 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	332a      	adds	r3, #42	; 0x2a
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	e096      	b.n	8002172 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002044:	78bb      	ldrb	r3, [r7, #2]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d120      	bne.n	800208c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	333d      	adds	r3, #61	; 0x3d
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	332a      	adds	r3, #42	; 0x2a
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002074:	e07e      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	332a      	adds	r3, #42	; 0x2a
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
      break;
 800208a:	e073      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	333c      	adds	r3, #60	; 0x3c
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	332a      	adds	r3, #42	; 0x2a
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
      break;
 80020b6:	e05d      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	332a      	adds	r3, #42	; 0x2a
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
      break;
 80020cc:	e052      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020ce:	78bb      	ldrb	r3, [r7, #2]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d120      	bne.n	8002116 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	333d      	adds	r3, #61	; 0x3d
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	332a      	adds	r3, #42	; 0x2a
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020fe:	e039      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	332a      	adds	r3, #42	; 0x2a
 8002110:	2202      	movs	r2, #2
 8002112:	701a      	strb	r2, [r3, #0]
      break;
 8002114:	e02e      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	333c      	adds	r3, #60	; 0x3c
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	332a      	adds	r3, #42	; 0x2a
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
      break;
 8002140:	e018      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	332a      	adds	r3, #42	; 0x2a
 8002152:	2202      	movs	r2, #2
 8002154:	701a      	strb	r2, [r3, #0]
      break;
 8002156:	e00d      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	332a      	adds	r3, #42	; 0x2a
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
      break;
 800216c:	e002      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800216e:	bf00      	nop
 8002170:	e000      	b.n	8002174 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002172:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	332c      	adds	r3, #44	; 0x2c
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	8b39      	ldrh	r1, [r7, #24]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4403      	add	r3, r0
 8002198:	3334      	adds	r3, #52	; 0x34
 800219a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	334c      	adds	r3, #76	; 0x4c
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3338      	adds	r3, #56	; 0x38
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3315      	adds	r3, #21
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	334d      	adds	r3, #77	; 0x4d
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	3310      	adds	r3, #16
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	1d19      	adds	r1, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	461a      	mov	r2, r3
 8002208:	f003 ff66 	bl	80060d8 <USB_HC_StartXfer>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop

08002218 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fc5b 	bl	8005aea <USB_GetMode>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	f040 80fb 	bne.w	8002432 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fc1e 	bl	8005a82 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80f1 	beq.w	8002430 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fc15 	bl	8005a82 <USB_ReadInterrupts>
 8002258:	4603      	mov	r3, r0
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002262:	d104      	bne.n	800226e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800226c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fc05 	bl	8005a82 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002282:	d104      	bne.n	800228e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800228c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fbf5 	bl	8005a82 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a2:	d104      	bne.n	80022ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fbe5 	bl	8005a82 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d103      	bne.n	80022ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2202      	movs	r2, #2
 80022c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 fbd7 	bl	8005a82 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022de:	d120      	bne.n	8002322 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022fa:	2110      	movs	r1, #16
 80022fc:	6938      	ldr	r0, [r7, #16]
 80022fe:	f003 faca 	bl	8005896 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002302:	6938      	ldr	r0, [r7, #16]
 8002304:	f003 faf9 	bl	80058fa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7a5b      	ldrb	r3, [r3, #9]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d105      	bne.n	800231c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fcea 	bl	8005cf0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fcc1 	bl	8008ca4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fbab 	bl	8005a82 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002336:	d102      	bne.n	800233e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f001 fd33 	bl	8003da4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fb9d 	bl	8005a82 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b08      	cmp	r3, #8
 8002350:	d106      	bne.n	8002360 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 fc8a 	bl	8008c6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 fb8c 	bl	8005a82 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002374:	d139      	bne.n	80023ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 f926 	bl	80065cc <USB_HC_ReadInterrupt>
 8002380:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e025      	b.n	80023d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d018      	beq.n	80023ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b2:	d106      	bne.n	80023c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f905 	bl	80025ca <HCD_HC_IN_IRQHandler>
 80023c0:	e005      	b.n	80023ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 ff67 	bl	800329c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	795b      	ldrb	r3, [r3, #5]
 80023d8:	461a      	mov	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d3d3      	bcc.n	8002388 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fb47 	bl	8005a82 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d101      	bne.n	8002402 <HAL_HCD_IRQHandler+0x1ea>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_HCD_IRQHandler+0x1ec>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d014      	beq.n	8002432 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f001 fbe4 	bl	8003be6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0210 	orr.w	r2, r2, #16
 800242c:	619a      	str	r2, [r3, #24]
 800242e:	e000      	b.n	8002432 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002430:	bf00      	nop
    }
  }
}
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_HCD_Start+0x16>
 800244a:	2302      	movs	r3, #2
 800244c:	e013      	b.n	8002476 <HAL_HCD_Start+0x3e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f003 fcae 	bl	8005dbe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f9a7 	bl	80057ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_HCD_Stop+0x16>
 8002490:	2302      	movs	r3, #2
 8002492:	e00d      	b.n	80024b0 <HAL_HCD_Stop+0x32>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fa01 	bl	80068a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 fc50 	bl	8005d6a <USB_ResetPort>
 80024ca:	4603      	mov	r3, r0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334c      	adds	r3, #76	; 0x4c
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3338      	adds	r3, #56	; 0x38
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fc92 	bl	8005e5e <USB_GetCurrentFrame>
 800253a:	4603      	mov	r3, r0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fc6d 	bl	8005e30 <USB_GetHostSpeed>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	331a      	adds	r3, #26
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	331b      	adds	r3, #27
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3325      	adds	r3, #37	; 0x25
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3324      	adds	r3, #36	; 0x24
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fa5d 	bl	8005aa8 <USB_ReadChInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d11a      	bne.n	800262e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	2304      	movs	r3, #4
 8002608:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	334d      	adds	r3, #77	; 0x4d
 800261a:	2207      	movs	r2, #7
 800261c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f003 ffe1 	bl	80065ee <USB_HC_Halt>
 800262c:	e09e      	b.n	800276c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fa36 	bl	8005aa8 <USB_ReadChInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002646:	d11b      	bne.n	8002680 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334d      	adds	r3, #77	; 0x4d
 800266c:	2208      	movs	r2, #8
 800266e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 ffb8 	bl	80065ee <USB_HC_Halt>
 800267e:	e075      	b.n	800276c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fa0d 	bl	8005aa8 <USB_ReadChInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b08      	cmp	r3, #8
 8002696:	d11a      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	461a      	mov	r2, r3
 80026a6:	2308      	movs	r3, #8
 80026a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	334d      	adds	r3, #77	; 0x4d
 80026ba:	2206      	movs	r2, #6
 80026bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 ff91 	bl	80065ee <USB_HC_Halt>
 80026cc:	e04e      	b.n	800276c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 f9e6 	bl	8005aa8 <USB_ReadChInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d11b      	bne.n	8002720 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	334d      	adds	r3, #77	; 0x4d
 800270c:	2209      	movs	r2, #9
 800270e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ff68 	bl	80065ee <USB_HC_Halt>
 800271e:	e025      	b.n	800276c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f003 f9bd 	bl	8005aa8 <USB_ReadChInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d119      	bne.n	800276c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334d      	adds	r3, #77	; 0x4d
 800275a:	2207      	movs	r2, #7
 800275c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 ff41 	bl	80065ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f003 f997 	bl	8005aa8 <USB_ReadChInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002784:	d112      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f003 ff2d 	bl	80065ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a6:	6093      	str	r3, [r2, #8]
 80027a8:	f000 bd75 	b.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f977 	bl	8005aa8 <USB_ReadChInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f040 8128 	bne.w	8002a16 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2320      	movs	r3, #32
 80027d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	331b      	adds	r3, #27
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d119      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	331b      	adds	r3, #27
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	0151      	lsls	r1, r2, #5
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	440a      	add	r2, r1
 8002818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002820:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	799b      	ldrb	r3, [r3, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01b      	beq.n	8002862 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	1ac9      	subs	r1, r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4403      	add	r3, r0
 800285e:	3338      	adds	r3, #56	; 0x38
 8002860:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334d      	adds	r3, #77	; 0x4d
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3344      	adds	r3, #68	; 0x44
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	2301      	movs	r3, #1
 800289a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3326      	adds	r3, #38	; 0x26
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3326      	adds	r3, #38	; 0x26
 80028c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d110      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fe8c 	bl	80065ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	2310      	movs	r3, #16
 80028e6:	6093      	str	r3, [r2, #8]
 80028e8:	e03d      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3326      	adds	r3, #38	; 0x26
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d00a      	beq.n	8002916 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3326      	adds	r3, #38	; 0x26
 8002910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002912:	2b01      	cmp	r3, #1
 8002914:	d127      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	0151      	lsls	r1, r2, #5
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	440a      	add	r2, r1
 800292c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002934:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	334c      	adds	r3, #76	; 0x4c
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	334c      	adds	r3, #76	; 0x4c
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f006 f9ad 	bl	8008cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	799b      	ldrb	r3, [r3, #6]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d13b      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3338      	adds	r3, #56	; 0x38
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4403      	add	r3, r0
 800298e:	3328      	adds	r3, #40	; 0x28
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	440b      	add	r3, r1
 8002994:	1e59      	subs	r1, r3, #1
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4403      	add	r3, r0
 80029a4:	3328      	adds	r3, #40	; 0x28
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8470 	beq.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	333c      	adds	r3, #60	; 0x3c
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2d8      	uxtb	r0, r3
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	333c      	adds	r3, #60	; 0x3c
 80029de:	4602      	mov	r2, r0
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	f000 bc58 	b.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	333c      	adds	r3, #60	; 0x3c
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2d8      	uxtb	r0, r3
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	333c      	adds	r3, #60	; 0x3c
 8002a0e:	4602      	mov	r2, r0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	f000 bc40 	b.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 f842 	bl	8005aa8 <USB_ReadChInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d131      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	331a      	adds	r3, #26
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 841f 	bne.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	331b      	adds	r3, #27
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334d      	adds	r3, #77	; 0x4d
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fdb0 	bl	80065ee <USB_HC_Halt>
 8002a8e:	f000 bc02 	b.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 f804 	bl	8005aa8 <USB_ReadChInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	f040 8305 	bne.w	80030b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2302      	movs	r3, #2
 8002abc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	334d      	adds	r3, #77	; 0x4d
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	334d      	adds	r3, #77	; 0x4d
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334c      	adds	r3, #76	; 0x4c
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e2cc      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	334d      	adds	r3, #77	; 0x4d
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d114      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	; 0x4d
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334c      	adds	r3, #76	; 0x4c
 8002b38:	2205      	movs	r2, #5
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e2ac      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	; 0x4d
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d00b      	beq.n	8002b6c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334d      	adds	r3, #77	; 0x4d
 8002b64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	f040 80a6 	bne.w	8002cb8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334d      	adds	r3, #77	; 0x4d
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3344      	adds	r3, #68	; 0x44
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1c59      	adds	r1, r3, #1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4403      	add	r3, r0
 8002ba0:	3344      	adds	r3, #68	; 0x44
 8002ba2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3344      	adds	r3, #68	; 0x44
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d943      	bls.n	8002c42 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	331a      	adds	r3, #26
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d123      	bne.n	8002c2c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	331c      	adds	r3, #28
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	0151      	lsls	r1, r2, #5
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	440a      	add	r2, r1
 8002c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	334c      	adds	r3, #76	; 0x4c
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c40:	e229      	b.n	8003096 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	334c      	adds	r3, #76	; 0x4c
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	; 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3326      	adds	r3, #38	; 0x26
 8002c7c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 8209 	bne.w	8003096 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c9a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cb6:	e1ee      	b.n	8003096 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334d      	adds	r3, #77	; 0x4d
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	f040 80c8 	bne.w	8002e60 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	; 0x4d
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	331b      	adds	r3, #27
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 81ce 	bne.w	8003098 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3326      	adds	r3, #38	; 0x26
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d16b      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3348      	adds	r3, #72	; 0x48
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	3348      	adds	r3, #72	; 0x48
 8002d34:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3348      	adds	r3, #72	; 0x48
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d943      	bls.n	8002dd4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	3348      	adds	r3, #72	; 0x48
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331b      	adds	r3, #27
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3344      	adds	r3, #68	; 0x44
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d809      	bhi.n	8002d9e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	331c      	adds	r3, #28
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	0151      	lsls	r1, r2, #5
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	440a      	add	r2, r1
 8002db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	334c      	adds	r3, #76	; 0x4c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e014      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334c      	adds	r3, #76	; 0x4c
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e009      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	334c      	adds	r3, #76	; 0x4c
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3326      	adds	r3, #38	; 0x26
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3326      	adds	r3, #38	; 0x26
 8002e24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 8136 	bne.w	8003098 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e11b      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	; 0x4d
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	f040 8081 	bne.w	8002f7a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	334d      	adds	r3, #77	; 0x4d
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	331b      	adds	r3, #27
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	f040 80fa 	bne.w	8003098 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	; 0x4c
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	0151      	lsls	r1, r2, #5
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	440a      	add	r2, r1
 8002ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	0151      	lsls	r1, r2, #5
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	440a      	add	r2, r1
 8002eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	0151      	lsls	r1, r2, #5
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f12:	f023 0320 	bic.w	r3, r3, #32
 8002f16:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3326      	adds	r3, #38	; 0x26
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3326      	adds	r3, #38	; 0x26
 8002f3e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f040 80a9 	bne.w	8003098 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f64:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e08e      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	334d      	adds	r3, #77	; 0x4d
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d143      	bne.n	8003018 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	; 0x4d
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	; 0x4c
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3326      	adds	r3, #38	; 0x26
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3326      	adds	r3, #38	; 0x26
 8002fde:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d159      	bne.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ffa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003002:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e03f      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	; 0x4d
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d126      	bne.n	800307c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	334d      	adds	r3, #77	; 0x4d
 800303e:	2202      	movs	r2, #2
 8003040:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3344      	adds	r3, #68	; 0x44
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1c59      	adds	r1, r3, #1
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	3344      	adds	r3, #68	; 0x44
 8003064:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334c      	adds	r3, #76	; 0x4c
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e00d      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334d      	adds	r3, #77	; 0x4d
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	f000 8100 	beq.w	8003294 <HCD_HC_IN_IRQHandler+0xcca>
 8003094:	e000      	b.n	8003098 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003096:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	334c      	adds	r3, #76	; 0x4c
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f005 fe06 	bl	8008cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030b4:	e0ef      	b.n	8003296 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fcf2 	bl	8005aa8 <USB_ReadChInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d12f      	bne.n	800312e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2340      	movs	r3, #64	; 0x40
 80030de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334d      	adds	r3, #77	; 0x4d
 80030f0:	2205      	movs	r2, #5
 80030f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	331a      	adds	r3, #26
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3344      	adds	r3, #68	; 0x44
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fa61 	bl	80065ee <USB_HC_Halt>
 800312c:	e0b3      	b.n	8003296 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f002 fcb6 	bl	8005aa8 <USB_ReadChInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	f040 80a7 	bne.w	8003296 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3326      	adds	r3, #38	; 0x26
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d11b      	bne.n	8003196 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3344      	adds	r3, #68	; 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334d      	adds	r3, #77	; 0x4d
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fa2d 	bl	80065ee <USB_HC_Halt>
 8003194:	e03f      	b.n	8003216 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3326      	adds	r3, #38	; 0x26
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3326      	adds	r3, #38	; 0x26
 80031bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d129      	bne.n	8003216 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3344      	adds	r3, #68	; 0x44
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	799b      	ldrb	r3, [r3, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	331b      	adds	r3, #27
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d110      	bne.n	8003216 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	334d      	adds	r3, #77	; 0x4d
 8003204:	2204      	movs	r2, #4
 8003206:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f003 f9ec 	bl	80065ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331b      	adds	r3, #27
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d129      	bne.n	8003280 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	331b      	adds	r3, #27
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	440a      	add	r2, r1
 8003276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327a:	f043 0320 	orr.w	r3, r3, #32
 800327e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	2310      	movs	r3, #16
 8003290:	6093      	str	r3, [r2, #8]
 8003292:	e000      	b.n	8003296 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003294:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fbf4 	bl	8005aa8 <USB_ReadChInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d11b      	bne.n	8003302 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	461a      	mov	r2, r3
 80032d8:	2304      	movs	r3, #4
 80032da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	334d      	adds	r3, #77	; 0x4d
 80032ec:	2207      	movs	r2, #7
 80032ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 f978 	bl	80065ee <USB_HC_Halt>
 80032fe:	f000 bc6f 	b.w	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f002 fbcc 	bl	8005aa8 <USB_ReadChInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 8082 	bne.w	8003420 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2320      	movs	r3, #32
 800332c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3319      	adds	r3, #25
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d124      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3319      	adds	r3, #25
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334c      	adds	r3, #76	; 0x4c
 8003368:	2202      	movs	r2, #2
 800336a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	; 0x4d
 800337c:	2203      	movs	r2, #3
 800337e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f003 f930 	bl	80065ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	331a      	adds	r3, #26
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 841d 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	331b      	adds	r3, #27
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8411 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3326      	adds	r3, #38	; 0x26
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d009      	beq.n	80033e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	331b      	adds	r3, #27
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	; 0x4d
 80033f8:	2203      	movs	r2, #3
 80033fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f003 f8f2 	bl	80065ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3344      	adds	r3, #68	; 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e3df      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fb3d 	bl	8005aa8 <USB_ReadChInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d111      	bne.n	800345e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	461a      	mov	r2, r3
 8003448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800344c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f003 f8c9 	bl	80065ee <USB_HC_Halt>
 800345c:	e3c0      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f002 fb1e 	bl	8005aa8 <USB_ReadChInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d168      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3344      	adds	r3, #68	; 0x44
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f002 fb08 	bl	8005aa8 <USB_ReadChInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d112      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3319      	adds	r3, #25
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	461a      	mov	r2, r3
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	331b      	adds	r3, #27
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	331b      	adds	r3, #27
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	0151      	lsls	r1, r2, #5
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	440a      	add	r2, r1
 8003508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	2301      	movs	r3, #1
 8003522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	; 0x4d
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f003 f854 	bl	80065ee <USB_HC_Halt>
 8003546:	e34b      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f002 faa9 	bl	8005aa8 <USB_ReadChInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d139      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334d      	adds	r3, #77	; 0x4d
 8003570:	2205      	movs	r2, #5
 8003572:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	331a      	adds	r3, #26
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3319      	adds	r3, #25
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3344      	adds	r3, #68	; 0x44
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 f817 	bl	80065ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	e305      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f002 fa63 	bl	8005aa8 <USB_ReadChInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d11a      	bne.n	8003622 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	; 0x4d
 800360e:	2206      	movs	r2, #6
 8003610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f002 ffe7 	bl	80065ee <USB_HC_Halt>
 8003620:	e2de      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f002 fa3c 	bl	8005aa8 <USB_ReadChInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d144      	bne.n	80036c4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3344      	adds	r3, #68	; 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	334d      	adds	r3, #77	; 0x4d
 800365e:	2204      	movs	r2, #4
 8003660:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3319      	adds	r3, #25
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d114      	bne.n	80036a2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3318      	adds	r3, #24
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3319      	adds	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 ff9f 	bl	80065ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	2310      	movs	r3, #16
 80036c0:	6093      	str	r3, [r2, #8]
 80036c2:	e28d      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f002 f9eb 	bl	8005aa8 <USB_ReadChInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d169      	bne.n	80037b0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	799b      	ldrb	r3, [r3, #6]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	334d      	adds	r3, #77	; 0x4d
 80036f4:	2207      	movs	r2, #7
 80036f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f002 ff74 	bl	80065ee <USB_HC_Halt>
 8003706:	e049      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3344      	adds	r3, #68	; 0x44
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4403      	add	r3, r0
 8003728:	3344      	adds	r3, #68	; 0x44
 800372a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3344      	adds	r3, #68	; 0x44
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d922      	bls.n	8003788 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3344      	adds	r3, #68	; 0x44
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	334c      	adds	r3, #76	; 0x4c
 8003766:	2204      	movs	r2, #4
 8003768:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334c      	adds	r3, #76	; 0x4c
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 fa9d 	bl	8008cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003786:	e009      	b.n	800379c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334c      	adds	r3, #76	; 0x4c
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	6093      	str	r3, [r2, #8]
 80037ae:	e217      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 f975 	bl	8005aa8 <USB_ReadChInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d11b      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334d      	adds	r3, #77	; 0x4d
 80037da:	2209      	movs	r2, #9
 80037dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 ff01 	bl	80065ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	e1ee      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f002 f94c 	bl	8005aa8 <USB_ReadChInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	f040 81df 	bne.w	8003bda <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2302      	movs	r3, #2
 800382c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	334d      	adds	r3, #77	; 0x4d
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	f040 8093 	bne.w	800396c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	334d      	adds	r3, #77	; 0x4d
 8003856:	2202      	movs	r2, #2
 8003858:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334c      	adds	r3, #76	; 0x4c
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3326      	adds	r3, #38	; 0x26
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d00b      	beq.n	800389c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3326      	adds	r3, #38	; 0x26
 8003894:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003896:	2b03      	cmp	r3, #3
 8003898:	f040 8190 	bne.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	799b      	ldrb	r3, [r3, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d115      	bne.n	80038d0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	333d      	adds	r3, #61	; 0x3d
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	f083 0301 	eor.w	r3, r3, #1
 80038bc:	b2d8      	uxtb	r0, r3
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	333d      	adds	r3, #61	; 0x3d
 80038cc:	4602      	mov	r2, r0
 80038ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	799b      	ldrb	r3, [r3, #6]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 8171 	bne.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3334      	adds	r3, #52	; 0x34
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8165 	beq.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3334      	adds	r3, #52	; 0x34
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4403      	add	r3, r0
 8003912:	3328      	adds	r3, #40	; 0x28
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	440b      	add	r3, r1
 8003918:	1e59      	subs	r1, r3, #1
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4403      	add	r3, r0
 8003928:	3328      	adds	r3, #40	; 0x28
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003930:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 813f 	beq.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	333d      	adds	r3, #61	; 0x3d
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2d8      	uxtb	r0, r3
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	333d      	adds	r3, #61	; 0x3d
 8003966:	4602      	mov	r2, r0
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e127      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	334d      	adds	r3, #77	; 0x4d
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d120      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334d      	adds	r3, #77	; 0x4d
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	331b      	adds	r3, #27
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 8107 	bne.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	334c      	adds	r3, #76	; 0x4c
 80039be:	2202      	movs	r2, #2
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e0fb      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	; 0x4d
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d13a      	bne.n	8003a50 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	; 0x4d
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334c      	adds	r3, #76	; 0x4c
 80039fe:	2202      	movs	r2, #2
 8003a00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	331b      	adds	r3, #27
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 80d1 	bne.w	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	331b      	adds	r3, #27
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4c:	6053      	str	r3, [r2, #4]
 8003a4e:	e0b5      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334d      	adds	r3, #77	; 0x4d
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d114      	bne.n	8003a90 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334d      	adds	r3, #77	; 0x4d
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	334c      	adds	r3, #76	; 0x4c
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e095      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	334d      	adds	r3, #77	; 0x4d
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d114      	bne.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334d      	adds	r3, #77	; 0x4d
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334c      	adds	r3, #76	; 0x4c
 8003aca:	2205      	movs	r2, #5
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e075      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	334d      	adds	r3, #77	; 0x4d
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b07      	cmp	r3, #7
 8003ae4:	d00a      	beq.n	8003afc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	334d      	adds	r3, #77	; 0x4d
 8003af6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d170      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	; 0x4d
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3344      	adds	r3, #68	; 0x44
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3344      	adds	r3, #68	; 0x44
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d914      	bls.n	8003b74 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3344      	adds	r3, #68	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334c      	adds	r3, #76	; 0x4c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b72:	e022      	b.n	8003bba <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334c      	adds	r3, #76	; 0x4c
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b9e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	; 0x4c
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f005 f874 	bl	8008cc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd8:	e002      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003bde:	bf00      	nop
  }
}
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	; 0x28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	0c5b      	lsrs	r3, r3, #17
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c1a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d004      	beq.n	8003c2c <HCD_RXQLVL_IRQHandler+0x46>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	f000 80b6 	beq.w	8003d96 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c2a:	e0b7      	b.n	8003d9c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80b3 	beq.w	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	332c      	adds	r3, #44	; 0x2c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80a7 	beq.w	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3338      	adds	r3, #56	; 0x38
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	18d1      	adds	r1, r2, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3334      	adds	r3, #52	; 0x34
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4299      	cmp	r1, r3
 8003c76:	f200 8083 	bhi.w	8003d80 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	332c      	adds	r3, #44	; 0x2c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	b292      	uxth	r2, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f001 fe9c 	bl	80059d2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	332c      	adds	r3, #44	; 0x2c
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	18d1      	adds	r1, r2, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4403      	add	r3, r0
 8003cbe:	332c      	adds	r3, #44	; 0x2c
 8003cc0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3338      	adds	r3, #56	; 0x38
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	18d1      	adds	r1, r2, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4403      	add	r3, r0
 8003ce6:	3338      	adds	r3, #56	; 0x38
 8003ce8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	0cdb      	lsrs	r3, r3, #19
 8003cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d13f      	bne.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d03c      	beq.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d36:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d3e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	333c      	adds	r3, #60	; 0x3c
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2d8      	uxtb	r0, r3
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	333c      	adds	r3, #60	; 0x3c
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	701a      	strb	r2, [r3, #0]
      break;
 8003d7e:	e00c      	b.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	334c      	adds	r3, #76	; 0x4c
 8003d90:	2204      	movs	r2, #4
 8003d92:	701a      	strb	r2, [r3, #0]
      break;
 8003d94:	e001      	b.n	8003d9a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003d9a:	bf00      	nop
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3728      	adds	r7, #40	; 0x28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dd0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d10b      	bne.n	8003df4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f004 ff4e 	bl	8008c88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d132      	bne.n	8003e64 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f043 0308 	orr.w	r3, r3, #8
 8003e04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d126      	bne.n	8003e5e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a5b      	ldrb	r3, [r3, #9]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d113      	bne.n	8003e40 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e22:	d106      	bne.n	8003e32 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 ff60 	bl	8005cf0 <USB_InitFSLSPClkSel>
 8003e30:	e011      	b.n	8003e56 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 ff59 	bl	8005cf0 <USB_InitFSLSPClkSel>
 8003e3e:	e00a      	b.n	8003e56 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	79db      	ldrb	r3, [r3, #7]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e54:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f004 ff40 	bl	8008cdc <HAL_HCD_PortEnabled_Callback>
 8003e5c:	e002      	b.n	8003e64 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f004 ff4a 	bl	8008cf8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d103      	bne.n	8003e76 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f043 0320 	orr.w	r3, r3, #32
 8003e74:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6013      	str	r3, [r2, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e12b      	b.n	80040f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f9a4 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f001 fa20 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a81      	ldr	r2, [pc, #516]	; (8004100 <HAL_I2C_Init+0x274>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d807      	bhi.n	8003f10 <HAL_I2C_Init+0x84>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a80      	ldr	r2, [pc, #512]	; (8004104 <HAL_I2C_Init+0x278>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bf94      	ite	ls
 8003f08:	2301      	movls	r3, #1
 8003f0a:	2300      	movhi	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e006      	b.n	8003f1e <HAL_I2C_Init+0x92>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <HAL_I2C_Init+0x27c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	bf94      	ite	ls
 8003f18:	2301      	movls	r3, #1
 8003f1a:	2300      	movhi	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0e7      	b.n	80040f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a78      	ldr	r2, [pc, #480]	; (800410c <HAL_I2C_Init+0x280>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0c9b      	lsrs	r3, r3, #18
 8003f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a6a      	ldr	r2, [pc, #424]	; (8004100 <HAL_I2C_Init+0x274>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d802      	bhi.n	8003f60 <HAL_I2C_Init+0xd4>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	e009      	b.n	8003f74 <HAL_I2C_Init+0xe8>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	4a69      	ldr	r2, [pc, #420]	; (8004110 <HAL_I2C_Init+0x284>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	3301      	adds	r3, #1
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	495c      	ldr	r1, [pc, #368]	; (8004100 <HAL_I2C_Init+0x274>)
 8003f90:	428b      	cmp	r3, r1
 8003f92:	d819      	bhi.n	8003fc8 <HAL_I2C_Init+0x13c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e59      	subs	r1, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fa8:	400b      	ands	r3, r1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_I2C_Init+0x138>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1e59      	subs	r1, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	e051      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e04f      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d111      	bne.n	8003ff4 <HAL_I2C_Init+0x168>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	440b      	add	r3, r1
 8003fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e012      	b.n	800401a <HAL_I2C_Init+0x18e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	0099      	lsls	r1, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Init+0x196>
 800401e:	2301      	movs	r3, #1
 8004020:	e022      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10e      	bne.n	8004048 <HAL_I2C_Init+0x1bc>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e58      	subs	r0, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	440b      	add	r3, r1
 8004038:	fbb0 f3f3 	udiv	r3, r0, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	e00f      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	0099      	lsls	r1, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6809      	ldr	r1, [r1, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6911      	ldr	r1, [r2, #16]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	000186a0 	.word	0x000186a0
 8004104:	001e847f 	.word	0x001e847f
 8004108:	003d08ff 	.word	0x003d08ff
 800410c:	431bde83 	.word	0x431bde83
 8004110:	10624dd3 	.word	0x10624dd3

08004114 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e128      	b.n	8004378 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a90      	ldr	r2, [pc, #576]	; (8004380 <HAL_I2S_Init+0x26c>)
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd f8a5 	bl	8001290 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800415c:	f023 030f 	bic.w	r3, r3, #15
 8004160:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2202      	movs	r2, #2
 8004168:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d060      	beq.n	8004234 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800417a:	2310      	movs	r3, #16
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e001      	b.n	8004184 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004180:	2320      	movs	r3, #32
 8004182:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b20      	cmp	r3, #32
 800418a:	d802      	bhi.n	8004192 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004192:	2001      	movs	r0, #1
 8004194:	f001 f9c4 	bl	8005520 <HAL_RCCEx_GetPeriphCLKFreq>
 8004198:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a2:	d125      	bne.n	80041f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	3305      	adds	r3, #5
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e01f      	b.n	800420e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	3305      	adds	r3, #5
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e00e      	b.n	800420e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	461a      	mov	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	3305      	adds	r3, #5
 800420c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_I2S_Init+0x270>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	08db      	lsrs	r3, r3, #3
 8004218:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e003      	b.n	800423c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004234:	2302      	movs	r3, #2
 8004236:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d902      	bls.n	8004248 <HAL_I2S_Init+0x134>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2bff      	cmp	r3, #255	; 0xff
 8004246:	d907      	bls.n	8004258 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e08f      	b.n	8004378 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	430a      	orrs	r2, r1
 800426a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004276:	f023 030f 	bic.w	r3, r3, #15
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6851      	ldr	r1, [r2, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68d2      	ldr	r2, [r2, #12]
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6992      	ldr	r2, [r2, #24]
 800428e:	430a      	orrs	r2, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d161      	bne.n	8004368 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a38      	ldr	r2, [pc, #224]	; (8004388 <HAL_I2S_Init+0x274>)
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a37      	ldr	r2, [pc, #220]	; (800438c <HAL_I2S_Init+0x278>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_I2S_Init+0x1a4>
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_I2S_Init+0x27c>)
 80042b6:	e001      	b.n	80042bc <HAL_I2S_Init+0x1a8>
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4932      	ldr	r1, [pc, #200]	; (800438c <HAL_I2S_Init+0x278>)
 80042c4:	428a      	cmp	r2, r1
 80042c6:	d101      	bne.n	80042cc <HAL_I2S_Init+0x1b8>
 80042c8:	4a31      	ldr	r2, [pc, #196]	; (8004390 <HAL_I2S_Init+0x27c>)
 80042ca:	e001      	b.n	80042d0 <HAL_I2S_Init+0x1bc>
 80042cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80042d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042d4:	f023 030f 	bic.w	r3, r3, #15
 80042d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <HAL_I2S_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_I2S_Init+0x1d4>
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_I2S_Init+0x27c>)
 80042e6:	e001      	b.n	80042ec <HAL_I2S_Init+0x1d8>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ec:	2202      	movs	r2, #2
 80042ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a25      	ldr	r2, [pc, #148]	; (800438c <HAL_I2S_Init+0x278>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_I2S_Init+0x1ea>
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_I2S_Init+0x27c>)
 80042fc:	e001      	b.n	8004302 <HAL_I2S_Init+0x1ee>
 80042fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430e:	d003      	beq.n	8004318 <HAL_I2S_Init+0x204>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e001      	b.n	8004324 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800432e:	4313      	orrs	r3, r2
 8004330:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004338:	4313      	orrs	r3, r2
 800433a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004342:	4313      	orrs	r3, r2
 8004344:	b29a      	uxth	r2, r3
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	4313      	orrs	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004350:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a0d      	ldr	r2, [pc, #52]	; (800438c <HAL_I2S_Init+0x278>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <HAL_I2S_Init+0x24c>
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_I2S_Init+0x27c>)
 800435e:	e001      	b.n	8004364 <HAL_I2S_Init+0x250>
 8004360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004364:	897a      	ldrh	r2, [r7, #10]
 8004366:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	0800448b 	.word	0x0800448b
 8004384:	cccccccd 	.word	0xcccccccd
 8004388:	080045a1 	.word	0x080045a1
 800438c:	40003800 	.word	0x40003800
 8004390:	40003400 	.word	0x40003400

08004394 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004414:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffb8 	bl	8004394 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	b292      	uxth	r2, r2
 8004440:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	1c9a      	adds	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10e      	bne.n	8004482 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004472:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff93 	bl	80043a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d13a      	bne.n	800451c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d109      	bne.n	80044c4 <I2S_IRQHandler+0x3a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d102      	bne.n	80044c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ffb4 	bl	800442c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d126      	bne.n	800451c <I2S_IRQHandler+0x92>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d11f      	bne.n	800451c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f043 0202 	orr.w	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff50 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b03      	cmp	r3, #3
 8004526:	d136      	bne.n	8004596 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d109      	bne.n	8004546 <I2S_IRQHandler+0xbc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d102      	bne.n	8004546 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ff45 	bl	80043d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b08      	cmp	r3, #8
 800454e:	d122      	bne.n	8004596 <I2S_IRQHandler+0x10c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d11b      	bne.n	8004596 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800456c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f043 0204 	orr.w	r2, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff13 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a92      	ldr	r2, [pc, #584]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045ba:	4b92      	ldr	r3, [pc, #584]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045bc:	e001      	b.n	80045c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a8b      	ldr	r2, [pc, #556]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d101      	bne.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045d8:	4b8a      	ldr	r3, [pc, #552]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045da:	e001      	b.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80045dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d004      	beq.n	80045f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 8099 	bne.w	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d107      	bne.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f925 	bl	800485c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d107      	bne.n	800462c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9c8 	bl	80049bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d13a      	bne.n	80046ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d035      	beq.n	80046ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6e      	ldr	r2, [pc, #440]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800464a:	4b6e      	ldr	r3, [pc, #440]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800464c:	e001      	b.n	8004652 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800464e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4969      	ldr	r1, [pc, #420]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800465a:	428b      	cmp	r3, r1
 800465c:	d101      	bne.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800465e:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004660:	e001      	b.n	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800466a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800467a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe88 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	f040 80c3 	bne.w	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80bd 	beq.w	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a49      	ldr	r2, [pc, #292]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80046de:	4b49      	ldr	r3, [pc, #292]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046e0:	e001      	b.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80046e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4944      	ldr	r1, [pc, #272]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ee:	428b      	cmp	r3, r1
 80046f0:	d101      	bne.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046f2:	4b44      	ldr	r3, [pc, #272]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f4:	e001      	b.n	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fe4a 	bl	80043bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004728:	e089      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8be 	bl	80048c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8fd 	bl	8004958 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d12f      	bne.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02a      	beq.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004780:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800478e:	e001      	b.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4919      	ldr	r1, [pc, #100]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800479c:	428b      	cmp	r3, r1
 800479e:	d101      	bne.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047a0:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a2:	e001      	b.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fdfa 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d136      	bne.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d031      	beq.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e8:	e001      	b.n	80047ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4902      	ldr	r1, [pc, #8]	; (8004800 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f6:	428b      	cmp	r3, r1
 80047f8:	d106      	bne.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047fa:	4b02      	ldr	r3, [pc, #8]	; (8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047fc:	e006      	b.n	800480c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047fe:	bf00      	nop
 8004800:	40003800 	.word	0x40003800
 8004804:	40003400 	.word	0x40003400
 8004808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800480c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004810:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004820:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f043 0204 	orr.w	r2, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fdc0 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800483c:	e000      	b.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800483e:	bf00      	nop
}
 8004840:	bf00      	nop
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c99      	adds	r1, r3, #2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6251      	str	r1, [r2, #36]	; 0x24
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d113      	bne.n	80048b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800489c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ffc9 	bl	8004848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	1c99      	adds	r1, r3, #2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6251      	str	r1, [r2, #36]	; 0x24
 80048d2:	8819      	ldrh	r1, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <I2SEx_TxISR_I2SExt+0x90>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <I2SEx_TxISR_I2SExt+0x22>
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <I2SEx_TxISR_I2SExt+0x94>)
 80048e0:	e001      	b.n	80048e6 <I2SEx_TxISR_I2SExt+0x26>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e6:	460a      	mov	r2, r1
 80048e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d121      	bne.n	8004946 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <I2SEx_TxISR_I2SExt+0x90>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <I2SEx_TxISR_I2SExt+0x50>
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <I2SEx_TxISR_I2SExt+0x94>)
 800490e:	e001      	b.n	8004914 <I2SEx_TxISR_I2SExt+0x54>
 8004910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	490d      	ldr	r1, [pc, #52]	; (8004950 <I2SEx_TxISR_I2SExt+0x90>)
 800491c:	428b      	cmp	r3, r1
 800491e:	d101      	bne.n	8004924 <I2SEx_TxISR_I2SExt+0x64>
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <I2SEx_TxISR_I2SExt+0x94>)
 8004922:	e001      	b.n	8004928 <I2SEx_TxISR_I2SExt+0x68>
 8004924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800492c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ff81 	bl	8004848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40003800 	.word	0x40003800
 8004954:	40003400 	.word	0x40003400

08004958 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68d8      	ldr	r0, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	1c99      	adds	r1, r3, #2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004970:	b282      	uxth	r2, r0
 8004972:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d113      	bne.n	80049b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800499a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff4a 	bl	8004848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <I2SEx_RxISR_I2SExt+0x90>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <I2SEx_RxISR_I2SExt+0x16>
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <I2SEx_RxISR_I2SExt+0x94>)
 80049d0:	e001      	b.n	80049d6 <I2SEx_RxISR_I2SExt+0x1a>
 80049d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d6:	68d8      	ldr	r0, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	1c99      	adds	r1, r3, #2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049e2:	b282      	uxth	r2, r0
 80049e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d121      	bne.n	8004a42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <I2SEx_RxISR_I2SExt+0x90>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <I2SEx_RxISR_I2SExt+0x50>
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <I2SEx_RxISR_I2SExt+0x94>)
 8004a0a:	e001      	b.n	8004a10 <I2SEx_RxISR_I2SExt+0x54>
 8004a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	490d      	ldr	r1, [pc, #52]	; (8004a4c <I2SEx_RxISR_I2SExt+0x90>)
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	d101      	bne.n	8004a20 <I2SEx_RxISR_I2SExt+0x64>
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <I2SEx_RxISR_I2SExt+0x94>)
 8004a1e:	e001      	b.n	8004a24 <I2SEx_RxISR_I2SExt+0x68>
 8004a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff03 	bl	8004848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40003800 	.word	0x40003800
 8004a50:	40003400 	.word	0x40003400

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e267      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d075      	beq.n	8004b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4b85      	ldr	r3, [pc, #532]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d112      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b82      	ldr	r3, [pc, #520]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	4b7e      	ldr	r3, [pc, #504]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05b      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d157      	bne.n	8004b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e242      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x74>
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x98>
 8004ad2:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6f      	ldr	r2, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b6d      	ldr	r3, [pc, #436]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6c      	ldr	r2, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004aec:	4b69      	ldr	r3, [pc, #420]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a68      	ldr	r2, [pc, #416]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fc fd94 	bl	8001638 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fc fd90 	bl	8001638 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e207      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0xc0>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fc fd80 	bl	8001638 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fc fd7c 	bl	8001638 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1f3      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0xe8>
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d063      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1c7      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4937      	ldr	r1, [pc, #220]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <HAL_RCC_OscConfig+0x244>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fc fd35 	bl	8001638 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fc fd31 	bl	8001638 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1a8      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4925      	ldr	r1, [pc, #148]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCC_OscConfig+0x244>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fc fd14 	bl	8001638 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fc fd10 	bl	8001638 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e187      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d036      	beq.n	8004cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCC_OscConfig+0x248>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fc fcf4 	bl	8001638 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fc fcf0 	bl	8001638 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e167      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x240>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x200>
 8004c72:	e01b      	b.n	8004cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_OscConfig+0x248>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7a:	f7fc fcdd 	bl	8001638 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e00e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fc fcd9 	bl	8001638 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d907      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e150      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470000 	.word	0x42470000
 8004c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	4b88      	ldr	r3, [pc, #544]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ea      	bne.n	8004c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8097 	beq.w	8004de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbe:	4b81      	ldr	r3, [pc, #516]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	4b7d      	ldr	r3, [pc, #500]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a7c      	ldr	r2, [pc, #496]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cda:	4b7a      	ldr	r3, [pc, #488]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b77      	ldr	r3, [pc, #476]	; (8004ec8 <HAL_RCC_OscConfig+0x474>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d118      	bne.n	8004d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b74      	ldr	r3, [pc, #464]	; (8004ec8 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	; (8004ec8 <HAL_RCC_OscConfig+0x474>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7fc fc99 	bl	8001638 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fc fc95 	bl	8001638 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e10c      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <HAL_RCC_OscConfig+0x474>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x2ea>
 8004d30:	4b64      	ldr	r3, [pc, #400]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	4a63      	ldr	r2, [pc, #396]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCC_OscConfig+0x324>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x30c>
 8004d46:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	4a5e      	ldr	r2, [pc, #376]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70
 8004d52:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a5b      	ldr	r2, [pc, #364]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0x324>
 8004d60:	4b58      	ldr	r3, [pc, #352]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4a57      	ldr	r2, [pc, #348]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6c:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a54      	ldr	r2, [pc, #336]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004d72:	f023 0304 	bic.w	r3, r3, #4
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d015      	beq.n	8004dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fc fc5a 	bl	8001638 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fc fc56 	bl	8001638 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0cb      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9e:	4b49      	ldr	r3, [pc, #292]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ee      	beq.n	8004d88 <HAL_RCC_OscConfig+0x334>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dac:	f7fc fc44 	bl	8001638 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fc fc40 	bl	8001638 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0b5      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dca:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	4a38      	ldr	r2, [pc, #224]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a1 	beq.w	8004f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d05c      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d141      	bne.n	8004e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <HAL_RCC_OscConfig+0x478>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fc fc14 	bl	8001638 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fc fc10 	bl	8001638 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e087      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	491b      	ldr	r1, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x478>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fc fbe9 	bl	8001638 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fc fbe5 	bl	8001638 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e05c      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x416>
 8004e88:	e054      	b.n	8004f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <HAL_RCC_OscConfig+0x478>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fc fbd2 	bl	8001638 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fc fbce 	bl	8001638 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e045      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCC_OscConfig+0x470>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x444>
 8004eb6:	e03d      	b.n	8004f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d107      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e038      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <HAL_RCC_OscConfig+0x4ec>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d028      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d121      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d11a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d111      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800

08004f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0cc      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4b68      	ldr	r3, [pc, #416]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90c      	bls.n	8004f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b65      	ldr	r3, [pc, #404]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0b8      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d020      	beq.n	8004fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f98:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4a58      	ldr	r2, [pc, #352]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fb0:	4b53      	ldr	r3, [pc, #332]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4a52      	ldr	r2, [pc, #328]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fbc:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	494d      	ldr	r1, [pc, #308]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d044      	beq.n	8005064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d107      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d119      	bne.n	8005022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e07f      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d003      	beq.n	8005002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	4b3f      	ldr	r3, [pc, #252]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e06f      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e067      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005022:	4b37      	ldr	r3, [pc, #220]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 0203 	bic.w	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4934      	ldr	r1, [pc, #208]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005034:	f7fc fb00 	bl	8001638 <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503a:	e00a      	b.n	8005052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800503c:	f7fc fafc 	bl	8001638 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f241 3288 	movw	r2, #5000	; 0x1388
 800504a:	4293      	cmp	r3, r2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e04f      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 020c 	and.w	r2, r3, #12
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	429a      	cmp	r2, r3
 8005062:	d1eb      	bne.n	800503c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005064:	4b25      	ldr	r3, [pc, #148]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d20c      	bcs.n	800508c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b22      	ldr	r3, [pc, #136]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e032      	b.n	80050f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4916      	ldr	r1, [pc, #88]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	490e      	ldr	r1, [pc, #56]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ca:	f000 f821 	bl	8005110 <HAL_RCC_GetSysClockFreq>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	490a      	ldr	r1, [pc, #40]	; (8005104 <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	5ccb      	ldrb	r3, [r1, r3]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fc fa60 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40023c00 	.word	0x40023c00
 8005100:	40023800 	.word	0x40023800
 8005104:	08009a94 	.word	0x08009a94
 8005108:	200001e8 	.word	0x200001e8
 800510c:	200001ec 	.word	0x200001ec

08005110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005114:	b094      	sub	sp, #80	; 0x50
 8005116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	2300      	movs	r3, #0
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005120:	2300      	movs	r3, #0
 8005122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005128:	4b79      	ldr	r3, [pc, #484]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 030c 	and.w	r3, r3, #12
 8005130:	2b08      	cmp	r3, #8
 8005132:	d00d      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x40>
 8005134:	2b08      	cmp	r3, #8
 8005136:	f200 80e1 	bhi.w	80052fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x34>
 800513e:	2b04      	cmp	r3, #4
 8005140:	d003      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0x3a>
 8005142:	e0db      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b73      	ldr	r3, [pc, #460]	; (8005314 <HAL_RCC_GetSysClockFreq+0x204>)
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005148:	e0db      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800514a:	4b73      	ldr	r3, [pc, #460]	; (8005318 <HAL_RCC_GetSysClockFreq+0x208>)
 800514c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514e:	e0d8      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005150:	4b6f      	ldr	r3, [pc, #444]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800515a:	4b6d      	ldr	r3, [pc, #436]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d063      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005166:	4b6a      	ldr	r3, [pc, #424]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	099b      	lsrs	r3, r3, #6
 800516c:	2200      	movs	r2, #0
 800516e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005170:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	f04f 0000 	mov.w	r0, #0
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	0159      	lsls	r1, r3, #5
 8005190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005194:	0150      	lsls	r0, r2, #5
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4621      	mov	r1, r4
 800519c:	1a51      	subs	r1, r2, r1
 800519e:	6139      	str	r1, [r7, #16]
 80051a0:	4629      	mov	r1, r5
 80051a2:	eb63 0301 	sbc.w	r3, r3, r1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b4:	4659      	mov	r1, fp
 80051b6:	018b      	lsls	r3, r1, #6
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051be:	4651      	mov	r1, sl
 80051c0:	018a      	lsls	r2, r1, #6
 80051c2:	4651      	mov	r1, sl
 80051c4:	ebb2 0801 	subs.w	r8, r2, r1
 80051c8:	4659      	mov	r1, fp
 80051ca:	eb63 0901 	sbc.w	r9, r3, r1
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e2:	4690      	mov	r8, r2
 80051e4:	4699      	mov	r9, r3
 80051e6:	4623      	mov	r3, r4
 80051e8:	eb18 0303 	adds.w	r3, r8, r3
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	462b      	mov	r3, r5
 80051f0:	eb49 0303 	adc.w	r3, r9, r3
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005202:	4629      	mov	r1, r5
 8005204:	024b      	lsls	r3, r1, #9
 8005206:	4621      	mov	r1, r4
 8005208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800520c:	4621      	mov	r1, r4
 800520e:	024a      	lsls	r2, r1, #9
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005216:	2200      	movs	r2, #0
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
 800521a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005220:	f7fb f826 	bl	8000270 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4613      	mov	r3, r2
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522c:	e058      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b38      	ldr	r3, [pc, #224]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	4618      	mov	r0, r3
 8005238:	4611      	mov	r1, r2
 800523a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	f04f 0000 	mov.w	r0, #0
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	0159      	lsls	r1, r3, #5
 8005256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525a:	0150      	lsls	r0, r2, #5
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4641      	mov	r1, r8
 8005262:	ebb2 0a01 	subs.w	sl, r2, r1
 8005266:	4649      	mov	r1, r9
 8005268:	eb63 0b01 	sbc.w	fp, r3, r1
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800527c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005280:	ebb2 040a 	subs.w	r4, r2, sl
 8005284:	eb63 050b 	sbc.w	r5, r3, fp
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	00eb      	lsls	r3, r5, #3
 8005292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005296:	00e2      	lsls	r2, r4, #3
 8005298:	4614      	mov	r4, r2
 800529a:	461d      	mov	r5, r3
 800529c:	4643      	mov	r3, r8
 800529e:	18e3      	adds	r3, r4, r3
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	464b      	mov	r3, r9
 80052a4:	eb45 0303 	adc.w	r3, r5, r3
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052b6:	4629      	mov	r1, r5
 80052b8:	028b      	lsls	r3, r1, #10
 80052ba:	4621      	mov	r1, r4
 80052bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052c0:	4621      	mov	r1, r4
 80052c2:	028a      	lsls	r2, r1, #10
 80052c4:	4610      	mov	r0, r2
 80052c6:	4619      	mov	r1, r3
 80052c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ca:	2200      	movs	r2, #0
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	61fa      	str	r2, [r7, #28]
 80052d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d4:	f7fa ffcc 	bl	8000270 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4613      	mov	r3, r2
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	3301      	adds	r3, #1
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052fa:	e002      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005304:	4618      	mov	r0, r3
 8005306:	3750      	adds	r7, #80	; 0x50
 8005308:	46bd      	mov	sp, r7
 800530a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800
 8005314:	00f42400 	.word	0x00f42400
 8005318:	007a1200 	.word	0x007a1200

0800531c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <HAL_RCC_GetHCLKFreq+0x14>)
 8005322:	681b      	ldr	r3, [r3, #0]
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200001e8 	.word	0x200001e8

08005334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005338:	f7ff fff0 	bl	800531c <HAL_RCC_GetHCLKFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0a9b      	lsrs	r3, r3, #10
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40023800 	.word	0x40023800
 8005358:	08009aa4 	.word	0x08009aa4

0800535c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005380:	2b00      	cmp	r3, #0
 8005382:	d035      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005384:	4b62      	ldr	r3, [pc, #392]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fc f955 	bl	8001638 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005392:	f7fc f951 	bl	8001638 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e0b0      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053a4:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	019a      	lsls	r2, r3, #6
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	4955      	ldr	r1, [pc, #340]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053c4:	4b52      	ldr	r3, [pc, #328]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ca:	f7fc f935 	bl	8001638 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053d2:	f7fc f931 	bl	8001638 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e090      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053e4:	4b4b      	ldr	r3, [pc, #300]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8083 	beq.w	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	4b44      	ldr	r3, [pc, #272]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	4a43      	ldr	r2, [pc, #268]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6413      	str	r3, [r2, #64]	; 0x40
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800541a:	4b3f      	ldr	r3, [pc, #252]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3e      	ldr	r2, [pc, #248]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005424:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005426:	f7fc f907 	bl	8001638 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fc f903 	bl	8001638 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e062      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800544c:	4b31      	ldr	r3, [pc, #196]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005454:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02f      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	d028      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005474:	4b29      	ldr	r3, [pc, #164]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005476:	2201      	movs	r2, #1
 8005478:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800547a:	4b28      	ldr	r3, [pc, #160]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005480:	4a24      	ldr	r2, [pc, #144]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005486:	4b23      	ldr	r3, [pc, #140]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d114      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005492:	f7fc f8d1 	bl	8001638 <HAL_GetTick>
 8005496:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	e00a      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7fc f8cd 	bl	8001638 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e02a      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	4b18      	ldr	r3, [pc, #96]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ee      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d10d      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	490d      	ldr	r1, [pc, #52]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	608b      	str	r3, [r1, #8]
 80054e4:	e005      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054f0:	6093      	str	r3, [r2, #8]
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fe:	4905      	ldr	r1, [pc, #20]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	42470068 	.word	0x42470068
 8005514:	40023800 	.word	0x40023800
 8005518:	40007000 	.word	0x40007000
 800551c:	42470e40 	.word	0x42470e40

08005520 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d13f      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005554:	d12f      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005558:	617b      	str	r3, [r7, #20]
          break;
 800555a:	e02f      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800555c:	4b1c      	ldr	r3, [pc, #112]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005568:	d108      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800556a:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e007      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a6:	0f1b      	lsrs	r3, r3, #28
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	617b      	str	r3, [r7, #20]
          break;
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
          break;
 80055ba:	bf00      	nop
        }
      }
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80055be:	bf00      	nop
    }
  }
  return frequency;
 80055c0:	697b      	ldr	r3, [r7, #20]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800
 80055d4:	00bb8000 	.word	0x00bb8000
 80055d8:	007a1200 	.word	0x007a1200
 80055dc:	00f42400 	.word	0x00f42400

080055e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07b      	b.n	80056ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005602:	d009      	beq.n	8005618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	61da      	str	r2, [r3, #28]
 800560a:	e005      	b.n	8005618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb feac 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	ea42 0103 	orr.w	r1, r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	f003 0104 	and.w	r1, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0210 	and.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f2:	b084      	sub	sp, #16
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	f107 001c 	add.w	r0, r7, #28
 8005700:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005704:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005708:	2b01      	cmp	r3, #1
 800570a:	d123      	bne.n	8005754 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005738:	2b01      	cmp	r3, #1
 800573a:	d105      	bne.n	8005748 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9dc 	bl	8005b06 <USB_CoreReset>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	e01b      	b.n	800578c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9d0 	bl	8005b06 <USB_CoreReset>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800576a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
 800577e:	e005      	b.n	800578c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800578c:	7fbb      	ldrb	r3, [r7, #30]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10b      	bne.n	80057aa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f043 0206 	orr.w	r2, r3, #6
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b6:	b004      	add	sp, #16
 80057b8:	4770      	bx	lr

080057ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f043 0201 	orr.w	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f023 0201 	bic.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d115      	bne.n	800584c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800582c:	200a      	movs	r0, #10
 800582e:	f7fb ff0f 	bl	8001650 <HAL_Delay>
      ms += 10U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	330a      	adds	r3, #10
 8005836:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f956 	bl	8005aea <USB_GetMode>
 800583e:	4603      	mov	r3, r0
 8005840:	2b01      	cmp	r3, #1
 8005842:	d01e      	beq.n	8005882 <USB_SetCurrentMode+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2bc7      	cmp	r3, #199	; 0xc7
 8005848:	d9f0      	bls.n	800582c <USB_SetCurrentMode+0x2e>
 800584a:	e01a      	b.n	8005882 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d115      	bne.n	800587e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800585e:	200a      	movs	r0, #10
 8005860:	f7fb fef6 	bl	8001650 <HAL_Delay>
      ms += 10U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	330a      	adds	r3, #10
 8005868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f93d 	bl	8005aea <USB_GetMode>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <USB_SetCurrentMode+0x84>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2bc7      	cmp	r3, #199	; 0xc7
 800587a:	d9f0      	bls.n	800585e <USB_SetCurrentMode+0x60>
 800587c:	e001      	b.n	8005882 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e005      	b.n	800588e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2bc8      	cmp	r3, #200	; 0xc8
 8005886:	d101      	bne.n	800588c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058b0:	d901      	bls.n	80058b6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e01b      	b.n	80058ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	daf2      	bge.n	80058a4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058da:	d901      	bls.n	80058e0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e006      	b.n	80058ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d0f0      	beq.n	80058ce <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005912:	d901      	bls.n	8005918 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e018      	b.n	800594a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	daf2      	bge.n	8005906 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2210      	movs	r2, #16
 8005928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005936:	d901      	bls.n	800593c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e006      	b.n	800594a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	d0f0      	beq.n	800592a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005956:	b480      	push	{r7}
 8005958:	b089      	sub	sp, #36	; 0x24
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	4611      	mov	r1, r2
 8005962:	461a      	mov	r2, r3
 8005964:	460b      	mov	r3, r1
 8005966:	71fb      	strb	r3, [r7, #7]
 8005968:	4613      	mov	r3, r2
 800596a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d123      	bne.n	80059c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800597c:	88bb      	ldrh	r3, [r7, #4]
 800597e:	3303      	adds	r3, #3
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e018      	b.n	80059bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	031a      	lsls	r2, r3, #12
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005996:	461a      	mov	r2, r3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3e2      	bcc.n	800598a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	; 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b08b      	sub	sp, #44	; 0x2c
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	e014      	b.n	8005a28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	3301      	adds	r3, #1
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	3301      	adds	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	3301      	adds	r3, #1
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3e6      	bcc.n	80059fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a30:	8bfb      	ldrh	r3, [r7, #30]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01e      	beq.n	8005a74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a40:	461a      	mov	r2, r3
 8005a42:	f107 0310 	add.w	r3, r7, #16
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	701a      	strb	r2, [r3, #0]
      i++;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a68:	8bfb      	ldrh	r3, [r7, #30]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a6e:	8bfb      	ldrh	r3, [r7, #30]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ea      	bne.n	8005a4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	372c      	adds	r7, #44	; 0x2c
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005adc:	68bb      	ldr	r3, [r7, #8]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0301 	and.w	r3, r3, #1
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b1e:	d901      	bls.n	8005b24 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e01b      	b.n	8005b5c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	daf2      	bge.n	8005b12 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b48:	d901      	bls.n	8005b4e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e006      	b.n	8005b5c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d0f0      	beq.n	8005b3c <USB_CoreReset+0x36>

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b68:	b084      	sub	sp, #16
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d119      	bne.n	8005bf2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10a      	bne.n	8005bdc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bd4:	f043 0304 	orr.w	r3, r3, #4
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e014      	b.n	8005c06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e009      	b.n	8005c06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c06:	2110      	movs	r1, #16
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff fe44 	bl	8005896 <USB_FlushTxFifo>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fe6e 	bl	80058fa <USB_FlushRxFifo>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e015      	b.n	8005c5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3301      	adds	r3, #1
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c5e:	461a      	mov	r2, r3
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d3e3      	bcc.n	8005c2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <USB_HostInit+0x170>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10b      	bne.n	8005c94 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <USB_HostInit+0x174>)
 8005c88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <USB_HostInit+0x178>)
 8005c8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c92:	e009      	b.n	8005ca8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a11      	ldr	r2, [pc, #68]	; (8005ce4 <USB_HostInit+0x17c>)
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a11      	ldr	r2, [pc, #68]	; (8005ce8 <USB_HostInit+0x180>)
 8005ca4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f043 0210 	orr.w	r2, r3, #16
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <USB_HostInit+0x184>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	40040000 	.word	0x40040000
 8005cdc:	01000200 	.word	0x01000200
 8005ce0:	00e00300 	.word	0x00e00300
 8005ce4:	00600080 	.word	0x00600080
 8005ce8:	004000e0 	.word	0x004000e0
 8005cec:	a3200008 	.word	0xa3200008

08005cf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d107      	bne.n	8005d42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d3e:	6053      	str	r3, [r2, #4]
 8005d40:	e00c      	b.n	8005d5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d107      	bne.n	8005d58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d54:	6053      	str	r3, [r2, #4]
 8005d56:	e001      	b.n	8005d5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d9a:	2064      	movs	r0, #100	; 0x64
 8005d9c:	f7fb fc58 	bl	8001650 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005dae:	200a      	movs	r0, #10
 8005db0:	f7fb fc4e 	bl	8001650 <HAL_Delay>

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005de2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <USB_DriveVbus+0x44>
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d106      	bne.n	8005e02 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e00:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d109      	bne.n	8005e22 <USB_DriveVbus+0x64>
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e20:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	0c5b      	lsrs	r3, r3, #17
 8005e4e:	f003 0303 	and.w	r3, r3, #3
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	b29b      	uxth	r3, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	4608      	mov	r0, r1
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	70fb      	strb	r3, [r7, #3]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70bb      	strb	r3, [r7, #2]
 8005e96:	4613      	mov	r3, r2
 8005e98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d87c      	bhi.n	8005fb8 <USB_HC_Init+0x138>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USB_HC_Init+0x44>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005f7b 	.word	0x08005f7b
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005f3d 	.word	0x08005f3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ee6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ee8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da10      	bge.n	8005f12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f10:	e055      	b.n	8005fbe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a6f      	ldr	r2, [pc, #444]	; (80060d4 <USB_HC_Init+0x254>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d151      	bne.n	8005fbe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f38:	60d3      	str	r3, [r2, #12]
      break;
 8005f3a:	e040      	b.n	8005fbe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da34      	bge.n	8005fc2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f78:	e023      	b.n	8005fc2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	f240 2325 	movw	r3, #549	; 0x225
 8005f8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	da17      	bge.n	8005fc6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fb6:	e006      	b.n	8005fc6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	77fb      	strb	r3, [r7, #31]
      break;
 8005fbc:	e004      	b.n	8005fc8 <USB_HC_Init+0x148>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <USB_HC_Init+0x148>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <USB_HC_Init+0x148>
      break;
 8005fc6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	6939      	ldr	r1, [r7, #16]
 8006010:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006014:	4313      	orrs	r3, r2
 8006016:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006024:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da03      	bge.n	8006034 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800602c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e001      	b.n	8006038 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fef9 	bl	8005e30 <USB_GetHostSpeed>
 800603e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006044:	2b02      	cmp	r3, #2
 8006046:	d106      	bne.n	8006056 <USB_HC_Init+0x1d6>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800604e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e001      	b.n	800605a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800605a:	787b      	ldrb	r3, [r7, #1]
 800605c:	059b      	lsls	r3, r3, #22
 800605e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006062:	78bb      	ldrb	r3, [r7, #2]
 8006064:	02db      	lsls	r3, r3, #11
 8006066:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800606a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800606c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006070:	049b      	lsls	r3, r3, #18
 8006072:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006076:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006078:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800607a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800607e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	431a      	orrs	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	440a      	add	r2, r1
 8006090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006098:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800609a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d003      	beq.n	80060aa <USB_HC_Init+0x22a>
 80060a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10f      	bne.n	80060ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40040000 	.word	0x40040000

080060d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a5d      	ldr	r2, [pc, #372]	; (8006270 <USB_HC_StartXfer+0x198>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d12f      	bne.n	800615e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d11c      	bne.n	800613e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	7c9b      	ldrb	r3, [r3, #18]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <USB_HC_StartXfer+0x3c>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	7c9b      	ldrb	r3, [r3, #18]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d124      	bne.n	800615e <USB_HC_StartXfer+0x86>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	799b      	ldrb	r3, [r3, #6]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d120      	bne.n	800615e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60d3      	str	r3, [r2, #12]
 800613c:	e00f      	b.n	800615e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	791b      	ldrb	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <USB_HC_StartXfer+0x86>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	795b      	ldrb	r3, [r3, #5]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fb6b 	bl	8006830 <USB_DoPing>
        return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e232      	b.n	80065c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	799b      	ldrb	r3, [r3, #6]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d158      	bne.n	8006218 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006166:	2301      	movs	r3, #1
 8006168:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	8a92      	ldrh	r2, [r2, #20]
 8006178:	fb03 f202 	mul.w	r2, r3, r2
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61da      	str	r2, [r3, #28]
 8006180:	e07c      	b.n	800627c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	7c9b      	ldrb	r3, [r3, #18]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d130      	bne.n	80061ec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	2bbc      	cmp	r3, #188	; 0xbc
 8006190:	d918      	bls.n	80061c4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	8a9b      	ldrh	r3, [r3, #20]
 8006196:	461a      	mov	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d003      	beq.n	80061b4 <USB_HC_StartXfer+0xdc>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d103      	bne.n	80061bc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2202      	movs	r2, #2
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e05f      	b.n	800627c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2201      	movs	r2, #1
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	e05b      	b.n	800627c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d007      	beq.n	80061e4 <USB_HC_StartXfer+0x10c>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d003      	beq.n	80061e4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2204      	movs	r2, #4
 80061e0:	60da      	str	r2, [r3, #12]
 80061e2:	e04b      	b.n	800627c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2203      	movs	r2, #3
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e047      	b.n	800627c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10d      	bne.n	800620e <USB_HC_StartXfer+0x136>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	8a92      	ldrh	r2, [r2, #20]
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d907      	bls.n	800620e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	8a92      	ldrh	r2, [r2, #20]
 8006204:	fb03 f202 	mul.w	r2, r3, r2
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	61da      	str	r2, [r3, #28]
 800620c:	e036      	b.n	800627c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61da      	str	r2, [r3, #28]
 8006216:	e031      	b.n	800627c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d018      	beq.n	8006252 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	8a92      	ldrh	r2, [r2, #20]
 8006228:	4413      	add	r3, r2
 800622a:	3b01      	subs	r3, #1
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	8a92      	ldrh	r2, [r2, #20]
 8006230:	fbb3 f3f2 	udiv	r3, r3, r2
 8006234:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006236:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006238:	8b7b      	ldrh	r3, [r7, #26]
 800623a:	429a      	cmp	r2, r3
 800623c:	d90b      	bls.n	8006256 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800623e:	8b7b      	ldrh	r3, [r7, #26]
 8006240:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	8a92      	ldrh	r2, [r2, #20]
 8006248:	fb03 f202 	mul.w	r2, r3, r2
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	61da      	str	r2, [r3, #28]
 8006250:	e001      	b.n	8006256 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006252:	2301      	movs	r3, #1
 8006254:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800625e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	8a92      	ldrh	r2, [r2, #20]
 8006264:	fb03 f202 	mul.w	r2, r3, r2
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	61da      	str	r2, [r3, #28]
 800626c:	e006      	b.n	800627c <USB_HC_StartXfer+0x1a4>
 800626e:	bf00      	nop
 8006270:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006286:	04d9      	lsls	r1, r3, #19
 8006288:	4ba3      	ldr	r3, [pc, #652]	; (8006518 <USB_HC_StartXfer+0x440>)
 800628a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800628c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	7d9b      	ldrb	r3, [r3, #22]
 8006292:	075b      	lsls	r3, r3, #29
 8006294:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	0148      	lsls	r0, r1, #5
 800629c:	6a39      	ldr	r1, [r7, #32]
 800629e:	4401      	add	r1, r0
 80062a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	460a      	mov	r2, r1
 80062c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	7e7b      	ldrb	r3, [r7, #25]
 800630a:	075b      	lsls	r3, r3, #29
 800630c:	69f9      	ldr	r1, [r7, #28]
 800630e:	0148      	lsls	r0, r1, #5
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	4401      	add	r1, r0
 8006314:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	799b      	ldrb	r3, [r3, #6]
 8006320:	2b01      	cmp	r3, #1
 8006322:	f040 80c3 	bne.w	80064ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	7c5b      	ldrb	r3, [r3, #17]
 800632a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006330:	4313      	orrs	r3, r2
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800633e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006342:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006362:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	79db      	ldrb	r3, [r3, #7]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d123      	bne.n	80063b4 <USB_HC_StartXfer+0x2dc>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	78db      	ldrb	r3, [r3, #3]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d11f      	bne.n	80063b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	440a      	add	r2, r1
 800638a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006392:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7c9b      	ldrb	r3, [r3, #18]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d003      	beq.n	80063c4 <USB_HC_StartXfer+0x2ec>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7c9b      	ldrb	r3, [r3, #18]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d117      	bne.n	80063f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d113      	bne.n	80063f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	78db      	ldrb	r3, [r3, #3]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10f      	bne.n	80063f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	7c9b      	ldrb	r3, [r3, #18]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d162      	bne.n	80064c2 <USB_HC_StartXfer+0x3ea>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d15e      	bne.n	80064c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	3b01      	subs	r3, #1
 800640a:	2b03      	cmp	r3, #3
 800640c:	d858      	bhi.n	80064c0 <USB_HC_StartXfer+0x3e8>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USB_HC_StartXfer+0x33c>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006425 	.word	0x08006425
 8006418:	08006447 	.word	0x08006447
 800641c:	08006469 	.word	0x08006469
 8006420:	0800648b 	.word	0x0800648b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006442:	6053      	str	r3, [r2, #4]
          break;
 8006444:	e03d      	b.n	80064c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	6a3a      	ldr	r2, [r7, #32]
 800645a:	440a      	add	r2, r1
 800645c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006460:	f043 030e 	orr.w	r3, r3, #14
 8006464:	6053      	str	r3, [r2, #4]
          break;
 8006466:	e02c      	b.n	80064c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006486:	6053      	str	r3, [r2, #4]
          break;
 8006488:	e01b      	b.n	80064c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a8:	6053      	str	r3, [r2, #4]
          break;
 80064aa:	e00a      	b.n	80064c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b8:	461a      	mov	r2, r3
 80064ba:	2300      	movs	r3, #0
 80064bc:	6053      	str	r3, [r2, #4]
 80064be:	e000      	b.n	80064c2 <USB_HC_StartXfer+0x3ea>
          break;
 80064c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e003      	b.n	80064f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	461a      	mov	r2, r3
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	e055      	b.n	80065c4 <USB_HC_StartXfer+0x4ec>
 8006518:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d14e      	bne.n	80065c2 <USB_HC_StartXfer+0x4ea>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d04a      	beq.n	80065c2 <USB_HC_StartXfer+0x4ea>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	79db      	ldrb	r3, [r3, #7]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d146      	bne.n	80065c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	7c9b      	ldrb	r3, [r3, #18]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d831      	bhi.n	80065a0 <USB_HC_StartXfer+0x4c8>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <USB_HC_StartXfer+0x46c>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006555 	.word	0x08006555
 8006548:	08006579 	.word	0x08006579
 800654c:	08006555 	.word	0x08006555
 8006550:	08006579 	.word	0x08006579
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	3303      	adds	r3, #3
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	b29b      	uxth	r3, r3
 8006566:	429a      	cmp	r2, r3
 8006568:	d91c      	bls.n	80065a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	619a      	str	r2, [r3, #24]
        }
        break;
 8006576:	e015      	b.n	80065a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	3303      	adds	r3, #3
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006582:	8afa      	ldrh	r2, [r7, #22]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	b29b      	uxth	r3, r3
 800658e:	429a      	cmp	r2, r3
 8006590:	d90a      	bls.n	80065a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	619a      	str	r2, [r3, #24]
        }
        break;
 800659e:	e003      	b.n	80065a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <USB_HC_StartXfer+0x4d2>
        break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <USB_HC_StartXfer+0x4d2>
        break;
 80065a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6999      	ldr	r1, [r3, #24]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	785a      	ldrb	r2, [r3, #1]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2000      	movs	r0, #0
 80065ba:	9000      	str	r0, [sp, #0]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff f9ca 	bl	8005956 <USB_WritePacket>
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	b29b      	uxth	r3, r3
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b089      	sub	sp, #36	; 0x24
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	0c9b      	lsrs	r3, r3, #18
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	0fdb      	lsrs	r3, r3, #31
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	0fdb      	lsrs	r3, r3, #31
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d10d      	bne.n	8006670 <USB_HC_Halt+0x82>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <USB_HC_Halt+0x82>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d002      	beq.n	800666c <USB_HC_Halt+0x7e>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d101      	bne.n	8006670 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e0d8      	b.n	8006822 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <USB_HC_Halt+0x8e>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d173      	bne.n	8006764 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800669a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d14a      	bne.n	800673e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d133      	bne.n	800671c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006700:	d82e      	bhi.n	8006760 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006718:	d0ec      	beq.n	80066f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800671a:	e081      	b.n	8006820 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	440a      	add	r2, r1
 8006732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800673a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800673c:	e070      	b.n	8006820 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	440a      	add	r2, r1
 8006754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800675c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800675e:	e05f      	b.n	8006820 <USB_HC_Halt+0x232>
            break;
 8006760:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006762:	e05d      	b.n	8006820 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	440a      	add	r2, r1
 800677a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006782:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d133      	bne.n	80067fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e0:	d81d      	bhi.n	800681e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f8:	d0ec      	beq.n	80067d4 <USB_HC_Halt+0x1e6>
 80067fa:	e011      	b.n	8006820 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	440a      	add	r2, r1
 8006812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e000      	b.n	8006820 <USB_HC_Halt+0x232>
          break;
 800681e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3724      	adds	r7, #36	; 0x24
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006844:	2301      	movs	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	04da      	lsls	r2, r3, #19
 800684c:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <USB_DoPing+0x74>)
 800684e:	4013      	ands	r3, r2
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	440a      	add	r2, r1
 8006858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800685c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006860:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006878:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006880:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	461a      	mov	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	1ff80000 	.word	0x1ff80000

080068a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe ff8d 	bl	80057dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068c2:	2110      	movs	r1, #16
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fe ffe6 	bl	8005896 <USB_FlushTxFifo>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff f810 	bl	80058fa <USB_FlushRxFifo>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e01f      	b.n	800692a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006900:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006908:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006910:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	461a      	mov	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	3301      	adds	r3, #1
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d9dc      	bls.n	80068ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e034      	b.n	80069a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800694c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006954:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800695c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	461a      	mov	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800697c:	d80c      	bhi.n	8006998 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006994:	d0ec      	beq.n	8006970 <USB_StopHost+0xc8>
 8006996:	e000      	b.n	800699a <USB_StopHost+0xf2>
        break;
 8006998:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	3301      	adds	r3, #1
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b0f      	cmp	r3, #15
 80069a4:	d9c7      	bls.n	8006936 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ac:	461a      	mov	r2, r3
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295
 80069b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fe fefc 	bl	80057ba <USB_EnableGlobalInt>

  return ret;
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b089      	sub	sp, #36	; 0x24
 80069d0:	af04      	add	r7, sp, #16
 80069d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069d4:	2301      	movs	r3, #1
 80069d6:	2202      	movs	r2, #2
 80069d8:	2102      	movs	r1, #2
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc85 	bl	80072ea <USBH_FindInterface>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2bff      	cmp	r3, #255	; 0xff
 80069e8:	d002      	beq.n	80069f0 <USBH_CDC_InterfaceInit+0x24>
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d901      	bls.n	80069f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	e13d      	b.n	8006c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc5a 	bl	80072b2 <USBH_SelectInterface>
 80069fe:	4603      	mov	r3, r0
 8006a00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e131      	b.n	8006c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a12:	2050      	movs	r0, #80	; 0x50
 8006a14:	f002 fb74 	bl	8009100 <malloc>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e11f      	b.n	8006c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a30:	2250      	movs	r2, #80	; 0x50
 8006a32:	2100      	movs	r1, #0
 8006a34:	68b8      	ldr	r0, [r7, #8]
 8006a36:	f002 fc3f 	bl	80092b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	211a      	movs	r1, #26
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	4413      	add	r3, r2
 8006a46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da15      	bge.n	8006a7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	211a      	movs	r1, #26
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	211a      	movs	r1, #26
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a78:	881a      	ldrh	r2, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 ffce 	bl	8008a26 <USBH_AllocPipe>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	7858      	ldrb	r0, [r3, #1]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	8952      	ldrh	r2, [r2, #10]
 8006aaa:	9202      	str	r2, [sp, #8]
 8006aac:	2203      	movs	r2, #3
 8006aae:	9201      	str	r2, [sp, #4]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 ff86 	bl	80089c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 fa95 	bl	8008ff4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006aca:	2300      	movs	r3, #0
 8006acc:	2200      	movs	r2, #0
 8006ace:	210a      	movs	r1, #10
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc0a 	bl	80072ea <USBH_FindInterface>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2bff      	cmp	r3, #255	; 0xff
 8006ade:	d002      	beq.n	8006ae6 <USBH_CDC_InterfaceInit+0x11a>
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d901      	bls.n	8006aea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e0c2      	b.n	8006c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	211a      	movs	r1, #26
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b25b      	sxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da16      	bge.n	8006b30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	211a      	movs	r1, #26
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	211a      	movs	r1, #26
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	835a      	strh	r2, [r3, #26]
 8006b2e:	e015      	b.n	8006b5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	211a      	movs	r1, #26
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	211a      	movs	r1, #26
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	211a      	movs	r1, #26
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da16      	bge.n	8006ba2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	211a      	movs	r1, #26
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	211a      	movs	r1, #26
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	835a      	strh	r2, [r3, #26]
 8006ba0:	e015      	b.n	8006bce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	211a      	movs	r1, #26
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	7b9b      	ldrb	r3, [r3, #14]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 ff26 	bl	8008a26 <USBH_AllocPipe>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7bdb      	ldrb	r3, [r3, #15]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 ff1c 	bl	8008a26 <USBH_AllocPipe>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	7b59      	ldrb	r1, [r3, #13]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	7b98      	ldrb	r0, [r3, #14]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	8b12      	ldrh	r2, [r2, #24]
 8006c0e:	9202      	str	r2, [sp, #8]
 8006c10:	2202      	movs	r2, #2
 8006c12:	9201      	str	r2, [sp, #4]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4623      	mov	r3, r4
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fed4 	bl	80089c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	7b19      	ldrb	r1, [r3, #12]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	7bd8      	ldrb	r0, [r3, #15]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	8b52      	ldrh	r2, [r2, #26]
 8006c38:	9202      	str	r2, [sp, #8]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	9201      	str	r2, [sp, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4623      	mov	r3, r4
 8006c42:	4602      	mov	r2, r0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 febf 	bl	80089c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	7b5b      	ldrb	r3, [r3, #13]
 8006c56:	2200      	movs	r2, #0
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 f9ca 	bl	8008ff4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	7b1b      	ldrb	r3, [r3, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 f9c3 	bl	8008ff4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd90      	pop	{r4, r7, pc}

08006c78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 feb4 	bl	8008a06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fedf 	bl	8008a68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7b1b      	ldrb	r3, [r3, #12]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fea1 	bl	8008a06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7b1b      	ldrb	r3, [r3, #12]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fecc 	bl	8008a68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	7b5b      	ldrb	r3, [r3, #13]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	7b5b      	ldrb	r3, [r3, #13]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fe8e 	bl	8008a06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	7b5b      	ldrb	r3, [r3, #13]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 feb9 	bl	8008a68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f002 f9fd 	bl	8009110 <free>
    phost->pActiveClass->pData = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3340      	adds	r3, #64	; 0x40
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8b1 	bl	8006eaa <GetLineCoding>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d58:	2102      	movs	r1, #2
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d877      	bhi.n	8006e7c <USBH_CDC_Process+0x114>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBH_CDC_Process+0x2c>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006da9 	.word	0x08006da9
 8006d98:	08006daf 	.word	0x08006daf
 8006d9c:	08006ddf 	.word	0x08006ddf
 8006da0:	08006e53 	.word	0x08006e53
 8006da4:	08006e61 	.word	0x08006e61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e06d      	b.n	8006e8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f897 	bl	8006ee8 <SetLineCoding>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dcc:	e058      	b.n	8006e80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d055      	beq.n	8006e80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ddc:	e050      	b.n	8006e80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3340      	adds	r3, #64	; 0x40
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f860 	bl	8006eaa <GetLineCoding>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d126      	bne.n	8006e42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	791b      	ldrb	r3, [r3, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d13b      	bne.n	8006e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d133      	bne.n	8006e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d12b      	bne.n	8006e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d124      	bne.n	8006e84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f958 	bl	80070f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e40:	e020      	b.n	8006e84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d01d      	beq.n	8006e84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e50:	e018      	b.n	8006e84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f867 	bl	8006f26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8da 	bl	8007012 <CDC_ProcessReception>
      break;
 8006e5e:	e014      	b.n	8006e8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f822 	bl	8007eac <USBH_ClrFeature>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e7a:	e005      	b.n	8006e88 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e004      	b.n	8006e8a <USBH_CDC_Process+0x122>
      break;
 8006e80:	bf00      	nop
 8006e82:	e002      	b.n	8006e8a <USBH_CDC_Process+0x122>
      break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <USBH_CDC_Process+0x122>
      break;
 8006e88:	bf00      	nop

  }

  return status;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	22a1      	movs	r2, #161	; 0xa1
 8006eb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2221      	movs	r2, #33	; 0x21
 8006ebe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 fb23 	bl	8008524 <USBH_CtlReq>
 8006ede:	4603      	mov	r3, r0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2221      	movs	r2, #33	; 0x21
 8006ef6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2207      	movs	r2, #7
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 fb04 	bl	8008524 <USBH_CtlReq>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af02      	add	r7, sp, #8
 8006f2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d002      	beq.n	8006f4c <CDC_ProcessTransmission+0x26>
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d023      	beq.n	8006f92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f4a:	e05e      	b.n	800700a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	8b12      	ldrh	r2, [r2, #24]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d90b      	bls.n	8006f70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	69d9      	ldr	r1, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8b1a      	ldrh	r2, [r3, #24]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	7b5b      	ldrb	r3, [r3, #13]
 8006f64:	2001      	movs	r0, #1
 8006f66:	9000      	str	r0, [sp, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fcea 	bl	8008942 <USBH_BulkSendData>
 8006f6e:	e00b      	b.n	8006f88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7b5b      	ldrb	r3, [r3, #13]
 8006f7e:	2001      	movs	r0, #1
 8006f80:	9000      	str	r0, [sp, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fcdd 	bl	8008942 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f90:	e03b      	b.n	800700a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	7b5b      	ldrb	r3, [r3, #13]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f002 f801 	bl	8008fa0 <USBH_LL_GetURBState>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d128      	bne.n	8006ffa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	8b12      	ldrh	r2, [r2, #24]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d90e      	bls.n	8006fd2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	8b12      	ldrh	r2, [r2, #24]
 8006fbc:	1a9a      	subs	r2, r3, r2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	8b12      	ldrh	r2, [r2, #24]
 8006fca:	441a      	add	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	61da      	str	r2, [r3, #28]
 8006fd0:	e002      	b.n	8006fd8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fe8:	e00e      	b.n	8007008 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f868 	bl	80070c8 <USBH_CDC_TransmitCallback>
      break;
 8006ff8:	e006      	b.n	8007008 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d103      	bne.n	8007008 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007008:	bf00      	nop
  }
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007024:	2300      	movs	r3, #0
 8007026:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800702e:	2b03      	cmp	r3, #3
 8007030:	d002      	beq.n	8007038 <CDC_ProcessReception+0x26>
 8007032:	2b04      	cmp	r3, #4
 8007034:	d00e      	beq.n	8007054 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007036:	e043      	b.n	80070c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a19      	ldr	r1, [r3, #32]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	8b5a      	ldrh	r2, [r3, #26]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	7b1b      	ldrb	r3, [r3, #12]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fca1 	bl	800898c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2204      	movs	r2, #4
 800704e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007052:	e035      	b.n	80070c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	7b1b      	ldrb	r3, [r3, #12]
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 ffa0 	bl	8008fa0 <USBH_LL_GetURBState>
 8007060:	4603      	mov	r3, r0
 8007062:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d129      	bne.n	80070be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	7b1b      	ldrb	r3, [r3, #12]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 ff03 	bl	8008e7c <USBH_LL_GetLastXferSize>
 8007076:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d016      	beq.n	80070b0 <CDC_ProcessReception+0x9e>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	8b5b      	ldrh	r3, [r3, #26]
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4293      	cmp	r3, r2
 800708c:	d910      	bls.n	80070b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2203      	movs	r2, #3
 80070aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070ae:	e006      	b.n	80070be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f80f 	bl	80070dc <USBH_CDC_ReceiveCallback>
      break;
 80070be:	bf00      	nop
  }
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007118:	2302      	movs	r3, #2
 800711a:	e029      	b.n	8007170 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	79fa      	ldrb	r2, [r7, #7]
 8007120:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f81f 	bl	8007178 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f001 fdd3 	bl	8008d14 <USBH_LL_Init>

  return USBH_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e009      	b.n	800719e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	33e0      	adds	r3, #224	; 0xe0
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b0f      	cmp	r3, #15
 80071a2:	d9f2      	bls.n	800718a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e009      	b.n	80071be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c4:	d3f1      	bcc.n	80071aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	331c      	adds	r3, #28
 8007216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f002 f84b 	bl	80092b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f002 f842 	bl	80092b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f203 3326 	addw	r3, r3, #806	; 0x326
 800723a:	2212      	movs	r2, #18
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f002 f83a 	bl	80092b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800724a:	223e      	movs	r2, #62	; 0x3e
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f002 f832 	bl	80092b8 <memset>

  return USBH_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d016      	beq.n	80072a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10e      	bne.n	800729a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	33de      	adds	r3, #222	; 0xde
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	e004      	b.n	80072a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800729a:	2302      	movs	r3, #2
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e001      	b.n	80072a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072a0:	2302      	movs	r3, #2
 80072a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d204      	bcs.n	80072d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80072d6:	e001      	b.n	80072dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	461a      	mov	r2, r3
 80072f8:	4603      	mov	r3, r0
 80072fa:	70fb      	strb	r3, [r7, #3]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70bb      	strb	r3, [r7, #2]
 8007300:	4613      	mov	r3, r2
 8007302:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007312:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007314:	e025      	b.n	8007362 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	221a      	movs	r2, #26
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	3308      	adds	r3, #8
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	3302      	adds	r3, #2
 8007326:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	795b      	ldrb	r3, [r3, #5]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	429a      	cmp	r2, r3
 8007330:	d002      	beq.n	8007338 <USBH_FindInterface+0x4e>
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	2bff      	cmp	r3, #255	; 0xff
 8007336:	d111      	bne.n	800735c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800733c:	78ba      	ldrb	r2, [r7, #2]
 800733e:	429a      	cmp	r2, r3
 8007340:	d002      	beq.n	8007348 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007342:	78bb      	ldrb	r3, [r7, #2]
 8007344:	2bff      	cmp	r3, #255	; 0xff
 8007346:	d109      	bne.n	800735c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800734c:	787a      	ldrb	r2, [r7, #1]
 800734e:	429a      	cmp	r2, r3
 8007350:	d002      	beq.n	8007358 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007352:	787b      	ldrb	r3, [r7, #1]
 8007354:	2bff      	cmp	r3, #255	; 0xff
 8007356:	d101      	bne.n	800735c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	e006      	b.n	800736a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	3301      	adds	r3, #1
 8007360:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d9d6      	bls.n	8007316 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007368:	23ff      	movs	r3, #255	; 0xff
}
 800736a:	4618      	mov	r0, r3
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fd04 	bl	8008d8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007384:	2101      	movs	r1, #1
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fe1d 	bl	8008fc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af04      	add	r7, sp, #16
 800739e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073a0:	2302      	movs	r3, #2
 80073a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d102      	bne.n	80073ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2203      	movs	r2, #3
 80073b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b0b      	cmp	r3, #11
 80073c2:	f200 81be 	bhi.w	8007742 <USBH_Process+0x3aa>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <USBH_Process+0x34>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073fd 	.word	0x080073fd
 80073d0:	0800742f 	.word	0x0800742f
 80073d4:	08007497 	.word	0x08007497
 80073d8:	080076dd 	.word	0x080076dd
 80073dc:	08007743 	.word	0x08007743
 80073e0:	0800753b 	.word	0x0800753b
 80073e4:	08007683 	.word	0x08007683
 80073e8:	08007571 	.word	0x08007571
 80073ec:	08007591 	.word	0x08007591
 80073f0:	080075b1 	.word	0x080075b1
 80073f4:	080075f5 	.word	0x080075f5
 80073f8:	080076c5 	.word	0x080076c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 819e 	beq.w	8007746 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007410:	20c8      	movs	r0, #200	; 0xc8
 8007412:	f001 fe22 	bl	800905a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fd15 	bl	8008e46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800742c:	e18b      	b.n	8007746 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007434:	2b01      	cmp	r3, #1
 8007436:	d107      	bne.n	8007448 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007446:	e18d      	b.n	8007764 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800744e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007452:	d914      	bls.n	800747e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800745a:	3301      	adds	r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800746a:	2b03      	cmp	r3, #3
 800746c:	d903      	bls.n	8007476 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220d      	movs	r2, #13
 8007472:	701a      	strb	r2, [r3, #0]
      break;
 8007474:	e176      	b.n	8007764 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e172      	b.n	8007764 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007484:	f103 020a 	add.w	r2, r3, #10
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800748e:	200a      	movs	r0, #10
 8007490:	f001 fde3 	bl	800905a <USBH_Delay>
      break;
 8007494:	e166      	b.n	8007764 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a6:	2104      	movs	r1, #4
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074ac:	2064      	movs	r0, #100	; 0x64
 80074ae:	f001 fdd4 	bl	800905a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fca0 	bl	8008df8 <USBH_LL_GetSpeed>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2205      	movs	r2, #5
 80074c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 faab 	bl	8008a26 <USBH_AllocPipe>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80074d8:	2180      	movs	r1, #128	; 0x80
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 faa3 	bl	8008a26 <USBH_AllocPipe>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7919      	ldrb	r1, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074fc:	b292      	uxth	r2, r2
 80074fe:	9202      	str	r2, [sp, #8]
 8007500:	2200      	movs	r2, #0
 8007502:	9201      	str	r2, [sp, #4]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4603      	mov	r3, r0
 8007508:	2280      	movs	r2, #128	; 0x80
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fa5c 	bl	80089c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7959      	ldrb	r1, [r3, #5]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007524:	b292      	uxth	r2, r2
 8007526:	9202      	str	r2, [sp, #8]
 8007528:	2200      	movs	r2, #0
 800752a:	9201      	str	r2, [sp, #4]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	4603      	mov	r3, r0
 8007530:	2200      	movs	r2, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fa48 	bl	80089c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007538:	e114      	b.n	8007764 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f918 	bl	8007770 <USBH_HandleEnum>
 8007540:	4603      	mov	r3, r0
 8007542:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 80fe 	bne.w	800774a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800755c:	2b01      	cmp	r3, #1
 800755e:	d103      	bne.n	8007568 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2208      	movs	r2, #8
 8007564:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007566:	e0f0      	b.n	800774a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2207      	movs	r2, #7
 800756c:	701a      	strb	r2, [r3, #0]
      break;
 800756e:	e0ec      	b.n	800774a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80e9 	beq.w	800774e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007582:	2101      	movs	r1, #1
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2208      	movs	r2, #8
 800758c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800758e:	e0de      	b.n	800774e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007596:	b29b      	uxth	r3, r3
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fc3f 	bl	8007e1e <USBH_SetCfg>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 80d5 	bne.w	8007752 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2209      	movs	r2, #9
 80075ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075ae:	e0d0      	b.n	8007752 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fc4f 	bl	8007e64 <USBH_SetFeature>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	220a      	movs	r2, #10
 80075d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075d8:	e0bd      	b.n	8007756 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	f040 80b9 	bne.w	8007756 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	220a      	movs	r2, #10
 80075e8:	701a      	strb	r2, [r3, #0]
      break;
 80075ea:	e0b4      	b.n	8007756 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220a      	movs	r2, #10
 80075f0:	701a      	strb	r2, [r3, #0]
      break;
 80075f2:	e0b0      	b.n	8007756 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80ad 	beq.w	800775a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
 800760c:	e016      	b.n	800763c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800760e:	7bfa      	ldrb	r2, [r7, #15]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32de      	adds	r2, #222	; 0xde
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	791a      	ldrb	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007620:	429a      	cmp	r2, r3
 8007622:	d108      	bne.n	8007636 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007624:	7bfa      	ldrb	r2, [r7, #15]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32de      	adds	r2, #222	; 0xde
 800762a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007634:	e005      	b.n	8007642 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	3301      	adds	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0e5      	beq.n	800760e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2206      	movs	r2, #6
 8007662:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800766a:	2103      	movs	r1, #3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007670:	e073      	b.n	800775a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	220d      	movs	r2, #13
 8007676:	701a      	strb	r2, [r3, #0]
      break;
 8007678:	e06f      	b.n	800775a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220d      	movs	r2, #13
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e06b      	b.n	800775a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d017      	beq.n	80076bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	220b      	movs	r2, #11
 80076a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076aa:	e058      	b.n	800775e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d154      	bne.n	800775e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220d      	movs	r2, #13
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e050      	b.n	800775e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	220d      	movs	r2, #13
 80076c0:	701a      	strb	r2, [r3, #0]
      break;
 80076c2:	e04c      	b.n	800775e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d049      	beq.n	8007762 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
      }
      break;
 80076da:	e042      	b.n	8007762 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fd47 	bl	8007178 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007718:	2105      	movs	r1, #5
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	d107      	bne.n	800773a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fe1f 	bl	8007376 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007738:	e014      	b.n	8007764 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fb26 	bl	8008d8c <USBH_LL_Start>
      break;
 8007740:	e010      	b.n	8007764 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007742:	bf00      	nop
 8007744:	e00e      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 8007746:	bf00      	nop
 8007748:	e00c      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 800774a:	bf00      	nop
 800774c:	e00a      	b.n	8007764 <USBH_Process+0x3cc>
    break;
 800774e:	bf00      	nop
 8007750:	e008      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 8007752:	bf00      	nop
 8007754:	e006      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 8007756:	bf00      	nop
 8007758:	e004      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 800775a:	bf00      	nop
 800775c:	e002      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <USBH_Process+0x3cc>
      break;
 8007762:	bf00      	nop
  }
  return USBH_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop

08007770 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af04      	add	r7, sp, #16
 8007776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800777c:	2301      	movs	r3, #1
 800777e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	2b07      	cmp	r3, #7
 8007786:	f200 81c1 	bhi.w	8007b0c <USBH_HandleEnum+0x39c>
 800778a:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <USBH_HandleEnum+0x20>)
 800778c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007790:	080077b1 	.word	0x080077b1
 8007794:	0800786f 	.word	0x0800786f
 8007798:	080078d9 	.word	0x080078d9
 800779c:	08007967 	.word	0x08007967
 80077a0:	080079d1 	.word	0x080079d1
 80077a4:	08007a41 	.word	0x08007a41
 80077a8:	08007a87 	.word	0x08007a87
 80077ac:	08007acd 	.word	0x08007acd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077b0:	2108      	movs	r1, #8
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa50 	bl	8007c58 <USBH_Get_DevDesc>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d130      	bne.n	8007824 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	7919      	ldrb	r1, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077e6:	b292      	uxth	r2, r2
 80077e8:	9202      	str	r2, [sp, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	9201      	str	r2, [sp, #4]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4603      	mov	r3, r0
 80077f2:	2280      	movs	r2, #128	; 0x80
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f8e7 	bl	80089c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7959      	ldrb	r1, [r3, #5]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800780e:	b292      	uxth	r2, r2
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	4603      	mov	r3, r0
 800781a:	2200      	movs	r2, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 f8d3 	bl	80089c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007822:	e175      	b.n	8007b10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b03      	cmp	r3, #3
 8007828:	f040 8172 	bne.w	8007b10 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007842:	2b03      	cmp	r3, #3
 8007844:	d903      	bls.n	800784e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	220d      	movs	r2, #13
 800784a:	701a      	strb	r2, [r3, #0]
      break;
 800784c:	e160      	b.n	8007b10 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	795b      	ldrb	r3, [r3, #5]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f907 	bl	8008a68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f901 	bl	8008a68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]
      break;
 800786c:	e150      	b.n	8007b10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800786e:	2112      	movs	r1, #18
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f9f1 	bl	8007c58 <USBH_Get_DevDesc>
 8007876:	4603      	mov	r3, r0
 8007878:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d103      	bne.n	8007888 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007886:	e145      	b.n	8007b14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b03      	cmp	r3, #3
 800788c:	f040 8142 	bne.w	8007b14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007896:	3301      	adds	r3, #1
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d903      	bls.n	80078b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	220d      	movs	r2, #13
 80078ae:	701a      	strb	r2, [r3, #0]
      break;
 80078b0:	e130      	b.n	8007b14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	795b      	ldrb	r3, [r3, #5]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f8d5 	bl	8008a68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	791b      	ldrb	r3, [r3, #4]
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 f8cf 	bl	8008a68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e11d      	b.n	8007b14 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80078d8:	2101      	movs	r1, #1
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa7b 	bl	8007dd6 <USBH_SetAddress>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d132      	bne.n	8007950 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80078ea:	2002      	movs	r0, #2
 80078ec:	f001 fbb5 	bl	800905a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2203      	movs	r2, #3
 80078fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7919      	ldrb	r1, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007912:	b292      	uxth	r2, r2
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	9201      	str	r2, [sp, #4]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4603      	mov	r3, r0
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f851 	bl	80089c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7959      	ldrb	r1, [r3, #5]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793a:	b292      	uxth	r2, r2
 800793c:	9202      	str	r2, [sp, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	9201      	str	r2, [sp, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	4603      	mov	r3, r0
 8007946:	2200      	movs	r2, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f83d 	bl	80089c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800794e:	e0e3      	b.n	8007b18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b03      	cmp	r3, #3
 8007954:	f040 80e0 	bne.w	8007b18 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220d      	movs	r2, #13
 800795c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	705a      	strb	r2, [r3, #1]
      break;
 8007964:	e0d8      	b.n	8007b18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007966:	2109      	movs	r1, #9
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9a1 	bl	8007cb0 <USBH_Get_CfgDesc>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2204      	movs	r2, #4
 800797c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800797e:	e0cd      	b.n	8007b1c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b03      	cmp	r3, #3
 8007984:	f040 80ca 	bne.w	8007b1c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800798e:	3301      	adds	r3, #1
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d903      	bls.n	80079aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220d      	movs	r2, #13
 80079a6:	701a      	strb	r2, [r3, #0]
      break;
 80079a8:	e0b8      	b.n	8007b1c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	795b      	ldrb	r3, [r3, #5]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f859 	bl	8008a68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f853 	bl	8008a68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
      break;
 80079ce:	e0a5      	b.n	8007b1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f969 	bl	8007cb0 <USBH_Get_CfgDesc>
 80079de:	4603      	mov	r3, r0
 80079e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2205      	movs	r2, #5
 80079ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079ee:	e097      	b.n	8007b20 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	f040 8094 	bne.w	8007b20 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079fe:	3301      	adds	r3, #1
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d903      	bls.n	8007a1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e082      	b.n	8007b20 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	795b      	ldrb	r3, [r3, #5]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f821 	bl	8008a68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f81b 	bl	8008a68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e06f      	b.n	8007b20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d019      	beq.n	8007a7e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a56:	23ff      	movs	r3, #255	; 0xff
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f953 	bl	8007d04 <USBH_Get_StringDesc>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2206      	movs	r2, #6
 8007a6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a6e:	e059      	b.n	8007b24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d156      	bne.n	8007b24 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2206      	movs	r2, #6
 8007a7a:	705a      	strb	r2, [r3, #1]
      break;
 8007a7c:	e052      	b.n	8007b24 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2206      	movs	r2, #6
 8007a82:	705a      	strb	r2, [r3, #1]
      break;
 8007a84:	e04e      	b.n	8007b24 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d019      	beq.n	8007ac4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a9c:	23ff      	movs	r3, #255	; 0xff
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f930 	bl	8007d04 <USBH_Get_StringDesc>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ab4:	e038      	b.n	8007b28 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d135      	bne.n	8007b28 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2207      	movs	r2, #7
 8007ac0:	705a      	strb	r2, [r3, #1]
      break;
 8007ac2:	e031      	b.n	8007b28 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2207      	movs	r2, #7
 8007ac8:	705a      	strb	r2, [r3, #1]
      break;
 8007aca:	e02d      	b.n	8007b28 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d017      	beq.n	8007b06 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ae2:	23ff      	movs	r3, #255	; 0xff
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f90d 	bl	8007d04 <USBH_Get_StringDesc>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007af8:	e018      	b.n	8007b2c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d115      	bne.n	8007b2c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
      break;
 8007b04:	e012      	b.n	8007b2c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0a:	e00f      	b.n	8007b2c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e00e      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b10:	bf00      	nop
 8007b12:	e00c      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b14:	bf00      	nop
 8007b16:	e00a      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e008      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e006      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b20:	bf00      	nop
 8007b22:	e004      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b24:	bf00      	nop
 8007b26:	e002      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b28:	bf00      	nop
 8007b2a:	e000      	b.n	8007b2e <USBH_HandleEnum+0x3be>
      break;
 8007b2c:	bf00      	nop
  }
  return Status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f804 	bl	8007b7a <USBH_HandleSof>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b0b      	cmp	r3, #11
 8007b8a:	d10a      	bne.n	8007ba2 <USBH_HandleSof+0x28>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bba:	bf00      	nop
}
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007bd6:	bf00      	nop
}
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f8c6 	bl	8008dc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 ff13 	bl	8008a68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	795b      	ldrb	r3, [r3, #5]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 ff0d 	bl	8008a68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007c64:	887b      	ldrh	r3, [r7, #2]
 8007c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6a:	d901      	bls.n	8007c70 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e01b      	b.n	8007ca8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c76:	887b      	ldrh	r3, [r7, #2]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f872 	bl	8007d6c <USBH_GetDescriptor>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c98:	887a      	ldrh	r2, [r7, #2]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f929 	bl	8007ef4 <USBH_ParseDevDesc>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	331c      	adds	r3, #28
 8007cc0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007cc2:	887b      	ldrh	r3, [r7, #2]
 8007cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc8:	d901      	bls.n	8007cce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e016      	b.n	8007cfc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cce:	887b      	ldrh	r3, [r7, #2]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f846 	bl	8007d6c <USBH_GetDescriptor>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f9b3 	bl	800805c <USBH_ParseCfgDesc>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	460b      	mov	r3, r1
 8007d12:	72fb      	strb	r3, [r7, #11]
 8007d14:	4613      	mov	r3, r2
 8007d16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007d18:	893b      	ldrh	r3, [r7, #8]
 8007d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1e:	d802      	bhi.n	8007d26 <USBH_Get_StringDesc+0x22>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e01c      	b.n	8007d64 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d32:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d3a:	893b      	ldrh	r3, [r7, #8]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f812 	bl	8007d6c <USBH_GetDescriptor>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d107      	bne.n	8007d62 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d58:	893a      	ldrh	r2, [r7, #8]
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fb93 	bl	8008488 <USBH_ParseStringDesc>
  }

  return status;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	72fb      	strb	r3, [r7, #11]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	789b      	ldrb	r3, [r3, #2]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d11c      	bne.n	8007dc0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2206      	movs	r2, #6
 8007d96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	893a      	ldrh	r2, [r7, #8]
 8007d9c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d9e:	893b      	ldrh	r3, [r7, #8]
 8007da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da8:	d104      	bne.n	8007db4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f240 4209 	movw	r2, #1033	; 0x409
 8007db0:	829a      	strh	r2, [r3, #20]
 8007db2:	e002      	b.n	8007dba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8b3a      	ldrh	r2, [r7, #24]
 8007dbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007dc0:	8b3b      	ldrh	r3, [r7, #24]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fbac 	bl	8008524 <USBH_CtlReq>
 8007dcc:	4603      	mov	r3, r0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	789b      	ldrb	r3, [r3, #2]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d10f      	bne.n	8007e0a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2205      	movs	r2, #5
 8007df4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb88 	bl	8008524 <USBH_CtlReq>
 8007e14:	4603      	mov	r3, r0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	789b      	ldrb	r3, [r3, #2]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10e      	bne.n	8007e50 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2209      	movs	r2, #9
 8007e3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	887a      	ldrh	r2, [r7, #2]
 8007e42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e50:	2200      	movs	r2, #0
 8007e52:	2100      	movs	r1, #0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb65 	bl	8008524 <USBH_CtlReq>
 8007e5a:	4603      	mov	r3, r0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	789b      	ldrb	r3, [r3, #2]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10f      	bne.n	8007e98 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2203      	movs	r2, #3
 8007e82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fb41 	bl	8008524 <USBH_CtlReq>
 8007ea2:	4603      	mov	r3, r0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10f      	bne.n	8007ee0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb1d 	bl	8008524 <USBH_CtlReq>
 8007eea:	4603      	mov	r3, r0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007f08:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	e098      	b.n	800804a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	781a      	ldrb	r2, [r3, #0]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	785a      	ldrb	r2, [r3, #1]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	3303      	adds	r3, #3
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	791a      	ldrb	r2, [r3, #4]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	795a      	ldrb	r2, [r3, #5]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	799a      	ldrb	r2, [r3, #6]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	79da      	ldrb	r2, [r3, #7]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d11b      	bne.n	8007fb0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	79db      	ldrb	r3, [r3, #7]
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	dc0f      	bgt.n	8007fa0 <USBH_ParseDevDesc+0xac>
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	db0f      	blt.n	8007fa4 <USBH_ParseDevDesc+0xb0>
 8007f84:	3b08      	subs	r3, #8
 8007f86:	4a34      	ldr	r2, [pc, #208]	; (8008058 <USBH_ParseDevDesc+0x164>)
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf14      	ite	ne
 8007f94:	2301      	movne	r3, #1
 8007f96:	2300      	moveq	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <USBH_ParseDevDesc+0xb8>
 8007f9e:	e001      	b.n	8007fa4 <USBH_ParseDevDesc+0xb0>
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	d003      	beq.n	8007fac <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	71da      	strb	r2, [r3, #7]
        break;
 8007faa:	e000      	b.n	8007fae <USBH_ParseDevDesc+0xba>
        break;
 8007fac:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007fae:	e00e      	b.n	8007fce <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d107      	bne.n	8007fca <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	79db      	ldrb	r3, [r3, #7]
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d005      	beq.n	8007fce <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	71da      	strb	r2, [r3, #7]
 8007fc8:	e001      	b.n	8007fce <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d939      	bls.n	8008048 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	3309      	adds	r3, #9
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	330a      	adds	r3, #10
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	330b      	adds	r3, #11
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b29b      	uxth	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b29a      	uxth	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	330c      	adds	r3, #12
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29a      	uxth	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	330d      	adds	r3, #13
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b29b      	uxth	r3, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	b29a      	uxth	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	7b9a      	ldrb	r2, [r3, #14]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	7bda      	ldrb	r2, [r3, #15]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	7c1a      	ldrb	r2, [r3, #16]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7c5a      	ldrb	r2, [r3, #17]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	01000101 	.word	0x01000101

0800805c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008070:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	e0db      	b.n	8008246 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	785a      	ldrb	r2, [r3, #1]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	3302      	adds	r3, #2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3303      	adds	r3, #3
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	021b      	lsls	r3, r3, #8
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080be:	bf28      	it	cs
 80080c0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	791a      	ldrb	r2, [r3, #4]
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	795a      	ldrb	r2, [r3, #5]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	799a      	ldrb	r2, [r3, #6]
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	79da      	ldrb	r2, [r3, #7]
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	7a1a      	ldrb	r2, [r3, #8]
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b09      	cmp	r3, #9
 80080f8:	d002      	beq.n	8008100 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	2209      	movs	r2, #9
 80080fe:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008100:	88fb      	ldrh	r3, [r7, #6]
 8008102:	2b09      	cmp	r3, #9
 8008104:	f240 809d 	bls.w	8008242 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008108:	2309      	movs	r3, #9
 800810a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800810c:	2300      	movs	r3, #0
 800810e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008110:	e081      	b.n	8008216 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008112:	f107 0316 	add.w	r3, r7, #22
 8008116:	4619      	mov	r1, r3
 8008118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811a:	f000 f9e8 	bl	80084ee <USBH_GetNextDesc>
 800811e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d176      	bne.n	8008216 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b09      	cmp	r3, #9
 800812e:	d002      	beq.n	8008136 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2209      	movs	r2, #9
 8008134:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800813a:	221a      	movs	r2, #26
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	3308      	adds	r3, #8
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	4413      	add	r3, r2
 8008146:	3302      	adds	r3, #2
 8008148:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800814a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800814c:	69f8      	ldr	r0, [r7, #28]
 800814e:	f000 f87e 	bl	800824e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800815c:	e043      	b.n	80081e6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800815e:	f107 0316 	add.w	r3, r7, #22
 8008162:	4619      	mov	r1, r3
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 f9c2 	bl	80084ee <USBH_GetNextDesc>
 800816a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d138      	bne.n	80081e6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	795b      	ldrb	r3, [r3, #5]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d113      	bne.n	80081a4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008180:	2b02      	cmp	r3, #2
 8008182:	d003      	beq.n	800818c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	799b      	ldrb	r3, [r3, #6]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d10b      	bne.n	80081a4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	79db      	ldrb	r3, [r3, #7]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10b      	bne.n	80081ac <USBH_ParseCfgDesc+0x150>
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b09      	cmp	r3, #9
 800819a:	d007      	beq.n	80081ac <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	2209      	movs	r2, #9
 80081a0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081a2:	e003      	b.n	80081ac <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	2207      	movs	r2, #7
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	e000      	b.n	80081ae <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081ac:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80081ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081b6:	3201      	adds	r2, #1
 80081b8:	00d2      	lsls	r2, r2, #3
 80081ba:	211a      	movs	r1, #26
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	3308      	adds	r3, #8
 80081c4:	6a3a      	ldr	r2, [r7, #32]
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80081cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ce:	69b9      	ldr	r1, [r7, #24]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f870 	bl	80082b6 <USBH_ParseEPDesc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80081dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081e0:	3301      	adds	r3, #1
 80081e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d204      	bcs.n	80081fc <USBH_ParseCfgDesc+0x1a0>
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	885a      	ldrh	r2, [r3, #2]
 80081f6:	8afb      	ldrh	r3, [r7, #22]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d8b0      	bhi.n	800815e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008204:	429a      	cmp	r2, r3
 8008206:	d201      	bcs.n	800820c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008208:	2303      	movs	r3, #3
 800820a:	e01c      	b.n	8008246 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800820c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008210:	3301      	adds	r3, #1
 8008212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800821a:	2b01      	cmp	r3, #1
 800821c:	d805      	bhi.n	800822a <USBH_ParseCfgDesc+0x1ce>
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	885a      	ldrh	r2, [r3, #2]
 8008222:	8afb      	ldrh	r3, [r7, #22]
 8008224:	429a      	cmp	r2, r3
 8008226:	f63f af74 	bhi.w	8008112 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	2b02      	cmp	r3, #2
 8008230:	bf28      	it	cs
 8008232:	2302      	movcs	r3, #2
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800823a:	429a      	cmp	r2, r3
 800823c:	d201      	bcs.n	8008242 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800823e:	2303      	movs	r3, #3
 8008240:	e001      	b.n	8008246 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008246:	4618      	mov	r0, r3
 8008248:	3730      	adds	r7, #48	; 0x30
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	785a      	ldrb	r2, [r3, #1]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	789a      	ldrb	r2, [r3, #2]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	78da      	ldrb	r2, [r3, #3]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	3304      	adds	r3, #4
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b02      	cmp	r3, #2
 8008280:	bf28      	it	cs
 8008282:	2302      	movcs	r3, #2
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	795a      	ldrb	r2, [r3, #5]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	799a      	ldrb	r2, [r3, #6]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	79da      	ldrb	r2, [r3, #7]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	7a1a      	ldrb	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	721a      	strb	r2, [r3, #8]
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b087      	sub	sp, #28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	781a      	ldrb	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	785a      	ldrb	r2, [r3, #1]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	789a      	ldrb	r2, [r3, #2]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	78da      	ldrb	r2, [r3, #3]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3305      	adds	r3, #5
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	799a      	ldrb	r2, [r3, #6]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	889b      	ldrh	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831a:	d804      	bhi.n	8008326 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008324:	d901      	bls.n	800832a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008326:	2303      	movs	r3, #3
 8008328:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008330:	2b00      	cmp	r3, #0
 8008332:	d136      	bne.n	80083a2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	78db      	ldrb	r3, [r3, #3]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d108      	bne.n	8008352 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	889b      	ldrh	r3, [r3, #4]
 8008344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008348:	f240 8097 	bls.w	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800834c:	2303      	movs	r3, #3
 800834e:	75fb      	strb	r3, [r7, #23]
 8008350:	e093      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	78db      	ldrb	r3, [r3, #3]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	889b      	ldrh	r3, [r3, #4]
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	f240 8089 	bls.w	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008368:	2303      	movs	r3, #3
 800836a:	75fb      	strb	r3, [r7, #23]
 800836c:	e085      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	78db      	ldrb	r3, [r3, #3]
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	2b01      	cmp	r3, #1
 8008378:	d005      	beq.n	8008386 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	78db      	ldrb	r3, [r3, #3]
 800837e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008382:	2b03      	cmp	r3, #3
 8008384:	d10a      	bne.n	800839c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	799b      	ldrb	r3, [r3, #6]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <USBH_ParseEPDesc+0xe0>
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	799b      	ldrb	r3, [r3, #6]
 8008392:	2b10      	cmp	r3, #16
 8008394:	d970      	bls.n	8008478 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008396:	2303      	movs	r3, #3
 8008398:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800839a:	e06d      	b.n	8008478 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800839c:	2303      	movs	r3, #3
 800839e:	75fb      	strb	r3, [r7, #23]
 80083a0:	e06b      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d13c      	bne.n	8008426 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	78db      	ldrb	r3, [r3, #3]
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d005      	beq.n	80083c4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	78db      	ldrb	r3, [r3, #3]
 80083bc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	889b      	ldrh	r3, [r3, #4]
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d956      	bls.n	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80083cc:	2303      	movs	r3, #3
 80083ce:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083d0:	e053      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	78db      	ldrb	r3, [r3, #3]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10e      	bne.n	80083fc <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	799b      	ldrb	r3, [r3, #6]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d803      	bhi.n	80083f6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d941      	bls.n	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80083f6:	2303      	movs	r3, #3
 80083f8:	75fb      	strb	r3, [r7, #23]
 80083fa:	e03e      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	2b03      	cmp	r3, #3
 8008406:	d10b      	bne.n	8008420 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	799b      	ldrb	r3, [r3, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <USBH_ParseEPDesc+0x164>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	889b      	ldrh	r3, [r3, #4]
 8008414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008418:	d32f      	bcc.n	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800841a:	2303      	movs	r3, #3
 800841c:	75fb      	strb	r3, [r7, #23]
 800841e:	e02c      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008420:	2303      	movs	r3, #3
 8008422:	75fb      	strb	r3, [r7, #23]
 8008424:	e029      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800842c:	2b02      	cmp	r3, #2
 800842e:	d120      	bne.n	8008472 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	889b      	ldrh	r3, [r3, #4]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d01a      	beq.n	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008444:	2303      	movs	r3, #3
 8008446:	75fb      	strb	r3, [r7, #23]
 8008448:	e017      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d10a      	bne.n	800846c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	799b      	ldrb	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <USBH_ParseEPDesc+0x1b0>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	889b      	ldrh	r3, [r3, #4]
 8008462:	2b08      	cmp	r3, #8
 8008464:	d909      	bls.n	800847a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008466:	2303      	movs	r3, #3
 8008468:	75fb      	strb	r3, [r7, #23]
 800846a:	e006      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	e003      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008472:	2303      	movs	r3, #3
 8008474:	75fb      	strb	r3, [r7, #23]
 8008476:	e000      	b.n	800847a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008478:	bf00      	nop
  }

  return status;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d120      	bne.n	80084e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	1e9a      	subs	r2, r3, #2
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bf28      	it	cs
 80084ac:	4613      	movcs	r3, r2
 80084ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3302      	adds	r3, #2
 80084b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084b6:	2300      	movs	r3, #0
 80084b8:	82fb      	strh	r3, [r7, #22]
 80084ba:	e00b      	b.n	80084d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084bc:	8afb      	ldrh	r3, [r7, #22]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	781a      	ldrb	r2, [r3, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3301      	adds	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084ce:	8afb      	ldrh	r3, [r7, #22]
 80084d0:	3302      	adds	r3, #2
 80084d2:	82fb      	strh	r3, [r7, #22]
 80084d4:	8afa      	ldrh	r2, [r7, #22]
 80084d6:	8abb      	ldrh	r3, [r7, #20]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3ef      	bcc.n	80084bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
  }
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	4413      	add	r3, r2
 8008504:	b29a      	uxth	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008516:	68fb      	ldr	r3, [r7, #12]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008532:	2301      	movs	r3, #1
 8008534:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <USBH_CtlReq+0x20>
 800853e:	2b02      	cmp	r3, #2
 8008540:	d00f      	beq.n	8008562 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008542:	e027      	b.n	8008594 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	88fa      	ldrh	r2, [r7, #6]
 800854e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2202      	movs	r2, #2
 800855a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800855c:	2301      	movs	r3, #1
 800855e:	75fb      	strb	r3, [r7, #23]
      break;
 8008560:	e018      	b.n	8008594 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f81c 	bl	80085a0 <USBH_HandleControl>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <USBH_CtlReq+0x54>
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d106      	bne.n	8008586 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	761a      	strb	r2, [r3, #24]
      break;
 8008584:	e005      	b.n	8008592 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d102      	bne.n	8008592 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	709a      	strb	r2, [r3, #2]
      break;
 8008592:	bf00      	nop
  }
  return status;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7e1b      	ldrb	r3, [r3, #24]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	2b0a      	cmp	r3, #10
 80085b8:	f200 8156 	bhi.w	8008868 <USBH_HandleControl+0x2c8>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <USBH_HandleControl+0x24>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085f1 	.word	0x080085f1
 80085c8:	0800860b 	.word	0x0800860b
 80085cc:	08008675 	.word	0x08008675
 80085d0:	0800869b 	.word	0x0800869b
 80085d4:	080086d3 	.word	0x080086d3
 80085d8:	080086fd 	.word	0x080086fd
 80085dc:	0800874f 	.word	0x0800874f
 80085e0:	08008771 	.word	0x08008771
 80085e4:	080087ad 	.word	0x080087ad
 80085e8:	080087d3 	.word	0x080087d3
 80085ec:	08008811 	.word	0x08008811
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f103 0110 	add.w	r1, r3, #16
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	795b      	ldrb	r3, [r3, #5]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f943 	bl	8008888 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	761a      	strb	r2, [r3, #24]
      break;
 8008608:	e139      	b.n	800887e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fcc5 	bl	8008fa0 <USBH_LL_GetURBState>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d11e      	bne.n	800865e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008628:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8adb      	ldrh	r3, [r3, #22]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008632:	7b7b      	ldrb	r3, [r7, #13]
 8008634:	2b80      	cmp	r3, #128	; 0x80
 8008636:	d103      	bne.n	8008640 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2203      	movs	r2, #3
 800863c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800863e:	e115      	b.n	800886c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2205      	movs	r2, #5
 8008644:	761a      	strb	r2, [r3, #24]
      break;
 8008646:	e111      	b.n	800886c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008648:	7b7b      	ldrb	r3, [r7, #13]
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d103      	bne.n	8008656 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2209      	movs	r2, #9
 8008652:	761a      	strb	r2, [r3, #24]
      break;
 8008654:	e10a      	b.n	800886c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2207      	movs	r2, #7
 800865a:	761a      	strb	r2, [r3, #24]
      break;
 800865c:	e106      	b.n	800886c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b04      	cmp	r3, #4
 8008662:	d003      	beq.n	800866c <USBH_HandleControl+0xcc>
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b02      	cmp	r3, #2
 8008668:	f040 8100 	bne.w	800886c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	220b      	movs	r2, #11
 8008670:	761a      	strb	r2, [r3, #24]
      break;
 8008672:	e0fb      	b.n	800886c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800867a:	b29a      	uxth	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	899a      	ldrh	r2, [r3, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	791b      	ldrb	r3, [r3, #4]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f93a 	bl	8008906 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2204      	movs	r2, #4
 8008696:	761a      	strb	r2, [r3, #24]
      break;
 8008698:	e0f1      	b.n	800887e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fc7d 	bl	8008fa0 <USBH_LL_GetURBState>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d102      	bne.n	80086b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2209      	movs	r2, #9
 80086b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	d102      	bne.n	80086c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086c0:	e0d6      	b.n	8008870 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	f040 80d3 	bne.w	8008870 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220b      	movs	r2, #11
 80086ce:	761a      	strb	r2, [r3, #24]
      break;
 80086d0:	e0ce      	b.n	8008870 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	899a      	ldrh	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	795b      	ldrb	r3, [r3, #5]
 80086de:	2001      	movs	r0, #1
 80086e0:	9000      	str	r0, [sp, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8ea 	bl	80088bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2206      	movs	r2, #6
 80086f8:	761a      	strb	r2, [r3, #24]
      break;
 80086fa:	e0c0      	b.n	800887e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	795b      	ldrb	r3, [r3, #5]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc4c 	bl	8008fa0 <USBH_LL_GetURBState>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d103      	bne.n	800871a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2207      	movs	r2, #7
 8008716:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008718:	e0ac      	b.n	8008874 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b05      	cmp	r3, #5
 800871e:	d105      	bne.n	800872c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220c      	movs	r2, #12
 8008724:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008726:	2303      	movs	r3, #3
 8008728:	73fb      	strb	r3, [r7, #15]
      break;
 800872a:	e0a3      	b.n	8008874 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d103      	bne.n	800873a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2205      	movs	r2, #5
 8008736:	761a      	strb	r2, [r3, #24]
      break;
 8008738:	e09c      	b.n	8008874 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b04      	cmp	r3, #4
 800873e:	f040 8099 	bne.w	8008874 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	220b      	movs	r2, #11
 8008746:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	e092      	b.n	8008874 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	791b      	ldrb	r3, [r3, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8d5 	bl	8008906 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2208      	movs	r2, #8
 800876c:	761a      	strb	r2, [r3, #24]

      break;
 800876e:	e086      	b.n	800887e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	791b      	ldrb	r3, [r3, #4]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fc12 	bl	8008fa0 <USBH_LL_GetURBState>
 800877c:	4603      	mov	r3, r0
 800877e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d105      	bne.n	8008792 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	220d      	movs	r2, #13
 800878a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008790:	e072      	b.n	8008878 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b04      	cmp	r3, #4
 8008796:	d103      	bne.n	80087a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	220b      	movs	r2, #11
 800879c:	761a      	strb	r2, [r3, #24]
      break;
 800879e:	e06b      	b.n	8008878 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d168      	bne.n	8008878 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087a6:	2303      	movs	r3, #3
 80087a8:	73fb      	strb	r3, [r7, #15]
      break;
 80087aa:	e065      	b.n	8008878 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	795b      	ldrb	r3, [r3, #5]
 80087b0:	2201      	movs	r2, #1
 80087b2:	9200      	str	r2, [sp, #0]
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f87f 	bl	80088bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	220a      	movs	r2, #10
 80087ce:	761a      	strb	r2, [r3, #24]
      break;
 80087d0:	e055      	b.n	800887e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fbe1 	bl	8008fa0 <USBH_LL_GetURBState>
 80087de:	4603      	mov	r3, r0
 80087e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d105      	bne.n	80087f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	220d      	movs	r2, #13
 80087f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087f2:	e043      	b.n	800887c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d103      	bne.n	8008802 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2209      	movs	r2, #9
 80087fe:	761a      	strb	r2, [r3, #24]
      break;
 8008800:	e03c      	b.n	800887c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b04      	cmp	r3, #4
 8008806:	d139      	bne.n	800887c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	220b      	movs	r2, #11
 800880c:	761a      	strb	r2, [r3, #24]
      break;
 800880e:	e035      	b.n	800887c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7e5b      	ldrb	r3, [r3, #25]
 8008814:	3301      	adds	r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	765a      	strb	r2, [r3, #25]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7e5b      	ldrb	r3, [r3, #25]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d806      	bhi.n	8008832 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008830:	e025      	b.n	800887e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008838:	2106      	movs	r1, #6
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	795b      	ldrb	r3, [r3, #5]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f90c 	bl	8008a68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	791b      	ldrb	r3, [r3, #4]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f906 	bl	8008a68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008862:	2302      	movs	r3, #2
 8008864:	73fb      	strb	r3, [r7, #15]
      break;
 8008866:	e00a      	b.n	800887e <USBH_HandleControl+0x2de>

    default:
      break;
 8008868:	bf00      	nop
 800886a:	e008      	b.n	800887e <USBH_HandleControl+0x2de>
      break;
 800886c:	bf00      	nop
 800886e:	e006      	b.n	800887e <USBH_HandleControl+0x2de>
      break;
 8008870:	bf00      	nop
 8008872:	e004      	b.n	800887e <USBH_HandleControl+0x2de>
      break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <USBH_HandleControl+0x2de>
      break;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <USBH_HandleControl+0x2de>
      break;
 800887c:	bf00      	nop
  }

  return status;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af04      	add	r7, sp, #16
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008896:	79f9      	ldrb	r1, [r7, #7]
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	2308      	movs	r3, #8
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	2300      	movs	r3, #0
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 fb46 	bl	8008f3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4611      	mov	r1, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	460b      	mov	r3, r1
 80088cc:	80fb      	strh	r3, [r7, #6]
 80088ce:	4613      	mov	r3, r2
 80088d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088e0:	7979      	ldrb	r1, [r7, #5]
 80088e2:	7e3b      	ldrb	r3, [r7, #24]
 80088e4:	9303      	str	r3, [sp, #12]
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	9302      	str	r3, [sp, #8]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	2301      	movs	r3, #1
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	2200      	movs	r2, #0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fb21 	bl	8008f3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b088      	sub	sp, #32
 800890a:	af04      	add	r7, sp, #16
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	4611      	mov	r1, r2
 8008912:	461a      	mov	r2, r3
 8008914:	460b      	mov	r3, r1
 8008916:	80fb      	strh	r3, [r7, #6]
 8008918:	4613      	mov	r3, r2
 800891a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800891c:	7979      	ldrb	r1, [r7, #5]
 800891e:	2300      	movs	r3, #0
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2301      	movs	r3, #1
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	2201      	movs	r2, #1
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fb03 	bl	8008f3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008938:	2300      	movs	r3, #0

}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b088      	sub	sp, #32
 8008946:	af04      	add	r7, sp, #16
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	4611      	mov	r1, r2
 800894e:	461a      	mov	r2, r3
 8008950:	460b      	mov	r3, r1
 8008952:	80fb      	strh	r3, [r7, #6]
 8008954:	4613      	mov	r3, r2
 8008956:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008966:	7979      	ldrb	r1, [r7, #5]
 8008968:	7e3b      	ldrb	r3, [r7, #24]
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	2301      	movs	r3, #1
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	2302      	movs	r3, #2
 800897a:	2200      	movs	r2, #0
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fade 	bl	8008f3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af04      	add	r7, sp, #16
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4611      	mov	r1, r2
 8008998:	461a      	mov	r2, r3
 800899a:	460b      	mov	r3, r1
 800899c:	80fb      	strh	r3, [r7, #6]
 800899e:	4613      	mov	r3, r2
 80089a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a2:	7979      	ldrb	r1, [r7, #5]
 80089a4:	2300      	movs	r3, #0
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	2301      	movs	r3, #1
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	2302      	movs	r3, #2
 80089b6:	2201      	movs	r2, #1
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fac0 	bl	8008f3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af04      	add	r7, sp, #16
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	4608      	mov	r0, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	461a      	mov	r2, r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	70fb      	strb	r3, [r7, #3]
 80089da:	460b      	mov	r3, r1
 80089dc:	70bb      	strb	r3, [r7, #2]
 80089de:	4613      	mov	r3, r2
 80089e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089e2:	7878      	ldrb	r0, [r7, #1]
 80089e4:	78ba      	ldrb	r2, [r7, #2]
 80089e6:	78f9      	ldrb	r1, [r7, #3]
 80089e8:	8b3b      	ldrh	r3, [r7, #24]
 80089ea:	9302      	str	r3, [sp, #8]
 80089ec:	7d3b      	ldrb	r3, [r7, #20]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	7c3b      	ldrb	r3, [r7, #16]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4603      	mov	r3, r0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa53 	bl	8008ea2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fa72 	bl	8008f00 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f836 	bl	8008aa4 <USBH_GetFreePipe>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00a      	beq.n	8008a5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	89fb      	ldrh	r3, [r7, #14]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	33e0      	adds	r3, #224	; 0xe0
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a5c:	89fb      	ldrh	r3, [r7, #14]
 8008a5e:	b2db      	uxtb	r3, r3
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	2b0f      	cmp	r3, #15
 8008a78:	d80d      	bhi.n	8008a96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	33e0      	adds	r3, #224	; 0xe0
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	33e0      	adds	r3, #224	; 0xe0
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e00f      	b.n	8008ad6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	33e0      	adds	r3, #224	; 0xe0
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d102      	bne.n	8008ad0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	e007      	b.n	8008ae0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d9ec      	bls.n	8008ab6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008af0:	2201      	movs	r2, #1
 8008af2:	490e      	ldr	r1, [pc, #56]	; (8008b2c <MX_USB_HOST_Init+0x40>)
 8008af4:	480e      	ldr	r0, [pc, #56]	; (8008b30 <MX_USB_HOST_Init+0x44>)
 8008af6:	f7fe fb05 	bl	8007104 <USBH_Init>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b00:	f7f8 fb50 	bl	80011a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b04:	490b      	ldr	r1, [pc, #44]	; (8008b34 <MX_USB_HOST_Init+0x48>)
 8008b06:	480a      	ldr	r0, [pc, #40]	; (8008b30 <MX_USB_HOST_Init+0x44>)
 8008b08:	f7fe fba9 	bl	800725e <USBH_RegisterClass>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b12:	f7f8 fb47 	bl	80011a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b16:	4806      	ldr	r0, [pc, #24]	; (8008b30 <MX_USB_HOST_Init+0x44>)
 8008b18:	f7fe fc2d 	bl	8007376 <USBH_Start>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b22:	f7f8 fb3f 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b26:	bf00      	nop
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	20000388 	.word	0x20000388
 8008b34:	200001f4 	.word	0x200001f4

08008b38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b3c:	4802      	ldr	r0, [pc, #8]	; (8008b48 <MX_USB_HOST_Process+0x10>)
 8008b3e:	f7fe fc2b 	bl	8007398 <USBH_Process>
}
 8008b42:	bf00      	nop
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000388 	.word	0x20000388

08008b4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d819      	bhi.n	8008b94 <USBH_UserProcess+0x48>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <USBH_UserProcess+0x1c>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008b85 	.word	0x08008b85
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b8d 	.word	0x08008b8d
 8008b78:	08008b7d 	.word	0x08008b7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <USBH_UserProcess+0x58>)
 8008b7e:	2203      	movs	r2, #3
 8008b80:	701a      	strb	r2, [r3, #0]
  break;
 8008b82:	e008      	b.n	8008b96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b84:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <USBH_UserProcess+0x58>)
 8008b86:	2202      	movs	r2, #2
 8008b88:	701a      	strb	r2, [r3, #0]
  break;
 8008b8a:	e004      	b.n	8008b96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b8c:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <USBH_UserProcess+0x58>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
  break;
 8008b92:	e000      	b.n	8008b96 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000760 	.word	0x20000760

08008ba8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bc8:	d147      	bne.n	8008c5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	4a24      	ldr	r2, [pc, #144]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bda:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	481b      	ldr	r0, [pc, #108]	; (8008c68 <HAL_HCD_MspInit+0xc0>)
 8008bfc:	f7f8 fe5e 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c06:	2302      	movs	r3, #2
 8008c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c12:	230a      	movs	r3, #10
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4812      	ldr	r0, [pc, #72]	; (8008c68 <HAL_HCD_MspInit+0xc0>)
 8008c1e:	f7f8 fe4d 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c26:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	4a0b      	ldr	r2, [pc, #44]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <HAL_HCD_MspInit+0xbc>)
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	2043      	movs	r0, #67	; 0x43
 8008c50:	f7f8 fdfd 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c54:	2043      	movs	r0, #67	; 0x43
 8008c56:	f7f8 fe16 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3728      	adds	r7, #40	; 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40023800 	.word	0x40023800
 8008c68:	40020000 	.word	0x40020000

08008c6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe ff6b 	bl	8007b56 <USBH_LL_IncTimer>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe ffa3 	bl	8007be2 <USBH_LL_Connect>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe ffac 	bl	8007c10 <USBH_LL_Disconnect>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe ff5d 	bl	8007baa <USBH_LL_PortEnabled>
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe ff5d 	bl	8007bc6 <USBH_LL_PortDisabled>
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d12a      	bne.n	8008d7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d26:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d36:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d40:	2208      	movs	r2, #8
 8008d42:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d44:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d52:	2202      	movs	r2, #2
 8008d54:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d5c:	480a      	ldr	r0, [pc, #40]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d5e:	f7f8 ff7a 	bl	8001c56 <HAL_HCD_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d68:	f7f8 fa1c 	bl	80011a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d6c:	4806      	ldr	r0, [pc, #24]	; (8008d88 <USBH_LL_Init+0x74>)
 8008d6e:	f7f9 fbdb 	bl	8002528 <HAL_HCD_GetCurrentFrame>
 8008d72:	4603      	mov	r3, r0
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7fe fede 	bl	8007b38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000764 	.word	0x20000764

08008d8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f9 fb48 	bl	8002438 <HAL_HCD_Start>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f95e 	bl	8009070 <USBH_Get_USB_Status>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f9 fb50 	bl	800247e <HAL_HCD_Stop>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 f943 	bl	8009070 <USBH_Get_USB_Status>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7f9 fb9a 	bl	8002544 <HAL_HCD_GetCurrentSpeed>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d00c      	beq.n	8008e30 <USBH_LL_GetSpeed+0x38>
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d80d      	bhi.n	8008e36 <USBH_LL_GetSpeed+0x3e>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <USBH_LL_GetSpeed+0x2c>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d003      	beq.n	8008e2a <USBH_LL_GetSpeed+0x32>
 8008e22:	e008      	b.n	8008e36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e008      	b.n	8008e3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e005      	b.n	8008e3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e30:	2302      	movs	r3, #2
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e002      	b.n	8008e3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e36:	2301      	movs	r3, #1
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	bf00      	nop
  }
  return  speed;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7f9 fb2b 	bl	80024b8 <HAL_HCD_ResetPort>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f901 	bl	8009070 <USBH_Get_USB_Status>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f9 fb33 	bl	80024fe <HAL_HCD_HC_GetXferCount>
 8008e98:	4603      	mov	r3, r0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ea2:	b590      	push	{r4, r7, lr}
 8008ea4:	b089      	sub	sp, #36	; 0x24
 8008ea6:	af04      	add	r7, sp, #16
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	70fb      	strb	r3, [r7, #3]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70bb      	strb	r3, [r7, #2]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eca:	787c      	ldrb	r4, [r7, #1]
 8008ecc:	78ba      	ldrb	r2, [r7, #2]
 8008ece:	78f9      	ldrb	r1, [r7, #3]
 8008ed0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ed2:	9302      	str	r3, [sp, #8]
 8008ed4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	f7f8 ff1f 	bl	8001d24 <HAL_HCD_HC_Init>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f8bf 	bl	8009070 <USBH_Get_USB_Status>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd90      	pop	{r4, r7, pc}

08008f00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f8 ffb8 	bl	8001e94 <HAL_HCD_HC_Halt>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f8a0 	bl	8009070 <USBH_Get_USB_Status>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f3e:	b590      	push	{r4, r7, lr}
 8008f40:	b089      	sub	sp, #36	; 0x24
 8008f42:	af04      	add	r7, sp, #16
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	70fb      	strb	r3, [r7, #3]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70bb      	strb	r3, [r7, #2]
 8008f54:	4613      	mov	r3, r2
 8008f56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f66:	787c      	ldrb	r4, [r7, #1]
 8008f68:	78ba      	ldrb	r2, [r7, #2]
 8008f6a:	78f9      	ldrb	r1, [r7, #3]
 8008f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f74:	9302      	str	r3, [sp, #8]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	4623      	mov	r3, r4
 8008f82:	f7f8 ffab 	bl	8001edc <HAL_HCD_HC_SubmitRequest>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f86f 	bl	8009070 <USBH_Get_USB_Status>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd90      	pop	{r4, r7, pc}

08008fa0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f9 fa8c 	bl	80024d4 <HAL_HCD_HC_GetURBState>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d103      	bne.n	8008fe4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f872 	bl	80090c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008fe4:	20c8      	movs	r0, #200	; 0xc8
 8008fe6:	f7f8 fb33 	bl	8001650 <HAL_Delay>
  return USBH_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
 8009000:	4613      	mov	r3, r2
 8009002:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800900a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800900c:	78fa      	ldrb	r2, [r7, #3]
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	4613      	mov	r3, r2
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	440b      	add	r3, r1
 800901a:	3317      	adds	r3, #23
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	68f9      	ldr	r1, [r7, #12]
 8009026:	4613      	mov	r3, r2
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	1a9b      	subs	r3, r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	333c      	adds	r3, #60	; 0x3c
 8009032:	78ba      	ldrb	r2, [r7, #2]
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e009      	b.n	800904c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	4613      	mov	r3, r2
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	333d      	adds	r3, #61	; 0x3d
 8009048:	78ba      	ldrb	r2, [r7, #2]
 800904a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7f8 faf4 	bl	8001650 <HAL_Delay>
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d817      	bhi.n	80090b4 <USBH_Get_USB_Status+0x44>
 8009084:	a201      	add	r2, pc, #4	; (adr r2, 800908c <USBH_Get_USB_Status+0x1c>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	0800909d 	.word	0x0800909d
 8009090:	080090a3 	.word	0x080090a3
 8009094:	080090a9 	.word	0x080090a9
 8009098:	080090af 	.word	0x080090af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
    break;
 80090a0:	e00b      	b.n	80090ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090a2:	2302      	movs	r3, #2
 80090a4:	73fb      	strb	r3, [r7, #15]
    break;
 80090a6:	e008      	b.n	80090ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
    break;
 80090ac:	e005      	b.n	80090ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090ae:	2302      	movs	r3, #2
 80090b0:	73fb      	strb	r3, [r7, #15]
    break;
 80090b2:	e002      	b.n	80090ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090b4:	2302      	movs	r3, #2
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	bf00      	nop
  }
  return usb_status;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	e001      	b.n	80090e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	461a      	mov	r2, r3
 80090ea:	2101      	movs	r1, #1
 80090ec:	4803      	ldr	r0, [pc, #12]	; (80090fc <MX_DriverVbusFS+0x34>)
 80090ee:	f7f8 fd99 	bl	8001c24 <HAL_GPIO_WritePin>
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40020800 	.word	0x40020800

08009100 <malloc>:
 8009100:	4b02      	ldr	r3, [pc, #8]	; (800910c <malloc+0xc>)
 8009102:	4601      	mov	r1, r0
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	f000 b82b 	b.w	8009160 <_malloc_r>
 800910a:	bf00      	nop
 800910c:	20000260 	.word	0x20000260

08009110 <free>:
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <free+0xc>)
 8009112:	4601      	mov	r1, r0
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	f000 b913 	b.w	8009340 <_free_r>
 800911a:	bf00      	nop
 800911c:	20000260 	.word	0x20000260

08009120 <sbrk_aligned>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4e0e      	ldr	r6, [pc, #56]	; (800915c <sbrk_aligned+0x3c>)
 8009124:	460c      	mov	r4, r1
 8009126:	6831      	ldr	r1, [r6, #0]
 8009128:	4605      	mov	r5, r0
 800912a:	b911      	cbnz	r1, 8009132 <sbrk_aligned+0x12>
 800912c:	f000 f8cc 	bl	80092c8 <_sbrk_r>
 8009130:	6030      	str	r0, [r6, #0]
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f8c7 	bl	80092c8 <_sbrk_r>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d00a      	beq.n	8009154 <sbrk_aligned+0x34>
 800913e:	1cc4      	adds	r4, r0, #3
 8009140:	f024 0403 	bic.w	r4, r4, #3
 8009144:	42a0      	cmp	r0, r4
 8009146:	d007      	beq.n	8009158 <sbrk_aligned+0x38>
 8009148:	1a21      	subs	r1, r4, r0
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f8bc 	bl	80092c8 <_sbrk_r>
 8009150:	3001      	adds	r0, #1
 8009152:	d101      	bne.n	8009158 <sbrk_aligned+0x38>
 8009154:	f04f 34ff 	mov.w	r4, #4294967295
 8009158:	4620      	mov	r0, r4
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	20000b48 	.word	0x20000b48

08009160 <_malloc_r>:
 8009160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009164:	1ccd      	adds	r5, r1, #3
 8009166:	f025 0503 	bic.w	r5, r5, #3
 800916a:	3508      	adds	r5, #8
 800916c:	2d0c      	cmp	r5, #12
 800916e:	bf38      	it	cc
 8009170:	250c      	movcc	r5, #12
 8009172:	2d00      	cmp	r5, #0
 8009174:	4607      	mov	r7, r0
 8009176:	db01      	blt.n	800917c <_malloc_r+0x1c>
 8009178:	42a9      	cmp	r1, r5
 800917a:	d905      	bls.n	8009188 <_malloc_r+0x28>
 800917c:	230c      	movs	r3, #12
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	2600      	movs	r6, #0
 8009182:	4630      	mov	r0, r6
 8009184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009188:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800925c <_malloc_r+0xfc>
 800918c:	f000 f868 	bl	8009260 <__malloc_lock>
 8009190:	f8d8 3000 	ldr.w	r3, [r8]
 8009194:	461c      	mov	r4, r3
 8009196:	bb5c      	cbnz	r4, 80091f0 <_malloc_r+0x90>
 8009198:	4629      	mov	r1, r5
 800919a:	4638      	mov	r0, r7
 800919c:	f7ff ffc0 	bl	8009120 <sbrk_aligned>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	4604      	mov	r4, r0
 80091a4:	d155      	bne.n	8009252 <_malloc_r+0xf2>
 80091a6:	f8d8 4000 	ldr.w	r4, [r8]
 80091aa:	4626      	mov	r6, r4
 80091ac:	2e00      	cmp	r6, #0
 80091ae:	d145      	bne.n	800923c <_malloc_r+0xdc>
 80091b0:	2c00      	cmp	r4, #0
 80091b2:	d048      	beq.n	8009246 <_malloc_r+0xe6>
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	4631      	mov	r1, r6
 80091b8:	4638      	mov	r0, r7
 80091ba:	eb04 0903 	add.w	r9, r4, r3
 80091be:	f000 f883 	bl	80092c8 <_sbrk_r>
 80091c2:	4581      	cmp	r9, r0
 80091c4:	d13f      	bne.n	8009246 <_malloc_r+0xe6>
 80091c6:	6821      	ldr	r1, [r4, #0]
 80091c8:	1a6d      	subs	r5, r5, r1
 80091ca:	4629      	mov	r1, r5
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff ffa7 	bl	8009120 <sbrk_aligned>
 80091d2:	3001      	adds	r0, #1
 80091d4:	d037      	beq.n	8009246 <_malloc_r+0xe6>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	442b      	add	r3, r5
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	f8d8 3000 	ldr.w	r3, [r8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d038      	beq.n	8009256 <_malloc_r+0xf6>
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	42a2      	cmp	r2, r4
 80091e8:	d12b      	bne.n	8009242 <_malloc_r+0xe2>
 80091ea:	2200      	movs	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
 80091ee:	e00f      	b.n	8009210 <_malloc_r+0xb0>
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	1b52      	subs	r2, r2, r5
 80091f4:	d41f      	bmi.n	8009236 <_malloc_r+0xd6>
 80091f6:	2a0b      	cmp	r2, #11
 80091f8:	d917      	bls.n	800922a <_malloc_r+0xca>
 80091fa:	1961      	adds	r1, r4, r5
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	6025      	str	r5, [r4, #0]
 8009200:	bf18      	it	ne
 8009202:	6059      	strne	r1, [r3, #4]
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	bf08      	it	eq
 8009208:	f8c8 1000 	streq.w	r1, [r8]
 800920c:	5162      	str	r2, [r4, r5]
 800920e:	604b      	str	r3, [r1, #4]
 8009210:	4638      	mov	r0, r7
 8009212:	f104 060b 	add.w	r6, r4, #11
 8009216:	f000 f829 	bl	800926c <__malloc_unlock>
 800921a:	f026 0607 	bic.w	r6, r6, #7
 800921e:	1d23      	adds	r3, r4, #4
 8009220:	1af2      	subs	r2, r6, r3
 8009222:	d0ae      	beq.n	8009182 <_malloc_r+0x22>
 8009224:	1b9b      	subs	r3, r3, r6
 8009226:	50a3      	str	r3, [r4, r2]
 8009228:	e7ab      	b.n	8009182 <_malloc_r+0x22>
 800922a:	42a3      	cmp	r3, r4
 800922c:	6862      	ldr	r2, [r4, #4]
 800922e:	d1dd      	bne.n	80091ec <_malloc_r+0x8c>
 8009230:	f8c8 2000 	str.w	r2, [r8]
 8009234:	e7ec      	b.n	8009210 <_malloc_r+0xb0>
 8009236:	4623      	mov	r3, r4
 8009238:	6864      	ldr	r4, [r4, #4]
 800923a:	e7ac      	b.n	8009196 <_malloc_r+0x36>
 800923c:	4634      	mov	r4, r6
 800923e:	6876      	ldr	r6, [r6, #4]
 8009240:	e7b4      	b.n	80091ac <_malloc_r+0x4c>
 8009242:	4613      	mov	r3, r2
 8009244:	e7cc      	b.n	80091e0 <_malloc_r+0x80>
 8009246:	230c      	movs	r3, #12
 8009248:	603b      	str	r3, [r7, #0]
 800924a:	4638      	mov	r0, r7
 800924c:	f000 f80e 	bl	800926c <__malloc_unlock>
 8009250:	e797      	b.n	8009182 <_malloc_r+0x22>
 8009252:	6025      	str	r5, [r4, #0]
 8009254:	e7dc      	b.n	8009210 <_malloc_r+0xb0>
 8009256:	605b      	str	r3, [r3, #4]
 8009258:	deff      	udf	#255	; 0xff
 800925a:	bf00      	nop
 800925c:	20000b44 	.word	0x20000b44

08009260 <__malloc_lock>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__malloc_lock+0x8>)
 8009262:	f000 b86b 	b.w	800933c <__retarget_lock_acquire_recursive>
 8009266:	bf00      	nop
 8009268:	20000c88 	.word	0x20000c88

0800926c <__malloc_unlock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_unlock+0x8>)
 800926e:	f000 b866 	b.w	800933e <__retarget_lock_release_recursive>
 8009272:	bf00      	nop
 8009274:	20000c88 	.word	0x20000c88

08009278 <siprintf>:
 8009278:	b40e      	push	{r1, r2, r3}
 800927a:	b500      	push	{lr}
 800927c:	b09c      	sub	sp, #112	; 0x70
 800927e:	ab1d      	add	r3, sp, #116	; 0x74
 8009280:	9002      	str	r0, [sp, #8]
 8009282:	9006      	str	r0, [sp, #24]
 8009284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009288:	4809      	ldr	r0, [pc, #36]	; (80092b0 <siprintf+0x38>)
 800928a:	9107      	str	r1, [sp, #28]
 800928c:	9104      	str	r1, [sp, #16]
 800928e:	4909      	ldr	r1, [pc, #36]	; (80092b4 <siprintf+0x3c>)
 8009290:	f853 2b04 	ldr.w	r2, [r3], #4
 8009294:	9105      	str	r1, [sp, #20]
 8009296:	6800      	ldr	r0, [r0, #0]
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	a902      	add	r1, sp, #8
 800929c:	f000 f8f6 	bl	800948c <_svfiprintf_r>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	b01c      	add	sp, #112	; 0x70
 80092a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ac:	b003      	add	sp, #12
 80092ae:	4770      	bx	lr
 80092b0:	20000260 	.word	0x20000260
 80092b4:	ffff0208 	.word	0xffff0208

080092b8 <memset>:
 80092b8:	4402      	add	r2, r0
 80092ba:	4603      	mov	r3, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	d100      	bne.n	80092c2 <memset+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	f803 1b01 	strb.w	r1, [r3], #1
 80092c6:	e7f9      	b.n	80092bc <memset+0x4>

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_sbrk_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f8 f8d8 	bl	8001488 <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20000c84 	.word	0x20000c84

080092e8 <__errno>:
 80092e8:	4b01      	ldr	r3, [pc, #4]	; (80092f0 <__errno+0x8>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20000260 	.word	0x20000260

080092f4 <__libc_init_array>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	4d0d      	ldr	r5, [pc, #52]	; (800932c <__libc_init_array+0x38>)
 80092f8:	4c0d      	ldr	r4, [pc, #52]	; (8009330 <__libc_init_array+0x3c>)
 80092fa:	1b64      	subs	r4, r4, r5
 80092fc:	10a4      	asrs	r4, r4, #2
 80092fe:	2600      	movs	r6, #0
 8009300:	42a6      	cmp	r6, r4
 8009302:	d109      	bne.n	8009318 <__libc_init_array+0x24>
 8009304:	4d0b      	ldr	r5, [pc, #44]	; (8009334 <__libc_init_array+0x40>)
 8009306:	4c0c      	ldr	r4, [pc, #48]	; (8009338 <__libc_init_array+0x44>)
 8009308:	f000 fbae 	bl	8009a68 <_init>
 800930c:	1b64      	subs	r4, r4, r5
 800930e:	10a4      	asrs	r4, r4, #2
 8009310:	2600      	movs	r6, #0
 8009312:	42a6      	cmp	r6, r4
 8009314:	d105      	bne.n	8009322 <__libc_init_array+0x2e>
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	f855 3b04 	ldr.w	r3, [r5], #4
 800931c:	4798      	blx	r3
 800931e:	3601      	adds	r6, #1
 8009320:	e7ee      	b.n	8009300 <__libc_init_array+0xc>
 8009322:	f855 3b04 	ldr.w	r3, [r5], #4
 8009326:	4798      	blx	r3
 8009328:	3601      	adds	r6, #1
 800932a:	e7f2      	b.n	8009312 <__libc_init_array+0x1e>
 800932c:	08009ae8 	.word	0x08009ae8
 8009330:	08009ae8 	.word	0x08009ae8
 8009334:	08009ae8 	.word	0x08009ae8
 8009338:	08009aec 	.word	0x08009aec

0800933c <__retarget_lock_acquire_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_release_recursive>:
 800933e:	4770      	bx	lr

08009340 <_free_r>:
 8009340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009342:	2900      	cmp	r1, #0
 8009344:	d044      	beq.n	80093d0 <_free_r+0x90>
 8009346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934a:	9001      	str	r0, [sp, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f1a1 0404 	sub.w	r4, r1, #4
 8009352:	bfb8      	it	lt
 8009354:	18e4      	addlt	r4, r4, r3
 8009356:	f7ff ff83 	bl	8009260 <__malloc_lock>
 800935a:	4a1e      	ldr	r2, [pc, #120]	; (80093d4 <_free_r+0x94>)
 800935c:	9801      	ldr	r0, [sp, #4]
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	b933      	cbnz	r3, 8009370 <_free_r+0x30>
 8009362:	6063      	str	r3, [r4, #4]
 8009364:	6014      	str	r4, [r2, #0]
 8009366:	b003      	add	sp, #12
 8009368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800936c:	f7ff bf7e 	b.w	800926c <__malloc_unlock>
 8009370:	42a3      	cmp	r3, r4
 8009372:	d908      	bls.n	8009386 <_free_r+0x46>
 8009374:	6825      	ldr	r5, [r4, #0]
 8009376:	1961      	adds	r1, r4, r5
 8009378:	428b      	cmp	r3, r1
 800937a:	bf01      	itttt	eq
 800937c:	6819      	ldreq	r1, [r3, #0]
 800937e:	685b      	ldreq	r3, [r3, #4]
 8009380:	1949      	addeq	r1, r1, r5
 8009382:	6021      	streq	r1, [r4, #0]
 8009384:	e7ed      	b.n	8009362 <_free_r+0x22>
 8009386:	461a      	mov	r2, r3
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	b10b      	cbz	r3, 8009390 <_free_r+0x50>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d9fa      	bls.n	8009386 <_free_r+0x46>
 8009390:	6811      	ldr	r1, [r2, #0]
 8009392:	1855      	adds	r5, r2, r1
 8009394:	42a5      	cmp	r5, r4
 8009396:	d10b      	bne.n	80093b0 <_free_r+0x70>
 8009398:	6824      	ldr	r4, [r4, #0]
 800939a:	4421      	add	r1, r4
 800939c:	1854      	adds	r4, r2, r1
 800939e:	42a3      	cmp	r3, r4
 80093a0:	6011      	str	r1, [r2, #0]
 80093a2:	d1e0      	bne.n	8009366 <_free_r+0x26>
 80093a4:	681c      	ldr	r4, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	6053      	str	r3, [r2, #4]
 80093aa:	440c      	add	r4, r1
 80093ac:	6014      	str	r4, [r2, #0]
 80093ae:	e7da      	b.n	8009366 <_free_r+0x26>
 80093b0:	d902      	bls.n	80093b8 <_free_r+0x78>
 80093b2:	230c      	movs	r3, #12
 80093b4:	6003      	str	r3, [r0, #0]
 80093b6:	e7d6      	b.n	8009366 <_free_r+0x26>
 80093b8:	6825      	ldr	r5, [r4, #0]
 80093ba:	1961      	adds	r1, r4, r5
 80093bc:	428b      	cmp	r3, r1
 80093be:	bf04      	itt	eq
 80093c0:	6819      	ldreq	r1, [r3, #0]
 80093c2:	685b      	ldreq	r3, [r3, #4]
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	bf04      	itt	eq
 80093c8:	1949      	addeq	r1, r1, r5
 80093ca:	6021      	streq	r1, [r4, #0]
 80093cc:	6054      	str	r4, [r2, #4]
 80093ce:	e7ca      	b.n	8009366 <_free_r+0x26>
 80093d0:	b003      	add	sp, #12
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	20000b44 	.word	0x20000b44

080093d8 <__ssputs_r>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	688e      	ldr	r6, [r1, #8]
 80093de:	461f      	mov	r7, r3
 80093e0:	42be      	cmp	r6, r7
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	4682      	mov	sl, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	4690      	mov	r8, r2
 80093ea:	d82c      	bhi.n	8009446 <__ssputs_r+0x6e>
 80093ec:	898a      	ldrh	r2, [r1, #12]
 80093ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093f2:	d026      	beq.n	8009442 <__ssputs_r+0x6a>
 80093f4:	6965      	ldr	r5, [r4, #20]
 80093f6:	6909      	ldr	r1, [r1, #16]
 80093f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093fc:	eba3 0901 	sub.w	r9, r3, r1
 8009400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009404:	1c7b      	adds	r3, r7, #1
 8009406:	444b      	add	r3, r9
 8009408:	106d      	asrs	r5, r5, #1
 800940a:	429d      	cmp	r5, r3
 800940c:	bf38      	it	cc
 800940e:	461d      	movcc	r5, r3
 8009410:	0553      	lsls	r3, r2, #21
 8009412:	d527      	bpl.n	8009464 <__ssputs_r+0x8c>
 8009414:	4629      	mov	r1, r5
 8009416:	f7ff fea3 	bl	8009160 <_malloc_r>
 800941a:	4606      	mov	r6, r0
 800941c:	b360      	cbz	r0, 8009478 <__ssputs_r+0xa0>
 800941e:	6921      	ldr	r1, [r4, #16]
 8009420:	464a      	mov	r2, r9
 8009422:	f000 fadb 	bl	80099dc <memcpy>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800942c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	6126      	str	r6, [r4, #16]
 8009434:	6165      	str	r5, [r4, #20]
 8009436:	444e      	add	r6, r9
 8009438:	eba5 0509 	sub.w	r5, r5, r9
 800943c:	6026      	str	r6, [r4, #0]
 800943e:	60a5      	str	r5, [r4, #8]
 8009440:	463e      	mov	r6, r7
 8009442:	42be      	cmp	r6, r7
 8009444:	d900      	bls.n	8009448 <__ssputs_r+0x70>
 8009446:	463e      	mov	r6, r7
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	4632      	mov	r2, r6
 800944c:	4641      	mov	r1, r8
 800944e:	f000 faab 	bl	80099a8 <memmove>
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	60a3      	str	r3, [r4, #8]
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	4433      	add	r3, r6
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	2000      	movs	r0, #0
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009464:	462a      	mov	r2, r5
 8009466:	f000 fac7 	bl	80099f8 <_realloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d1e0      	bne.n	8009432 <__ssputs_r+0x5a>
 8009470:	6921      	ldr	r1, [r4, #16]
 8009472:	4650      	mov	r0, sl
 8009474:	f7ff ff64 	bl	8009340 <_free_r>
 8009478:	230c      	movs	r3, #12
 800947a:	f8ca 3000 	str.w	r3, [sl]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295
 800948a:	e7e9      	b.n	8009460 <__ssputs_r+0x88>

0800948c <_svfiprintf_r>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	4698      	mov	r8, r3
 8009492:	898b      	ldrh	r3, [r1, #12]
 8009494:	061b      	lsls	r3, r3, #24
 8009496:	b09d      	sub	sp, #116	; 0x74
 8009498:	4607      	mov	r7, r0
 800949a:	460d      	mov	r5, r1
 800949c:	4614      	mov	r4, r2
 800949e:	d50e      	bpl.n	80094be <_svfiprintf_r+0x32>
 80094a0:	690b      	ldr	r3, [r1, #16]
 80094a2:	b963      	cbnz	r3, 80094be <_svfiprintf_r+0x32>
 80094a4:	2140      	movs	r1, #64	; 0x40
 80094a6:	f7ff fe5b 	bl	8009160 <_malloc_r>
 80094aa:	6028      	str	r0, [r5, #0]
 80094ac:	6128      	str	r0, [r5, #16]
 80094ae:	b920      	cbnz	r0, 80094ba <_svfiprintf_r+0x2e>
 80094b0:	230c      	movs	r3, #12
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e0d0      	b.n	800965c <_svfiprintf_r+0x1d0>
 80094ba:	2340      	movs	r3, #64	; 0x40
 80094bc:	616b      	str	r3, [r5, #20]
 80094be:	2300      	movs	r3, #0
 80094c0:	9309      	str	r3, [sp, #36]	; 0x24
 80094c2:	2320      	movs	r3, #32
 80094c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80094cc:	2330      	movs	r3, #48	; 0x30
 80094ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009674 <_svfiprintf_r+0x1e8>
 80094d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094d6:	f04f 0901 	mov.w	r9, #1
 80094da:	4623      	mov	r3, r4
 80094dc:	469a      	mov	sl, r3
 80094de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e2:	b10a      	cbz	r2, 80094e8 <_svfiprintf_r+0x5c>
 80094e4:	2a25      	cmp	r2, #37	; 0x25
 80094e6:	d1f9      	bne.n	80094dc <_svfiprintf_r+0x50>
 80094e8:	ebba 0b04 	subs.w	fp, sl, r4
 80094ec:	d00b      	beq.n	8009506 <_svfiprintf_r+0x7a>
 80094ee:	465b      	mov	r3, fp
 80094f0:	4622      	mov	r2, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff ff6f 	bl	80093d8 <__ssputs_r>
 80094fa:	3001      	adds	r0, #1
 80094fc:	f000 80a9 	beq.w	8009652 <_svfiprintf_r+0x1c6>
 8009500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009502:	445a      	add	r2, fp
 8009504:	9209      	str	r2, [sp, #36]	; 0x24
 8009506:	f89a 3000 	ldrb.w	r3, [sl]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80a1 	beq.w	8009652 <_svfiprintf_r+0x1c6>
 8009510:	2300      	movs	r3, #0
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800951a:	f10a 0a01 	add.w	sl, sl, #1
 800951e:	9304      	str	r3, [sp, #16]
 8009520:	9307      	str	r3, [sp, #28]
 8009522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009526:	931a      	str	r3, [sp, #104]	; 0x68
 8009528:	4654      	mov	r4, sl
 800952a:	2205      	movs	r2, #5
 800952c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009530:	4850      	ldr	r0, [pc, #320]	; (8009674 <_svfiprintf_r+0x1e8>)
 8009532:	f7f6 fe4d 	bl	80001d0 <memchr>
 8009536:	9a04      	ldr	r2, [sp, #16]
 8009538:	b9d8      	cbnz	r0, 8009572 <_svfiprintf_r+0xe6>
 800953a:	06d0      	lsls	r0, r2, #27
 800953c:	bf44      	itt	mi
 800953e:	2320      	movmi	r3, #32
 8009540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009544:	0711      	lsls	r1, r2, #28
 8009546:	bf44      	itt	mi
 8009548:	232b      	movmi	r3, #43	; 0x2b
 800954a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954e:	f89a 3000 	ldrb.w	r3, [sl]
 8009552:	2b2a      	cmp	r3, #42	; 0x2a
 8009554:	d015      	beq.n	8009582 <_svfiprintf_r+0xf6>
 8009556:	9a07      	ldr	r2, [sp, #28]
 8009558:	4654      	mov	r4, sl
 800955a:	2000      	movs	r0, #0
 800955c:	f04f 0c0a 	mov.w	ip, #10
 8009560:	4621      	mov	r1, r4
 8009562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009566:	3b30      	subs	r3, #48	; 0x30
 8009568:	2b09      	cmp	r3, #9
 800956a:	d94d      	bls.n	8009608 <_svfiprintf_r+0x17c>
 800956c:	b1b0      	cbz	r0, 800959c <_svfiprintf_r+0x110>
 800956e:	9207      	str	r2, [sp, #28]
 8009570:	e014      	b.n	800959c <_svfiprintf_r+0x110>
 8009572:	eba0 0308 	sub.w	r3, r0, r8
 8009576:	fa09 f303 	lsl.w	r3, r9, r3
 800957a:	4313      	orrs	r3, r2
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	46a2      	mov	sl, r4
 8009580:	e7d2      	b.n	8009528 <_svfiprintf_r+0x9c>
 8009582:	9b03      	ldr	r3, [sp, #12]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	9103      	str	r1, [sp, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfbb      	ittet	lt
 800958e:	425b      	neglt	r3, r3
 8009590:	f042 0202 	orrlt.w	r2, r2, #2
 8009594:	9307      	strge	r3, [sp, #28]
 8009596:	9307      	strlt	r3, [sp, #28]
 8009598:	bfb8      	it	lt
 800959a:	9204      	strlt	r2, [sp, #16]
 800959c:	7823      	ldrb	r3, [r4, #0]
 800959e:	2b2e      	cmp	r3, #46	; 0x2e
 80095a0:	d10c      	bne.n	80095bc <_svfiprintf_r+0x130>
 80095a2:	7863      	ldrb	r3, [r4, #1]
 80095a4:	2b2a      	cmp	r3, #42	; 0x2a
 80095a6:	d134      	bne.n	8009612 <_svfiprintf_r+0x186>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	9203      	str	r2, [sp, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bfb8      	it	lt
 80095b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095b8:	3402      	adds	r4, #2
 80095ba:	9305      	str	r3, [sp, #20]
 80095bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009684 <_svfiprintf_r+0x1f8>
 80095c0:	7821      	ldrb	r1, [r4, #0]
 80095c2:	2203      	movs	r2, #3
 80095c4:	4650      	mov	r0, sl
 80095c6:	f7f6 fe03 	bl	80001d0 <memchr>
 80095ca:	b138      	cbz	r0, 80095dc <_svfiprintf_r+0x150>
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	eba0 000a 	sub.w	r0, r0, sl
 80095d2:	2240      	movs	r2, #64	; 0x40
 80095d4:	4082      	lsls	r2, r0
 80095d6:	4313      	orrs	r3, r2
 80095d8:	3401      	adds	r4, #1
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e0:	4825      	ldr	r0, [pc, #148]	; (8009678 <_svfiprintf_r+0x1ec>)
 80095e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e6:	2206      	movs	r2, #6
 80095e8:	f7f6 fdf2 	bl	80001d0 <memchr>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d038      	beq.n	8009662 <_svfiprintf_r+0x1d6>
 80095f0:	4b22      	ldr	r3, [pc, #136]	; (800967c <_svfiprintf_r+0x1f0>)
 80095f2:	bb1b      	cbnz	r3, 800963c <_svfiprintf_r+0x1b0>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	3307      	adds	r3, #7
 80095f8:	f023 0307 	bic.w	r3, r3, #7
 80095fc:	3308      	adds	r3, #8
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	4433      	add	r3, r6
 8009604:	9309      	str	r3, [sp, #36]	; 0x24
 8009606:	e768      	b.n	80094da <_svfiprintf_r+0x4e>
 8009608:	fb0c 3202 	mla	r2, ip, r2, r3
 800960c:	460c      	mov	r4, r1
 800960e:	2001      	movs	r0, #1
 8009610:	e7a6      	b.n	8009560 <_svfiprintf_r+0xd4>
 8009612:	2300      	movs	r3, #0
 8009614:	3401      	adds	r4, #1
 8009616:	9305      	str	r3, [sp, #20]
 8009618:	4619      	mov	r1, r3
 800961a:	f04f 0c0a 	mov.w	ip, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009624:	3a30      	subs	r2, #48	; 0x30
 8009626:	2a09      	cmp	r2, #9
 8009628:	d903      	bls.n	8009632 <_svfiprintf_r+0x1a6>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0c6      	beq.n	80095bc <_svfiprintf_r+0x130>
 800962e:	9105      	str	r1, [sp, #20]
 8009630:	e7c4      	b.n	80095bc <_svfiprintf_r+0x130>
 8009632:	fb0c 2101 	mla	r1, ip, r1, r2
 8009636:	4604      	mov	r4, r0
 8009638:	2301      	movs	r3, #1
 800963a:	e7f0      	b.n	800961e <_svfiprintf_r+0x192>
 800963c:	ab03      	add	r3, sp, #12
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	462a      	mov	r2, r5
 8009642:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <_svfiprintf_r+0x1f4>)
 8009644:	a904      	add	r1, sp, #16
 8009646:	4638      	mov	r0, r7
 8009648:	f3af 8000 	nop.w
 800964c:	1c42      	adds	r2, r0, #1
 800964e:	4606      	mov	r6, r0
 8009650:	d1d6      	bne.n	8009600 <_svfiprintf_r+0x174>
 8009652:	89ab      	ldrh	r3, [r5, #12]
 8009654:	065b      	lsls	r3, r3, #25
 8009656:	f53f af2d 	bmi.w	80094b4 <_svfiprintf_r+0x28>
 800965a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965c:	b01d      	add	sp, #116	; 0x74
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	ab03      	add	r3, sp, #12
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462a      	mov	r2, r5
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <_svfiprintf_r+0x1f4>)
 800966a:	a904      	add	r1, sp, #16
 800966c:	4638      	mov	r0, r7
 800966e:	f000 f879 	bl	8009764 <_printf_i>
 8009672:	e7eb      	b.n	800964c <_svfiprintf_r+0x1c0>
 8009674:	08009aac 	.word	0x08009aac
 8009678:	08009ab6 	.word	0x08009ab6
 800967c:	00000000 	.word	0x00000000
 8009680:	080093d9 	.word	0x080093d9
 8009684:	08009ab2 	.word	0x08009ab2

08009688 <_printf_common>:
 8009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	4616      	mov	r6, r2
 800968e:	4699      	mov	r9, r3
 8009690:	688a      	ldr	r2, [r1, #8]
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009698:	4293      	cmp	r3, r2
 800969a:	bfb8      	it	lt
 800969c:	4613      	movlt	r3, r2
 800969e:	6033      	str	r3, [r6, #0]
 80096a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096a4:	4607      	mov	r7, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b10a      	cbz	r2, 80096ae <_printf_common+0x26>
 80096aa:	3301      	adds	r3, #1
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	0699      	lsls	r1, r3, #26
 80096b2:	bf42      	ittt	mi
 80096b4:	6833      	ldrmi	r3, [r6, #0]
 80096b6:	3302      	addmi	r3, #2
 80096b8:	6033      	strmi	r3, [r6, #0]
 80096ba:	6825      	ldr	r5, [r4, #0]
 80096bc:	f015 0506 	ands.w	r5, r5, #6
 80096c0:	d106      	bne.n	80096d0 <_printf_common+0x48>
 80096c2:	f104 0a19 	add.w	sl, r4, #25
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	6832      	ldr	r2, [r6, #0]
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc26      	bgt.n	800971e <_printf_common+0x96>
 80096d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096d4:	1e13      	subs	r3, r2, #0
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	bf18      	it	ne
 80096da:	2301      	movne	r3, #1
 80096dc:	0692      	lsls	r2, r2, #26
 80096de:	d42b      	bmi.n	8009738 <_printf_common+0xb0>
 80096e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096e4:	4649      	mov	r1, r9
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c0      	blx	r8
 80096ea:	3001      	adds	r0, #1
 80096ec:	d01e      	beq.n	800972c <_printf_common+0xa4>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	f003 0306 	and.w	r3, r3, #6
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	bf02      	ittt	eq
 80096fa:	68e5      	ldreq	r5, [r4, #12]
 80096fc:	6833      	ldreq	r3, [r6, #0]
 80096fe:	1aed      	subeq	r5, r5, r3
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	bf0c      	ite	eq
 8009704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009708:	2500      	movne	r5, #0
 800970a:	4293      	cmp	r3, r2
 800970c:	bfc4      	itt	gt
 800970e:	1a9b      	subgt	r3, r3, r2
 8009710:	18ed      	addgt	r5, r5, r3
 8009712:	2600      	movs	r6, #0
 8009714:	341a      	adds	r4, #26
 8009716:	42b5      	cmp	r5, r6
 8009718:	d11a      	bne.n	8009750 <_printf_common+0xc8>
 800971a:	2000      	movs	r0, #0
 800971c:	e008      	b.n	8009730 <_printf_common+0xa8>
 800971e:	2301      	movs	r3, #1
 8009720:	4652      	mov	r2, sl
 8009722:	4649      	mov	r1, r9
 8009724:	4638      	mov	r0, r7
 8009726:	47c0      	blx	r8
 8009728:	3001      	adds	r0, #1
 800972a:	d103      	bne.n	8009734 <_printf_common+0xac>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009734:	3501      	adds	r5, #1
 8009736:	e7c6      	b.n	80096c6 <_printf_common+0x3e>
 8009738:	18e1      	adds	r1, r4, r3
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	2030      	movs	r0, #48	; 0x30
 800973e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009742:	4422      	add	r2, r4
 8009744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800974c:	3302      	adds	r3, #2
 800974e:	e7c7      	b.n	80096e0 <_printf_common+0x58>
 8009750:	2301      	movs	r3, #1
 8009752:	4622      	mov	r2, r4
 8009754:	4649      	mov	r1, r9
 8009756:	4638      	mov	r0, r7
 8009758:	47c0      	blx	r8
 800975a:	3001      	adds	r0, #1
 800975c:	d0e6      	beq.n	800972c <_printf_common+0xa4>
 800975e:	3601      	adds	r6, #1
 8009760:	e7d9      	b.n	8009716 <_printf_common+0x8e>
	...

08009764 <_printf_i>:
 8009764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	7e0f      	ldrb	r7, [r1, #24]
 800976a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800976c:	2f78      	cmp	r7, #120	; 0x78
 800976e:	4691      	mov	r9, r2
 8009770:	4680      	mov	r8, r0
 8009772:	460c      	mov	r4, r1
 8009774:	469a      	mov	sl, r3
 8009776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800977a:	d807      	bhi.n	800978c <_printf_i+0x28>
 800977c:	2f62      	cmp	r7, #98	; 0x62
 800977e:	d80a      	bhi.n	8009796 <_printf_i+0x32>
 8009780:	2f00      	cmp	r7, #0
 8009782:	f000 80d4 	beq.w	800992e <_printf_i+0x1ca>
 8009786:	2f58      	cmp	r7, #88	; 0x58
 8009788:	f000 80c0 	beq.w	800990c <_printf_i+0x1a8>
 800978c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009794:	e03a      	b.n	800980c <_printf_i+0xa8>
 8009796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800979a:	2b15      	cmp	r3, #21
 800979c:	d8f6      	bhi.n	800978c <_printf_i+0x28>
 800979e:	a101      	add	r1, pc, #4	; (adr r1, 80097a4 <_printf_i+0x40>)
 80097a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	08009811 	.word	0x08009811
 80097ac:	0800978d 	.word	0x0800978d
 80097b0:	0800978d 	.word	0x0800978d
 80097b4:	0800978d 	.word	0x0800978d
 80097b8:	0800978d 	.word	0x0800978d
 80097bc:	08009811 	.word	0x08009811
 80097c0:	0800978d 	.word	0x0800978d
 80097c4:	0800978d 	.word	0x0800978d
 80097c8:	0800978d 	.word	0x0800978d
 80097cc:	0800978d 	.word	0x0800978d
 80097d0:	08009915 	.word	0x08009915
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	080098cf 	.word	0x080098cf
 80097dc:	0800978d 	.word	0x0800978d
 80097e0:	0800978d 	.word	0x0800978d
 80097e4:	08009937 	.word	0x08009937
 80097e8:	0800978d 	.word	0x0800978d
 80097ec:	0800983d 	.word	0x0800983d
 80097f0:	0800978d 	.word	0x0800978d
 80097f4:	0800978d 	.word	0x0800978d
 80097f8:	080098d7 	.word	0x080098d7
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	1d1a      	adds	r2, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800980c:	2301      	movs	r3, #1
 800980e:	e09f      	b.n	8009950 <_printf_i+0x1ec>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	0607      	lsls	r7, r0, #24
 8009816:	f103 0104 	add.w	r1, r3, #4
 800981a:	6029      	str	r1, [r5, #0]
 800981c:	d501      	bpl.n	8009822 <_printf_i+0xbe>
 800981e:	681e      	ldr	r6, [r3, #0]
 8009820:	e003      	b.n	800982a <_printf_i+0xc6>
 8009822:	0646      	lsls	r6, r0, #25
 8009824:	d5fb      	bpl.n	800981e <_printf_i+0xba>
 8009826:	f9b3 6000 	ldrsh.w	r6, [r3]
 800982a:	2e00      	cmp	r6, #0
 800982c:	da03      	bge.n	8009836 <_printf_i+0xd2>
 800982e:	232d      	movs	r3, #45	; 0x2d
 8009830:	4276      	negs	r6, r6
 8009832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009836:	485a      	ldr	r0, [pc, #360]	; (80099a0 <_printf_i+0x23c>)
 8009838:	230a      	movs	r3, #10
 800983a:	e012      	b.n	8009862 <_printf_i+0xfe>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	1d19      	adds	r1, r3, #4
 8009842:	6029      	str	r1, [r5, #0]
 8009844:	0605      	lsls	r5, r0, #24
 8009846:	d501      	bpl.n	800984c <_printf_i+0xe8>
 8009848:	681e      	ldr	r6, [r3, #0]
 800984a:	e002      	b.n	8009852 <_printf_i+0xee>
 800984c:	0641      	lsls	r1, r0, #25
 800984e:	d5fb      	bpl.n	8009848 <_printf_i+0xe4>
 8009850:	881e      	ldrh	r6, [r3, #0]
 8009852:	4853      	ldr	r0, [pc, #332]	; (80099a0 <_printf_i+0x23c>)
 8009854:	2f6f      	cmp	r7, #111	; 0x6f
 8009856:	bf0c      	ite	eq
 8009858:	2308      	moveq	r3, #8
 800985a:	230a      	movne	r3, #10
 800985c:	2100      	movs	r1, #0
 800985e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009862:	6865      	ldr	r5, [r4, #4]
 8009864:	60a5      	str	r5, [r4, #8]
 8009866:	2d00      	cmp	r5, #0
 8009868:	bfa2      	ittt	ge
 800986a:	6821      	ldrge	r1, [r4, #0]
 800986c:	f021 0104 	bicge.w	r1, r1, #4
 8009870:	6021      	strge	r1, [r4, #0]
 8009872:	b90e      	cbnz	r6, 8009878 <_printf_i+0x114>
 8009874:	2d00      	cmp	r5, #0
 8009876:	d04b      	beq.n	8009910 <_printf_i+0x1ac>
 8009878:	4615      	mov	r5, r2
 800987a:	fbb6 f1f3 	udiv	r1, r6, r3
 800987e:	fb03 6711 	mls	r7, r3, r1, r6
 8009882:	5dc7      	ldrb	r7, [r0, r7]
 8009884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009888:	4637      	mov	r7, r6
 800988a:	42bb      	cmp	r3, r7
 800988c:	460e      	mov	r6, r1
 800988e:	d9f4      	bls.n	800987a <_printf_i+0x116>
 8009890:	2b08      	cmp	r3, #8
 8009892:	d10b      	bne.n	80098ac <_printf_i+0x148>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	07de      	lsls	r6, r3, #31
 8009898:	d508      	bpl.n	80098ac <_printf_i+0x148>
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6861      	ldr	r1, [r4, #4]
 800989e:	4299      	cmp	r1, r3
 80098a0:	bfde      	ittt	le
 80098a2:	2330      	movle	r3, #48	; 0x30
 80098a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ac:	1b52      	subs	r2, r2, r5
 80098ae:	6122      	str	r2, [r4, #16]
 80098b0:	f8cd a000 	str.w	sl, [sp]
 80098b4:	464b      	mov	r3, r9
 80098b6:	aa03      	add	r2, sp, #12
 80098b8:	4621      	mov	r1, r4
 80098ba:	4640      	mov	r0, r8
 80098bc:	f7ff fee4 	bl	8009688 <_printf_common>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d14a      	bne.n	800995a <_printf_i+0x1f6>
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	b004      	add	sp, #16
 80098ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	f043 0320 	orr.w	r3, r3, #32
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	4833      	ldr	r0, [pc, #204]	; (80099a4 <_printf_i+0x240>)
 80098d8:	2778      	movs	r7, #120	; 0x78
 80098da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	6829      	ldr	r1, [r5, #0]
 80098e2:	061f      	lsls	r7, r3, #24
 80098e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80098e8:	d402      	bmi.n	80098f0 <_printf_i+0x18c>
 80098ea:	065f      	lsls	r7, r3, #25
 80098ec:	bf48      	it	mi
 80098ee:	b2b6      	uxthmi	r6, r6
 80098f0:	07df      	lsls	r7, r3, #31
 80098f2:	bf48      	it	mi
 80098f4:	f043 0320 	orrmi.w	r3, r3, #32
 80098f8:	6029      	str	r1, [r5, #0]
 80098fa:	bf48      	it	mi
 80098fc:	6023      	strmi	r3, [r4, #0]
 80098fe:	b91e      	cbnz	r6, 8009908 <_printf_i+0x1a4>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	f023 0320 	bic.w	r3, r3, #32
 8009906:	6023      	str	r3, [r4, #0]
 8009908:	2310      	movs	r3, #16
 800990a:	e7a7      	b.n	800985c <_printf_i+0xf8>
 800990c:	4824      	ldr	r0, [pc, #144]	; (80099a0 <_printf_i+0x23c>)
 800990e:	e7e4      	b.n	80098da <_printf_i+0x176>
 8009910:	4615      	mov	r5, r2
 8009912:	e7bd      	b.n	8009890 <_printf_i+0x12c>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	6826      	ldr	r6, [r4, #0]
 8009918:	6961      	ldr	r1, [r4, #20]
 800991a:	1d18      	adds	r0, r3, #4
 800991c:	6028      	str	r0, [r5, #0]
 800991e:	0635      	lsls	r5, r6, #24
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	d501      	bpl.n	8009928 <_printf_i+0x1c4>
 8009924:	6019      	str	r1, [r3, #0]
 8009926:	e002      	b.n	800992e <_printf_i+0x1ca>
 8009928:	0670      	lsls	r0, r6, #25
 800992a:	d5fb      	bpl.n	8009924 <_printf_i+0x1c0>
 800992c:	8019      	strh	r1, [r3, #0]
 800992e:	2300      	movs	r3, #0
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	4615      	mov	r5, r2
 8009934:	e7bc      	b.n	80098b0 <_printf_i+0x14c>
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	602a      	str	r2, [r5, #0]
 800993c:	681d      	ldr	r5, [r3, #0]
 800993e:	6862      	ldr	r2, [r4, #4]
 8009940:	2100      	movs	r1, #0
 8009942:	4628      	mov	r0, r5
 8009944:	f7f6 fc44 	bl	80001d0 <memchr>
 8009948:	b108      	cbz	r0, 800994e <_printf_i+0x1ea>
 800994a:	1b40      	subs	r0, r0, r5
 800994c:	6060      	str	r0, [r4, #4]
 800994e:	6863      	ldr	r3, [r4, #4]
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	2300      	movs	r3, #0
 8009954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009958:	e7aa      	b.n	80098b0 <_printf_i+0x14c>
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	462a      	mov	r2, r5
 800995e:	4649      	mov	r1, r9
 8009960:	4640      	mov	r0, r8
 8009962:	47d0      	blx	sl
 8009964:	3001      	adds	r0, #1
 8009966:	d0ad      	beq.n	80098c4 <_printf_i+0x160>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	079b      	lsls	r3, r3, #30
 800996c:	d413      	bmi.n	8009996 <_printf_i+0x232>
 800996e:	68e0      	ldr	r0, [r4, #12]
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	4298      	cmp	r0, r3
 8009974:	bfb8      	it	lt
 8009976:	4618      	movlt	r0, r3
 8009978:	e7a6      	b.n	80098c8 <_printf_i+0x164>
 800997a:	2301      	movs	r3, #1
 800997c:	4632      	mov	r2, r6
 800997e:	4649      	mov	r1, r9
 8009980:	4640      	mov	r0, r8
 8009982:	47d0      	blx	sl
 8009984:	3001      	adds	r0, #1
 8009986:	d09d      	beq.n	80098c4 <_printf_i+0x160>
 8009988:	3501      	adds	r5, #1
 800998a:	68e3      	ldr	r3, [r4, #12]
 800998c:	9903      	ldr	r1, [sp, #12]
 800998e:	1a5b      	subs	r3, r3, r1
 8009990:	42ab      	cmp	r3, r5
 8009992:	dcf2      	bgt.n	800997a <_printf_i+0x216>
 8009994:	e7eb      	b.n	800996e <_printf_i+0x20a>
 8009996:	2500      	movs	r5, #0
 8009998:	f104 0619 	add.w	r6, r4, #25
 800999c:	e7f5      	b.n	800998a <_printf_i+0x226>
 800999e:	bf00      	nop
 80099a0:	08009abd 	.word	0x08009abd
 80099a4:	08009ace 	.word	0x08009ace

080099a8 <memmove>:
 80099a8:	4288      	cmp	r0, r1
 80099aa:	b510      	push	{r4, lr}
 80099ac:	eb01 0402 	add.w	r4, r1, r2
 80099b0:	d902      	bls.n	80099b8 <memmove+0x10>
 80099b2:	4284      	cmp	r4, r0
 80099b4:	4623      	mov	r3, r4
 80099b6:	d807      	bhi.n	80099c8 <memmove+0x20>
 80099b8:	1e43      	subs	r3, r0, #1
 80099ba:	42a1      	cmp	r1, r4
 80099bc:	d008      	beq.n	80099d0 <memmove+0x28>
 80099be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099c6:	e7f8      	b.n	80099ba <memmove+0x12>
 80099c8:	4402      	add	r2, r0
 80099ca:	4601      	mov	r1, r0
 80099cc:	428a      	cmp	r2, r1
 80099ce:	d100      	bne.n	80099d2 <memmove+0x2a>
 80099d0:	bd10      	pop	{r4, pc}
 80099d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099da:	e7f7      	b.n	80099cc <memmove+0x24>

080099dc <memcpy>:
 80099dc:	440a      	add	r2, r1
 80099de:	4291      	cmp	r1, r2
 80099e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	4770      	bx	lr
 80099e8:	b510      	push	{r4, lr}
 80099ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f2:	4291      	cmp	r1, r2
 80099f4:	d1f9      	bne.n	80099ea <memcpy+0xe>
 80099f6:	bd10      	pop	{r4, pc}

080099f8 <_realloc_r>:
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	4680      	mov	r8, r0
 80099fe:	4614      	mov	r4, r2
 8009a00:	460e      	mov	r6, r1
 8009a02:	b921      	cbnz	r1, 8009a0e <_realloc_r+0x16>
 8009a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4611      	mov	r1, r2
 8009a0a:	f7ff bba9 	b.w	8009160 <_malloc_r>
 8009a0e:	b92a      	cbnz	r2, 8009a1c <_realloc_r+0x24>
 8009a10:	f7ff fc96 	bl	8009340 <_free_r>
 8009a14:	4625      	mov	r5, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	f000 f81b 	bl	8009a56 <_malloc_usable_size_r>
 8009a20:	4284      	cmp	r4, r0
 8009a22:	4607      	mov	r7, r0
 8009a24:	d802      	bhi.n	8009a2c <_realloc_r+0x34>
 8009a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a2a:	d812      	bhi.n	8009a52 <_realloc_r+0x5a>
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4640      	mov	r0, r8
 8009a30:	f7ff fb96 	bl	8009160 <_malloc_r>
 8009a34:	4605      	mov	r5, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0ed      	beq.n	8009a16 <_realloc_r+0x1e>
 8009a3a:	42bc      	cmp	r4, r7
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4631      	mov	r1, r6
 8009a40:	bf28      	it	cs
 8009a42:	463a      	movcs	r2, r7
 8009a44:	f7ff ffca 	bl	80099dc <memcpy>
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff fc78 	bl	8009340 <_free_r>
 8009a50:	e7e1      	b.n	8009a16 <_realloc_r+0x1e>
 8009a52:	4635      	mov	r5, r6
 8009a54:	e7df      	b.n	8009a16 <_realloc_r+0x1e>

08009a56 <_malloc_usable_size_r>:
 8009a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5a:	1f18      	subs	r0, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bfbc      	itt	lt
 8009a60:	580b      	ldrlt	r3, [r1, r0]
 8009a62:	18c0      	addlt	r0, r0, r3
 8009a64:	4770      	bx	lr
	...

08009a68 <_init>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr

08009a74 <_fini>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	bf00      	nop
 8009a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7a:	bc08      	pop	{r3}
 8009a7c:	469e      	mov	lr, r3
 8009a7e:	4770      	bx	lr
