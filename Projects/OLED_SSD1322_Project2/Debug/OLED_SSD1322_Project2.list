
OLED_SSD1322_Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08009480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020264  2**0
                  CONTENTS
 10 .bss          00000a1c  20000264  20000264  00020264  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c80  20000c80  00020264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001571d  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b2c  00000000  00000000  000359f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d0  00000000  00000000  00039520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8c  00000000  00000000  0003a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002428f  00000000  00000000  0003b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018fb8  00000000  00000000  0005f70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbbe2  00000000  00000000  000786c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ccc  00000000  00000000  001442a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00148f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000264 	.word	0x20000264
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009424 	.word	0x08009424

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000268 	.word	0x20000268
 80001c4:	08009424 	.word	0x08009424

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <OLED_Command_12864RGB>:
		    {0x11,0x1f,0x04,0x00}, // }
		    {0x06,0x02,0x03,0x00} // ~
};

void OLED_Command_12864RGB(unsigned char c)        // send command to OLED
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_RESET); // Set CS_PIN LOW
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d4:	4815      	ldr	r0, [pc, #84]	; (800052c <OLED_Command_12864RGB+0x68>)
 80004d6:	f001 f9cb 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_RESET); // Set RS_PIN LOW
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <OLED_Command_12864RGB+0x6c>)
 80004e2:	f001 f9c5 	bl	8001870 <HAL_GPIO_WritePin>

				  HAL_SPI_Transmit(&hspi1, &c, 1, 200);
 80004e6:	1df9      	adds	r1, r7, #7
 80004e8:	23c8      	movs	r3, #200	; 0xc8
 80004ea:	2201      	movs	r2, #1
 80004ec:	4811      	ldr	r0, [pc, #68]	; (8000534 <OLED_Command_12864RGB+0x70>)
 80004ee:	f004 ff26 	bl	800533e <HAL_SPI_Transmit>
//					  HAL_GPIO_WritePin(GPIOC, D7_Pin,GPIO_PIN_SET);
//				  else
//					  HAL_GPIO_WritePin(GPIOC, D7_Pin, GPIO_PIN_RESET);


				  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET); // Set RW_PIN LOW
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <OLED_Command_12864RGB+0x6c>)
 80004fa:	f001 f9b9 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);    // Set E_PIN HIGH
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <OLED_Command_12864RGB+0x6c>)
 8000506:	f001 f9b3 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_RESET);  // Set E_PIN LOW
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <OLED_Command_12864RGB+0x6c>)
 8000512:	f001 f9ad 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET);   // Set CS_PIN HIGH
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <OLED_Command_12864RGB+0x68>)
 800051e:	f001 f9a7 	bl	8001870 <HAL_GPIO_WritePin>



}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40020400 	.word	0x40020400
 8000530:	40020c00 	.word	0x40020c00
 8000534:	2000031c 	.word	0x2000031c

08000538 <OLED_Data_12864RGB>:

void OLED_Data_12864RGB(unsigned char d)        // send data to OLED
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]

				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_RESET); // Set CS_PIN LOW
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4815      	ldr	r0, [pc, #84]	; (80005a0 <OLED_Data_12864RGB+0x68>)
 800054a:	f001 f991 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_SET); // Set RS_PIN
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <OLED_Data_12864RGB+0x6c>)
 8000556:	f001 f98b 	bl	8001870 <HAL_GPIO_WritePin>

				  HAL_SPI_Transmit(&hspi1, &d, 1, 200);
 800055a:	1df9      	adds	r1, r7, #7
 800055c:	23c8      	movs	r3, #200	; 0xc8
 800055e:	2201      	movs	r2, #1
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <OLED_Data_12864RGB+0x70>)
 8000562:	f004 feec 	bl	800533e <HAL_SPI_Transmit>
//					  HAL_GPIO_WritePin(GPIOC, D7_Pin, GPIO_PIN_RESET);




				  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET); // Set RW_PIN LOW
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <OLED_Data_12864RGB+0x6c>)
 800056e:	f001 f97f 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);  // Set E_PIN
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <OLED_Data_12864RGB+0x6c>)
 800057a:	f001 f979 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_RESET);  // Set E_PIN LOW
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <OLED_Data_12864RGB+0x6c>)
 8000586:	f001 f973 	bl	8001870 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET); // Set CS_PIN
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <OLED_Data_12864RGB+0x68>)
 8000592:	f001 f96d 	bl	8001870 <HAL_GPIO_WritePin>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020400 	.word	0x40020400
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	2000031c 	.word	0x2000031c

080005ac <OLED_SetColumnAddress_12864RGB>:

void OLED_SetColumnAddress_12864RGB(unsigned char x_start, unsigned char x_end)    // set column address start + end
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
   OLED_Command_12864RGB(0x15);
 80005bc:	2015      	movs	r0, #21
 80005be:	f7ff ff81 	bl	80004c4 <OLED_Command_12864RGB>
   OLED_Data_12864RGB(x_start);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ffb7 	bl	8000538 <OLED_Data_12864RGB>
   OLED_Data_12864RGB(x_end);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffb3 	bl	8000538 <OLED_Data_12864RGB>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <OLED_SetRowAddress_12864RGB>:

void OLED_SetRowAddress_12864RGB(unsigned char y_start, unsigned char y_end)    // set row address start + end
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	460a      	mov	r2, r1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	4613      	mov	r3, r2
 80005e8:	71bb      	strb	r3, [r7, #6]
   OLED_Command_12864RGB(0x75);
 80005ea:	2075      	movs	r0, #117	; 0x75
 80005ec:	f7ff ff6a 	bl	80004c4 <OLED_Command_12864RGB>
   OLED_Data_12864RGB(y_start);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffa0 	bl	8000538 <OLED_Data_12864RGB>
   OLED_Data_12864RGB(y_end);
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff9c 	bl	8000538 <OLED_Data_12864RGB>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <OLED_WriteMemoryStart_12864RGB>:

void OLED_WriteMemoryStart_12864RGB(void)    // write to RAM command
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    OLED_Command_12864RGB(0x5C);
 800060c:	205c      	movs	r0, #92	; 0x5c
 800060e:	f7ff ff59 	bl	80004c4 <OLED_Command_12864RGB>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <OLED_Pixel_12864RGB>:

void OLED_Pixel_12864RGB(unsigned long color)    // write one pixel of a given color
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
        OLED_Data_12864RGB((color>>16));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff87 	bl	8000538 <OLED_Data_12864RGB>
        OLED_Data_12864RGB((color>>8));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff81 	bl	8000538 <OLED_Data_12864RGB>
        OLED_Data_12864RGB(color);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff7c 	bl	8000538 <OLED_Data_12864RGB>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <OLED_FillScreen_12864RGB>:

void OLED_FillScreen_12864RGB(unsigned long color)    // fill screen with a given color
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
   unsigned int i,j;
   OLED_SetColumnAddress_12864RGB(0x00, 0x7F);
 8000650:	217f      	movs	r1, #127	; 0x7f
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ffaa 	bl	80005ac <OLED_SetColumnAddress_12864RGB>
   OLED_SetRowAddress_12864RGB(0x00, 0x40);
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ffbd 	bl	80005da <OLED_SetRowAddress_12864RGB>
   OLED_WriteMemoryStart_12864RGB();
 8000660:	f7ff ffd2 	bl	8000608 <OLED_WriteMemoryStart_12864RGB>
   for(i=0;i<64;i++)
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e00e      	b.n	8000688 <OLED_FillScreen_12864RGB+0x40>
   {
      for(j=0;j<128;j++)
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	e005      	b.n	800067c <OLED_FillScreen_12864RGB+0x34>
      {
    	  OLED_Pixel_12864RGB(color);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffd0 	bl	8000616 <OLED_Pixel_12864RGB>
      for(j=0;j<128;j++)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b7f      	cmp	r3, #127	; 0x7f
 8000680:	d9f6      	bls.n	8000670 <OLED_FillScreen_12864RGB+0x28>
   for(i=0;i<64;i++)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b3f      	cmp	r3, #63	; 0x3f
 800068c:	d9ed      	bls.n	800066a <OLED_FillScreen_12864RGB+0x22>
      }
   }
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <OLED_Text_12864RGB>:
/*===== LOW LEVEL FUNCTIONS =====*/
/*============= END =============*/
/*===============================*/

void OLED_Text_12864RGB(unsigned char x_pos, unsigned char y_pos, unsigned char letter, unsigned long textColor, unsigned long backgroundColor)  // function to show text
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	460b      	mov	r3, r1
 80006a6:	71bb      	strb	r3, [r7, #6]
 80006a8:	4613      	mov	r3, r2
 80006aa:	717b      	strb	r3, [r7, #5]
    int i;
    int count;
    unsigned char mask = 0x01;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]

    for(i=0;i<8;i++)     //each character is 8 px tall
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e033      	b.n	800071e <OLED_Text_12864RGB+0x86>
    {
        OLED_SetColumnAddress_12864RGB(x_pos, 0x77);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2177      	movs	r1, #119	; 0x77
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff76 	bl	80005ac <OLED_SetColumnAddress_12864RGB>
        OLED_SetRowAddress_12864RGB(y_pos, 0x7F);
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	217f      	movs	r1, #127	; 0x7f
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff88 	bl	80005da <OLED_SetRowAddress_12864RGB>
        OLED_WriteMemoryStart_12864RGB();
 80006ca:	f7ff ff9d 	bl	8000608 <OLED_WriteMemoryStart_12864RGB>
        for (count=0;count<5;count++)    //each character is 5px wide
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	e018      	b.n	8000706 <OLED_Text_12864RGB+0x6e>
        {
            if((Ascii_1[letter][count] & mask) == mask)
 80006d4:	797a      	ldrb	r2, [r7, #5]
 80006d6:	4916      	ldr	r1, [pc, #88]	; (8000730 <OLED_Text_12864RGB+0x98>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	18ca      	adds	r2, r1, r3
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	4413      	add	r3, r2
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	4013      	ands	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	7bfa      	ldrb	r2, [r7, #15]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d103      	bne.n	80006fa <OLED_Text_12864RGB+0x62>
                OLED_Pixel_12864RGB(textColor);
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f7ff ff8f 	bl	8000616 <OLED_Pixel_12864RGB>
 80006f8:	e002      	b.n	8000700 <OLED_Text_12864RGB+0x68>
            else
                OLED_Pixel_12864RGB(backgroundColor);
 80006fa:	6a38      	ldr	r0, [r7, #32]
 80006fc:	f7ff ff8b 	bl	8000616 <OLED_Pixel_12864RGB>
        for (count=0;count<5;count++)    //each character is 5px wide
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	2b04      	cmp	r3, #4
 800070a:	dde3      	ble.n	80006d4 <OLED_Text_12864RGB+0x3c>
        }
        y_pos++;
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	3301      	adds	r3, #1
 8000710:	71bb      	strb	r3, [r7, #6]
        mask = mask << 1;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
    for(i=0;i<8;i++)     //each character is 8 px tall
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	2b07      	cmp	r3, #7
 8000722:	ddc8      	ble.n	80006b6 <OLED_Text_12864RGB+0x1e>
   }
}void OLED_Text_4x6(unsigned char x_pos, unsigned char y_pos, unsigned char letter, unsigned long textColor, unsigned long backgroundColor)  // function to show text
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <printString>:
            mask = mask << 1;		//mask = mask >> 1;
        }
   }
}
int printString( char name[8], int xpos, int ypos)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	; 0x40
 8000738:	af02      	add	r7, sp, #8
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]

    int ascii_values[8] = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2220      	movs	r2, #32
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f008 fddb 	bl	8009304 <memset>
    for (int i = 0; name[i] != '\0'; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
 8000752:	e00d      	b.n	8000770 <printString+0x3c>
        ascii_values[i] = name[i];
 8000754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	3338      	adds	r3, #56	; 0x38
 8000764:	443b      	add	r3, r7
 8000766:	f843 2c28 	str.w	r2, [r3, #-40]
    for (int i = 0; name[i] != '\0'; i++) {
 800076a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076c:	3301      	adds	r3, #1
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1eb      	bne.n	8000754 <printString+0x20>
    }
	for(int i = 0;i < 10;i++)
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
 8000780:	e01b      	b.n	80007ba <printString+0x86>
	{
		OLED_Text_12864RGB(xpos+i*8, ypos, ascii_values[i]-32, WHITE, BLACK);
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	b2db      	uxtb	r3, r3
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2d8      	uxtb	r0, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	3338      	adds	r3, #56	; 0x38
 800079c:	443b      	add	r3, r7
 800079e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b20      	subs	r3, #32
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	2300      	movs	r3, #0
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80007b0:	f7ff ff72 	bl	8000698 <OLED_Text_12864RGB>
	for(int i = 0;i < 10;i++)
 80007b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b6:	3301      	adds	r3, #1
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	2b09      	cmp	r3, #9
 80007be:	dde0      	ble.n	8000782 <printString+0x4e>

	}
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <OLED_Init_12864RGB>:
/*********************************/

//void OLED_Init_12864RGB(void)      //OLED initialization

void OLED_Init_12864RGB(void)      //OLED initialization
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

 HAL_GPIO_WritePin(GPIOB, RES_Pin, GPIO_PIN_RESET); // Set RES_PIN LOW
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d6:	4845      	ldr	r0, [pc, #276]	; (80008ec <OLED_Init_12864RGB+0x120>)
 80007d8:	f001 f84a 	bl	8001870 <HAL_GPIO_WritePin>
 Delay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 f8ac 	bl	800093c <Delay>
 HAL_GPIO_WritePin(GPIOB, RES_Pin, GPIO_PIN_SET); // Set RES_PIN LOW
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ea:	4840      	ldr	r0, [pc, #256]	; (80008ec <OLED_Init_12864RGB+0x120>)
 80007ec:	f001 f840 	bl	8001870 <HAL_GPIO_WritePin>
 Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f000 f8a2 	bl	800093c <Delay>

    //Set_Sleep_Mode_12864(0xAF);                          // Display OFF
  OLED_Command_12864RGB(0xAF);
 80007f8:	20af      	movs	r0, #175	; 0xaf
 80007fa:	f7ff fe63 	bl	80004c4 <OLED_Command_12864RGB>
  //Set_Command_Lock_12864(0x12);                        // Unlock commands for OLED
  OLED_Command_12864RGB(0xFD);
 80007fe:	20fd      	movs	r0, #253	; 0xfd
 8000800:	f7ff fe60 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x12);
 8000804:	2012      	movs	r0, #18
 8000806:	f7ff fe97 	bl	8000538 <OLED_Data_12864RGB>
  //Set_Display_Clock__Oscillator_Frequency_12864(0x91); // Set Display Clock / Oscillator Frequency
  OLED_Command_12864RGB(0xB3);
 800080a:	20b3      	movs	r0, #179	; 0xb3
 800080c:	f7ff fe5a 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x91);
 8000810:	2091      	movs	r0, #145	; 0x91
 8000812:	f7ff fe91 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Multiplex_Ratio_12864(0x3F);                     // Set Multiplex Ratio
  OLED_Command_12864RGB(0xCA);
 8000816:	20ca      	movs	r0, #202	; 0xca
 8000818:	f7ff fe54 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x3F);
 800081c:	203f      	movs	r0, #63	; 0x3f
 800081e:	f7ff fe8b 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Display_Offset_12864(0x00);                      // Set Display Offset
  OLED_Command_12864RGB(0xA2);
 8000822:	20a2      	movs	r0, #162	; 0xa2
 8000824:	f7ff fe4e 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x40);
 8000828:	2040      	movs	r0, #64	; 0x40
 800082a:	f7ff fe85 	bl	8000538 <OLED_Data_12864RGB>

  //Function_Selection_12864(0x01);                      // Function Selection
  OLED_Command_12864RGB(0xAB);
 800082e:	20ab      	movs	r0, #171	; 0xab
 8000830:	f7ff fe48 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x01);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fe7f 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Display_Start_Line_12864(0x00);                  // Set Display Start Line
  OLED_Command_12864RGB(0xA1);
 800083a:	20a1      	movs	r0, #161	; 0xa1
 800083c:	f7ff fe42 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fe79 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Remap_12864(0x16, 0x11);                         // Set Remap. (A[1]) & (A[4]) can be adjusted to flip display orientation
  OLED_Command_12864RGB(0xA0);
 8000846:	20a0      	movs	r0, #160	; 0xa0
 8000848:	f7ff fe3c 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x16);
 800084c:	2016      	movs	r0, #22
 800084e:	f7ff fe73 	bl	8000538 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0x11);
 8000852:	2011      	movs	r0, #17
 8000854:	f7ff fe70 	bl	8000538 <OLED_Data_12864RGB>
  //Master_Contrast_Control_12864(0x0F);                 // Master Contrast Control
  OLED_Command_12864RGB(0xC7);
 8000858:	20c7      	movs	r0, #199	; 0xc7
 800085a:	f7ff fe33 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x0F);
 800085e:	200f      	movs	r0, #15
 8000860:	f7ff fe6a 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Contrast_Control_12864(0x9F);                    // Set Contrast Control
  OLED_Command_12864RGB(0xC1);
 8000864:	20c1      	movs	r0, #193	; 0xc1
 8000866:	f7ff fe2d 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x9F);
 800086a:	209f      	movs	r0, #159	; 0x9f
 800086c:	f7ff fe64 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Phase_Length_12864(0x72);
  OLED_Command_12864RGB(0xB1);
 8000870:	20b1      	movs	r0, #177	; 0xb1
 8000872:	f7ff fe27 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x72);
 8000876:	2072      	movs	r0, #114	; 0x72
 8000878:	f7ff fe5e 	bl	8000538 <OLED_Data_12864RGB>
  // Set Phase Length
  //Set_Precharge_Voltage_12864(0x1F);                   // Set Precharge Voltage
  OLED_Command_12864RGB(0xBB);
 800087c:	20bb      	movs	r0, #187	; 0xbb
 800087e:	f7ff fe21 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x1F);
 8000882:	201f      	movs	r0, #31
 8000884:	f7ff fe58 	bl	8000538 <OLED_Data_12864RGB>

  //Enable_External_VSL(0xA0, 0xFD);                     // Enable External VSL
  OLED_Command_12864RGB(0xB4);
 8000888:	20b4      	movs	r0, #180	; 0xb4
 800088a:	f7ff fe1b 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0xA0);
 800088e:	20a0      	movs	r0, #160	; 0xa0
 8000890:	f7ff fe52 	bl	8000538 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0xFD);
 8000894:	20fd      	movs	r0, #253	; 0xfd
 8000896:	f7ff fe4f 	bl	8000538 <OLED_Data_12864RGB>

  //Set_VCOMH_Voltage_12864(0x04);                       // Set VCOMH Voltage
  OLED_Command_12864RGB(0xBE);
 800089a:	20be      	movs	r0, #190	; 0xbe
 800089c:	f7ff fe12 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x04);
 80008a0:	2004      	movs	r0, #4
 80008a2:	f7ff fe49 	bl	8000538 <OLED_Data_12864RGB>

  //Display_Mode_12864(0xA6);                            // Set Normal Display
  OLED_Command_12864RGB(0xA6);
 80008a6:	20a6      	movs	r0, #166	; 0xa6
 80008a8:	f7ff fe0c 	bl	80004c4 <OLED_Command_12864RGB>

  //Exit_Partial_Display_12864();                        // Exit Partial Display Mode
  OLED_Command_12864RGB(0xA9);
 80008ac:	20a9      	movs	r0, #169	; 0xa9
 80008ae:	f7ff fe09 	bl	80004c4 <OLED_Command_12864RGB>
  //Display_Enhancement_12864(0xA2);         // Display Enhancement
  OLED_Command_12864RGB(0xD1);
 80008b2:	20d1      	movs	r0, #209	; 0xd1
 80008b4:	f7ff fe06 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0xA2);
 80008b8:	20a2      	movs	r0, #162	; 0xa2
 80008ba:	f7ff fe3d 	bl	8000538 <OLED_Data_12864RGB>
  OLED_Data_12864RGB(0x20);
 80008be:	2020      	movs	r0, #32
 80008c0:	f7ff fe3a 	bl	8000538 <OLED_Data_12864RGB>

  //Set_GPIO_12864(0x00);                    // Set GPIO
  OLED_Command_12864RGB(0xB5);
 80008c4:	20b5      	movs	r0, #181	; 0xb5
 80008c6:	f7ff fdfd 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x00);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fe34 	bl	8000538 <OLED_Data_12864RGB>

  //Default_Grayscale_Command_12864();       // Default Linear Grayscale Table
  OLED_Command_12864RGB(0xB9);
 80008d0:	20b9      	movs	r0, #185	; 0xb9
 80008d2:	f7ff fdf7 	bl	80004c4 <OLED_Command_12864RGB>
  //Set_Second_Precharge_Period_12864(0x08); // Set Second Precharge Period
  OLED_Command_12864RGB(0xB6);
 80008d6:	20b6      	movs	r0, #182	; 0xb6
 80008d8:	f7ff fdf4 	bl	80004c4 <OLED_Command_12864RGB>
  OLED_Data_12864RGB(0x08);
 80008dc:	2008      	movs	r0, #8
 80008de:	f7ff fe2b 	bl	8000538 <OLED_Data_12864RGB>

  //Set_Sleep_Mode_12864(0xAF); // Display ON
  OLED_Command_12864RGB(0xAF);
 80008e2:	20af      	movs	r0, #175	; 0xaf
 80008e4:	f7ff fdee 	bl	80004c4 <OLED_Command_12864RGB>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020400 	.word	0x40020400

080008f0 <setup>:
/*======= INITIALIZATION ========*/
/*============= END =============*/
/*===============================*/

void setup()                                       // for Arduino, runs first at power on
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0


	  HAL_GPIO_WritePin(GPIOB, CS_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <setup+0x44>)
 80008fc:	f000 ffb8 	bl	8001870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, BS0_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <setup+0x44>)
 8000908:	f000 ffb2 	bl	8001870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, BS1_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <setup+0x44>)
 8000914:	f000 ffac 	bl	8001870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, WR_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <setup+0x48>)
 8000920:	f000 ffa6 	bl	8001870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, RD_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <setup+0x48>)
 800092c:	f000 ffa0 	bl	8001870 <HAL_GPIO_WritePin>

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40020400 	.word	0x40020400
 8000938:	40020c00 	.word	0x40020c00

0800093c <Delay>:




void Delay(int miliseconds){
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	for (int i = miliseconds; i < miliseconds; i--){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e00d      	b.n	8000966 <Delay+0x2a>
		for (int j = 0; j > 24000; j++);
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	e002      	b.n	8000956 <Delay+0x1a>
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	3301      	adds	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800095c:	4293      	cmp	r3, r2
 800095e:	dcf7      	bgt.n	8000950 <Delay+0x14>
	for (int i = miliseconds; i < miliseconds; i--){
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3b01      	subs	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbed      	blt.n	800094a <Delay+0xe>
	}
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <loop>:
	}

}

void loop()                                        // main loop, runs after "setup()"
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
   OLED_Init_12864RGB();                           // initialize display
 8000980:	f7ff ff24 	bl	80007cc <OLED_Init_12864RGB>

   OLED_FillScreen_12864RGB(BLACK);                // fill screen with black
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fe5f 	bl	8000648 <OLED_FillScreen_12864RGB>
//   OLED_Text_12864RGB(44, 0, 53, WHITE, BLACK);   // U
//   OLED_Text_12864RGB(52, 0, 46, WHITE, BLACK);   // N
//   OLED_Text_12864RGB(60, 0, 52, WHITE, BLACK);   // T
//   OLED_Text_12864RGB(68, 0, 0, WHITE, BLACK);    //

   printString("FORBES", 28, 20);
 800098a:	2214      	movs	r2, #20
 800098c:	211c      	movs	r1, #28
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <loop+0x24>)
 8000990:	f7ff fed0 	bl	8000734 <printString>
  printString("MARSHALL", 28, 30);
 8000994:	221e      	movs	r2, #30
 8000996:	211c      	movs	r1, #28
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <loop+0x28>)
 800099a:	f7ff fecb 	bl	8000734 <printString>
  // ImageDisplay_12864(NHD_Logo);




   while(1)
 800099e:	e7fe      	b.n	800099e <loop+0x22>
 80009a0:	08009440 	.word	0x08009440
 80009a4:	08009448 	.word	0x08009448

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fc1c 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f812 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f000 f90e 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009b8:	f000 f878 	bl	8000aac <MX_I2C1_Init>
  MX_I2S3_Init();
 80009bc:	f000 f8a4 	bl	8000b08 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009c0:	f000 f8d2 	bl	8000b68 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009c4:	f008 f8d8 	bl	8008b78 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 80009c8:	f7ff ff92 	bl	80008f0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009cc:	f008 f8fa 	bl	8008bc4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    loop();
 80009d0:	f7ff ffd4 	bl	800097c <loop>
    MX_USB_HOST_Process();
 80009d4:	e7fa      	b.n	80009cc <main+0x24>
	...

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f008 fc8c 	bl	8009304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fe1e 	bl	80046a0 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a6a:	f000 f9d9 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000a80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f87f 	bl	8004b90 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a98:	f000 f9c2 	bl	8000e20 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ab2:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <MX_I2C1_Init+0x54>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x58>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_I2C1_Init+0x50>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_I2C1_Init+0x50>)
 8000aea:	f002 fff5 	bl	8003ad8 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 f994 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000280 	.word	0x20000280
 8000b00:	40005400 	.word	0x40005400
 8000b04:	000186a0 	.word	0x000186a0

08000b08 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <MX_I2S3_Init+0x58>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <MX_I2S3_Init+0x5c>)
 8000b32:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_I2S3_Init+0x54>)
 8000b48:	f003 f90a 	bl	8003d60 <HAL_I2S_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b52:	f000 f965 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002d4 	.word	0x200002d4
 8000b60:	40003c00 	.word	0x40003c00
 8000b64:	00017700 	.word	0x00017700

08000b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b6e:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <MX_SPI1_Init+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000bb4:	220a      	movs	r2, #10
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_SPI1_Init+0x64>)
 8000bba:	f004 fb37 	bl	800522c <HAL_SPI_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bc4:	f000 f92c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000031c 	.word	0x2000031c
 8000bd0:	40013000 	.word	0x40013000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	4b86      	ldr	r3, [pc, #536]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a85      	ldr	r2, [pc, #532]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b83      	ldr	r3, [pc, #524]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	4b7f      	ldr	r3, [pc, #508]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a7e      	ldr	r2, [pc, #504]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b78      	ldr	r3, [pc, #480]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a77      	ldr	r2, [pc, #476]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b75      	ldr	r3, [pc, #468]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a70      	ldr	r2, [pc, #448]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b6e      	ldr	r3, [pc, #440]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a69      	ldr	r2, [pc, #420]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a62      	ldr	r2, [pc, #392]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <MX_GPIO_Init+0x234>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2108      	movs	r1, #8
 8000c96:	485d      	ldr	r0, [pc, #372]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c98:	f000 fdea 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	485b      	ldr	r0, [pc, #364]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000ca2:	f000 fde5 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f640 3176 	movw	r1, #2934	; 0xb76
 8000cac:	4858      	ldr	r0, [pc, #352]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000cae:	f000 fddf 	bl	8001870 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BS0_Pin|BS1_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cb8:	4856      	ldr	r0, [pc, #344]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000cba:	f000 fdd9 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RES_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000cc4:	4853      	ldr	r0, [pc, #332]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000cc6:	f000 fdd3 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RD_GPIO_Port, RD_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	4851      	ldr	r0, [pc, #324]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000cd2:	f000 fdcd 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR_Pin|RS_Pin|LD4_Pin|LD3_Pin
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f24f 6110 	movw	r1, #62992	; 0xf610
 8000cdc:	484e      	ldr	r0, [pc, #312]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000cde:	f000 fdc7 	bl	8001870 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4844      	ldr	r0, [pc, #272]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000cfa:	f000 fc1d 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin D0_Pin D1_Pin D2_Pin
                           D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|D0_Pin|D1_Pin|D2_Pin
 8000cfe:	f640 3377 	movw	r3, #2935	; 0xb77
 8000d02:	61fb      	str	r3, [r7, #28]
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	483e      	ldr	r0, [pc, #248]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000d18:	f000 fc0e 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4836      	ldr	r0, [pc, #216]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000d38:	f000 fbfe 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x248>)
 8000d52:	f000 fbf1 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d56:	2304      	movs	r3, #4
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	482a      	ldr	r0, [pc, #168]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000d6a:	f000 fbe5 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d80:	2305      	movs	r3, #5
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000d8c:	f000 fbd4 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : BS0_Pin BS1_Pin CS_Pin RES_Pin */
  GPIO_InitStruct.Pin = BS0_Pin|BS1_Pin|CS_Pin|RES_Pin;
 8000d90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000daa:	f000 fbc5 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : RD_Pin WR_Pin RS_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RD_Pin|WR_Pin|RS_Pin|LD4_Pin
 8000dae:	f24f 7310 	movw	r3, #63248	; 0xf710
 8000db2:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4814      	ldr	r0, [pc, #80]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000dc8:	f000 fbb6 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000de0:	f000 fbaa 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000de8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000dfa:	f000 fb9d 	bl	8001538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	; 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40020000 	.word	0x40020000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f000 fb22 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_I2C_MspInit+0x84>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12c      	bne.n	8000ef8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000eba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <HAL_I2C_MspInit+0x8c>)
 8000ed8:	f000 fb2e 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <HAL_I2S_MspInit+0xf0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d15a      	bne.n	8000ff2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f40:	23c0      	movs	r3, #192	; 0xc0
 8000f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 f82b 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f58:	f7ff ff62 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <HAL_I2S_MspInit+0xf8>)
 8000fcc:	f000 fab4 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <HAL_I2S_MspInit+0xfc>)
 8000fee:	f000 faa3 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3738      	adds	r7, #56	; 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40003c00 	.word	0x40003c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020800 	.word	0x40020800

0800100c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_SPI_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_SPI_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001066:	23e0      	movs	r3, #224	; 0xe0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001076:	2305      	movs	r3, #5
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_SPI_MspInit+0x8c>)
 8001082:	f000 fa59 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40013000 	.word	0x40013000
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f8d0 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <OTG_FS_IRQHandler+0x10>)
 80010f6:	f000 feb5 	bl	8001e64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000758 	.word	0x20000758

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f008 f8fe 	bl	8009334 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20020000 	.word	0x20020000
 8001164:	00000400 	.word	0x00000400
 8001168:	20000374 	.word	0x20000374
 800116c:	20000c80 	.word	0x20000c80

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f008 f8bd 	bl	8009340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fbef 	bl	80009a8 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80011d8:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 80011dc:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80011e0:	20000c80 	.word	0x20000c80

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe06 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f967 	bl	800151e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001e8 	.word	0x200001e8
 8001284:	200001f0 	.word	0x200001f0
 8001288:	200001ec 	.word	0x200001ec

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200001f0 	.word	0x200001f0
 80012b0:	20000378 	.word	0x20000378

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000378 	.word	0x20000378

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001f0 	.word	0x200001f0

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e16b      	b.n	800182c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 815a 	bne.w	8001826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	2b02      	cmp	r3, #2
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80b4 	beq.w	8001826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <HAL_GPIO_Init+0x310>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x314>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x318>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x31c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x320>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x324>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x216>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_GPIO_Init+0x328>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x212>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x32c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_GPIO_Init+0x330>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x20a>
 800173e:	2307      	movs	r3, #7
 8001740:	e00e      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001742:	2308      	movs	r3, #8
 8001744:	e00c      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001746:	2306      	movs	r3, #6
 8001748:	e00a      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174a:	2305      	movs	r3, #5
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174e:	2304      	movs	r3, #4
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x310>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_GPIO_Init+0x334>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_GPIO_Init+0x334>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_GPIO_Init+0x334>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_GPIO_Init+0x334>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_GPIO_Init+0x334>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_GPIO_Init+0x334>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_GPIO_Init+0x334>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_GPIO_Init+0x334>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f ae90 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40013800 	.word	0x40013800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021000 	.word	0x40021000
 8001860:	40021400 	.word	0x40021400
 8001864:	40021800 	.word	0x40021800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af02      	add	r7, sp, #8
 80018a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e059      	b.n	8001968 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 f9b0 	bl	8008c34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e2:	d102      	bne.n	80018ea <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 ffb9 	bl	8005866 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7c1a      	ldrb	r2, [r3, #16]
 80018fc:	f88d 2000 	strb.w	r2, [sp]
 8001900:	3304      	adds	r3, #4
 8001902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001904:	f003 ff3a 	bl	800577c <USB_CoreInit>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e026      	b.n	8001968 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f003 ffb1 	bl	8005888 <USB_SetCurrentMode>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e017      	b.n	8001968 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7c1a      	ldrb	r2, [r3, #16]
 8001940:	f88d 2000 	strb.w	r2, [sp]
 8001944:	3304      	adds	r3, #4
 8001946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001948:	f004 f954 	bl	8005bf4 <USB_HostInit>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e004      	b.n	8001968 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af04      	add	r7, sp, #16
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	460b      	mov	r3, r1
 8001984:	70bb      	strb	r3, [r7, #2]
 8001986:	4613      	mov	r3, r2
 8001988:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800198a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800198c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_HCD_HC_Init+0x2c>
 8001998:	2302      	movs	r3, #2
 800199a:	e09d      	b.n	8001ad8 <HAL_HCD_HC_Init+0x168>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3319      	adds	r3, #25
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3314      	adds	r3, #20
 80019c8:	787a      	ldrb	r2, [r7, #1]
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3315      	adds	r3, #21
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3326      	adds	r3, #38	; 0x26
 80019f0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80019f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	78bb      	ldrb	r3, [r7, #2]
 80019fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fe:	b2d8      	uxtb	r0, r3
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3316      	adds	r3, #22
 8001a0e:	4602      	mov	r2, r0
 8001a10:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fbc8 	bl	80021ac <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001a1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da0a      	bge.n	8001a3a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3317      	adds	r3, #23
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e009      	b.n	8001a4e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3317      	adds	r3, #23
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 fa32 	bl	8005ebc <USB_GetHostSpeed>
 8001a58:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10b      	bne.n	8001a7a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_HCD_HC_Init+0x10a>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d104      	bne.n	8001a7a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2bbc      	cmp	r3, #188	; 0xbc
 8001a74:	d901      	bls.n	8001a7a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a76:	23bc      	movs	r3, #188	; 0xbc
 8001a78:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3318      	adds	r3, #24
 8001a8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	b298      	uxth	r0, r3
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3328      	adds	r3, #40	; 0x28
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	787c      	ldrb	r4, [r7, #1]
 8001ab2:	78ba      	ldrb	r2, [r7, #2]
 8001ab4:	78f9      	ldrb	r1, [r7, #3]
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	f004 fa21 	bl	8005f0c <USB_HC_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_HCD_HC_Halt+0x1e>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e00f      	b.n	8001b1e <HAL_HCD_HC_Halt+0x3e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fdb3 	bl	800667a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	70fb      	strb	r3, [r7, #3]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	70bb      	strb	r3, [r7, #2]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3317      	adds	r3, #23
 8001b52:	78ba      	ldrb	r2, [r7, #2]
 8001b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3326      	adds	r3, #38	; 0x26
 8001b66:	787a      	ldrb	r2, [r7, #1]
 8001b68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b6a:	7c3b      	ldrb	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d114      	bne.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332a      	adds	r3, #42	; 0x2a
 8001b80:	2203      	movs	r2, #3
 8001b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3319      	adds	r3, #25
 8001b94:	7f3a      	ldrb	r2, [r7, #28]
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e009      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	332a      	adds	r3, #42	; 0x2a
 8001baa:	2202      	movs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bae:	787b      	ldrb	r3, [r7, #1]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	f200 8102 	bhi.w	8001dba <HAL_HCD_HC_SubmitRequest+0x292>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001da5 	.word	0x08001da5
 8001bc4:	08001c91 	.word	0x08001c91
 8001bc8:	08001d1b 	.word	0x08001d1b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001bcc:	7c3b      	ldrb	r3, [r7, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	f040 80f5 	bne.w	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12d      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001bda:	8b3b      	ldrh	r3, [r7, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333d      	adds	r3, #61	; 0x3d
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	333d      	adds	r3, #61	; 0x3d
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10a      	bne.n	8001c20 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	332a      	adds	r3, #42	; 0x2a
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001c1e:	e0ce      	b.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	332a      	adds	r3, #42	; 0x2a
 8001c30:	2202      	movs	r2, #2
 8001c32:	701a      	strb	r2, [r3, #0]
      break;
 8001c34:	e0c3      	b.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	331a      	adds	r3, #26
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 80b8 	bne.w	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	333c      	adds	r3, #60	; 0x3c
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	332a      	adds	r3, #42	; 0x2a
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
      break;
 8001c78:	e0a1      	b.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	332a      	adds	r3, #42	; 0x2a
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]
      break;
 8001c8e:	e096      	b.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c90:	78bb      	ldrb	r3, [r7, #2]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d120      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	333d      	adds	r3, #61	; 0x3d
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10a      	bne.n	8001cc2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	332a      	adds	r3, #42	; 0x2a
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cc0:	e07e      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	332a      	adds	r3, #42	; 0x2a
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e073      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	333c      	adds	r3, #60	; 0x3c
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	332a      	adds	r3, #42	; 0x2a
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
      break;
 8001d02:	e05d      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	332a      	adds	r3, #42	; 0x2a
 8001d14:	2202      	movs	r2, #2
 8001d16:	701a      	strb	r2, [r3, #0]
      break;
 8001d18:	e052      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d1a:	78bb      	ldrb	r3, [r7, #2]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	333d      	adds	r3, #61	; 0x3d
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	332a      	adds	r3, #42	; 0x2a
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d4a:	e039      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	332a      	adds	r3, #42	; 0x2a
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]
      break;
 8001d60:	e02e      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	333c      	adds	r3, #60	; 0x3c
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	332a      	adds	r3, #42	; 0x2a
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
      break;
 8001d8c:	e018      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	332a      	adds	r3, #42	; 0x2a
 8001d9e:	2202      	movs	r2, #2
 8001da0:	701a      	strb	r2, [r3, #0]
      break;
 8001da2:	e00d      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	332a      	adds	r3, #42	; 0x2a
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
      break;
 8001db8:	e002      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001dbe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	332c      	adds	r3, #44	; 0x2c
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	8b39      	ldrh	r1, [r7, #24]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4403      	add	r3, r0
 8001de4:	3334      	adds	r3, #52	; 0x34
 8001de6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	334c      	adds	r3, #76	; 0x4c
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3315      	adds	r3, #21
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	334d      	adds	r3, #77	; 0x4d
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	3310      	adds	r3, #16
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	1d19      	adds	r1, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	799b      	ldrb	r3, [r3, #6]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f004 f986 	bl	8006164 <USB_HC_StartXfer>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fe7a 	bl	8005b74 <USB_GetMode>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80fb 	bne.w	800207e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fe3d 	bl	8005b0c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80f1 	beq.w	800207c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fe34 	bl	8005b0c <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eae:	d104      	bne.n	8001eba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fe24 	bl	8005b0c <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ece:	d104      	bne.n	8001eda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ed8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fe14 	bl	8005b0c <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eee:	d104      	bne.n	8001efa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ef8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fe04 	bl	8005b0c <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fdf6 	bl	8005b0c <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2a:	d120      	bne.n	8001f6e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d113      	bne.n	8001f6e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f46:	2110      	movs	r1, #16
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f003 fce9 	bl	8005920 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f4e:	6938      	ldr	r0, [r7, #16]
 8001f50:	f003 fd18 	bl	8005984 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7a5b      	ldrb	r3, [r3, #9]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d105      	bne.n	8001f68 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 ff0a 	bl	8005d7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f006 fee1 	bl	8008d30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fdca 	bl	8005b0c <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f82:	d102      	bne.n	8001f8a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f001 fd33 	bl	80039f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fdbc 	bl	8005b0c <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d106      	bne.n	8001fac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f006 feaa 	bl	8008cf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fdab 	bl	8005b0c <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fc0:	d139      	bne.n	8002036 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fb46 	bl	8006658 <USB_HC_ReadInterrupt>
 8001fcc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e025      	b.n	8002020 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ffe:	d106      	bne.n	800200e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f905 	bl	8002216 <HCD_HC_IN_IRQHandler>
 800200c:	e005      	b.n	800201a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 ff67 	bl	8002ee8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	461a      	mov	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4293      	cmp	r3, r2
 800202a:	d3d3      	bcc.n	8001fd4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fd66 	bl	8005b0c <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d101      	bne.n	800204e <HAL_HCD_IRQHandler+0x1ea>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_HCD_IRQHandler+0x1ec>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d014      	beq.n	800207e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0210 	bic.w	r2, r2, #16
 8002062:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f001 fbe4 	bl	8003832 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0210 	orr.w	r2, r2, #16
 8002078:	619a      	str	r2, [r3, #24]
 800207a:	e000      	b.n	800207e <HAL_HCD_IRQHandler+0x21a>
      return;
 800207c:	bf00      	nop
    }
  }
}
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_HCD_Start+0x16>
 8002096:	2302      	movs	r3, #2
 8002098:	e013      	b.n	80020c2 <HAL_HCD_Start+0x3e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fece 	bl	8005e4a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fbc6 	bl	8005844 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_HCD_Stop+0x16>
 80020dc:	2302      	movs	r3, #2
 80020de:	e00d      	b.n	80020fc <HAL_HCD_Stop+0x32>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 fc21 	bl	8006934 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fe70 	bl	8005df6 <USB_ResetPort>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	334c      	adds	r3, #76	; 0x4c
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3338      	adds	r3, #56	; 0x38
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f003 feb2 	bl	8005eea <USB_GetCurrentFrame>
 8002186:	4603      	mov	r3, r0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fe8d 	bl	8005ebc <USB_GetHostSpeed>
 80021a2:	4603      	mov	r3, r0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	331a      	adds	r3, #26
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	331b      	adds	r3, #27
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	3325      	adds	r3, #37	; 0x25
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3324      	adds	r3, #36	; 0x24
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fc7c 	bl	8005b32 <USB_ReadChInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11a      	bne.n	800227a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	2304      	movs	r3, #4
 8002254:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334d      	adds	r3, #77	; 0x4d
 8002266:	2207      	movs	r2, #7
 8002268:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fa01 	bl	800667a <USB_HC_Halt>
 8002278:	e09e      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fc55 	bl	8005b32 <USB_ReadChInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002292:	d11b      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	334d      	adds	r3, #77	; 0x4d
 80022b8:	2208      	movs	r2, #8
 80022ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f004 f9d8 	bl	800667a <USB_HC_Halt>
 80022ca:	e075      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fc2c 	bl	8005b32 <USB_ReadChInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11a      	bne.n	800231a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	334d      	adds	r3, #77	; 0x4d
 8002306:	2206      	movs	r2, #6
 8002308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f004 f9b1 	bl	800667a <USB_HC_Halt>
 8002318:	e04e      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fc05 	bl	8005b32 <USB_ReadChInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	d11b      	bne.n	800236c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334d      	adds	r3, #77	; 0x4d
 8002358:	2209      	movs	r2, #9
 800235a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f988 	bl	800667a <USB_HC_Halt>
 800236a:	e025      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fbdc 	bl	8005b32 <USB_ReadChInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d119      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	461a      	mov	r2, r3
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334d      	adds	r3, #77	; 0x4d
 80023a6:	2207      	movs	r2, #7
 80023a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 f961 	bl	800667a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fbb6 	bl	8005b32 <USB_ReadChInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	d112      	bne.n	80023f8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f94d 	bl	800667a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	f000 bd75 	b.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fb96 	bl	8005b32 <USB_ReadChInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	f040 8128 	bne.w	8002662 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	461a      	mov	r2, r3
 8002420:	2320      	movs	r3, #32
 8002422:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	331b      	adds	r3, #27
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d119      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	331b      	adds	r3, #27
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	0151      	lsls	r1, r2, #5
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	440a      	add	r2, r1
 8002464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	799b      	ldrb	r3, [r3, #6]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01b      	beq.n	80024ae <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3330      	adds	r3, #48	; 0x30
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	1ac9      	subs	r1, r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4403      	add	r3, r0
 80024aa:	3338      	adds	r3, #56	; 0x38
 80024ac:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	334d      	adds	r3, #77	; 0x4d
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3344      	adds	r3, #68	; 0x44
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3326      	adds	r3, #38	; 0x26
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3326      	adds	r3, #38	; 0x26
 800250e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002510:	2b02      	cmp	r3, #2
 8002512:	d110      	bne.n	8002536 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f8ac 	bl	800667a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	2310      	movs	r3, #16
 8002532:	6093      	str	r3, [r2, #8]
 8002534:	e03d      	b.n	80025b2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3326      	adds	r3, #38	; 0x26
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d00a      	beq.n	8002562 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3326      	adds	r3, #38	; 0x26
 800255c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800255e:	2b01      	cmp	r3, #1
 8002560:	d127      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	440a      	add	r2, r1
 8002578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002580:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334c      	adds	r3, #76	; 0x4c
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	334c      	adds	r3, #76	; 0x4c
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f006 fbcd 	bl	8008d4c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	799b      	ldrb	r3, [r3, #6]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d13b      	bne.n	8002632 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3338      	adds	r3, #56	; 0x38
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4403      	add	r3, r0
 80025da:	3328      	adds	r3, #40	; 0x28
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	440b      	add	r3, r1
 80025e0:	1e59      	subs	r1, r3, #1
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4403      	add	r3, r0
 80025f0:	3328      	adds	r3, #40	; 0x28
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8470 	beq.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	333c      	adds	r3, #60	; 0x3c
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2d8      	uxtb	r0, r3
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	4602      	mov	r2, r0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	f000 bc58 	b.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	333c      	adds	r3, #60	; 0x3c
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2d8      	uxtb	r0, r3
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	333c      	adds	r3, #60	; 0x3c
 800265a:	4602      	mov	r2, r0
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	f000 bc40 	b.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fa61 	bl	8005b32 <USB_ReadChInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d131      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2320      	movs	r3, #32
 800268a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	331a      	adds	r3, #26
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 841f 	bne.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	331b      	adds	r3, #27
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	; 0x4d
 80026c8:	2203      	movs	r2, #3
 80026ca:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 ffd0 	bl	800667a <USB_HC_Halt>
 80026da:	f000 bc02 	b.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fa23 	bl	8005b32 <USB_ReadChInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 8305 	bne.w	8002d02 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2302      	movs	r3, #2
 8002708:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	334d      	adds	r3, #77	; 0x4d
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d114      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	334d      	adds	r3, #77	; 0x4d
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334c      	adds	r3, #76	; 0x4c
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e2cc      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334d      	adds	r3, #77	; 0x4d
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d114      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334d      	adds	r3, #77	; 0x4d
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334c      	adds	r3, #76	; 0x4c
 8002784:	2205      	movs	r2, #5
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e2ac      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	334d      	adds	r3, #77	; 0x4d
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b07      	cmp	r3, #7
 800279e:	d00b      	beq.n	80027b8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334d      	adds	r3, #77	; 0x4d
 80027b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	f040 80a6 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334d      	adds	r3, #77	; 0x4d
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3344      	adds	r3, #68	; 0x44
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	1c59      	adds	r1, r3, #1
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4403      	add	r3, r0
 80027ec:	3344      	adds	r3, #68	; 0x44
 80027ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3344      	adds	r3, #68	; 0x44
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d943      	bls.n	800288e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3344      	adds	r3, #68	; 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	331a      	adds	r3, #26
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d123      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	331b      	adds	r3, #27
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	331c      	adds	r3, #28
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334c      	adds	r3, #76	; 0x4c
 8002888:	2204      	movs	r2, #4
 800288a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800288c:	e229      	b.n	8002ce2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	334c      	adds	r3, #76	; 0x4c
 800289e:	2202      	movs	r2, #2
 80028a0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3326      	adds	r3, #38	; 0x26
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3326      	adds	r3, #38	; 0x26
 80028c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	f040 8209 	bne.w	8002ce2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	461a      	mov	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002902:	e1ee      	b.n	8002ce2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334d      	adds	r3, #77	; 0x4d
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b05      	cmp	r3, #5
 8002918:	f040 80c8 	bne.w	8002aac <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	; 0x4d
 800292c:	2202      	movs	r2, #2
 800292e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	331b      	adds	r3, #27
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	f040 81ce 	bne.w	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3326      	adds	r3, #38	; 0x26
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d16b      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3348      	adds	r3, #72	; 0x48
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3348      	adds	r3, #72	; 0x48
 8002980:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3348      	adds	r3, #72	; 0x48
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d943      	bls.n	8002a20 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3348      	adds	r3, #72	; 0x48
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	331b      	adds	r3, #27
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3344      	adds	r3, #68	; 0x44
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d809      	bhi.n	80029ea <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	331c      	adds	r3, #28
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	0151      	lsls	r1, r2, #5
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	440a      	add	r2, r1
 8002a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	334c      	adds	r3, #76	; 0x4c
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e014      	b.n	8002a4a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334c      	adds	r3, #76	; 0x4c
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e009      	b.n	8002a4a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	334c      	adds	r3, #76	; 0x4c
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	; 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	; 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	f040 8136 	bne.w	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a8e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a96:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e11b      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334d      	adds	r3, #77	; 0x4d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	f040 8081 	bne.w	8002bc6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334d      	adds	r3, #77	; 0x4d
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	331b      	adds	r3, #27
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	f040 80fa 	bne.w	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334c      	adds	r3, #76	; 0x4c
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	0151      	lsls	r1, r2, #5
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	440a      	add	r2, r1
 8002b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	0151      	lsls	r1, r2, #5
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	440a      	add	r2, r1
 8002b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b42:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5e:	f023 0320 	bic.w	r3, r3, #32
 8002b62:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3326      	adds	r3, #38	; 0x26
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3326      	adds	r3, #38	; 0x26
 8002b8a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 80a9 	bne.w	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e08e      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	334d      	adds	r3, #77	; 0x4d
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d143      	bne.n	8002c64 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	; 0x4d
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334c      	adds	r3, #76	; 0x4c
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3326      	adds	r3, #38	; 0x26
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3326      	adds	r3, #38	; 0x26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d159      	bne.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c46:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e03f      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334d      	adds	r3, #77	; 0x4d
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d126      	bne.n	8002cc8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	334d      	adds	r3, #77	; 0x4d
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3344      	adds	r3, #68	; 0x44
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4403      	add	r3, r0
 8002cae:	3344      	adds	r3, #68	; 0x44
 8002cb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	334c      	adds	r3, #76	; 0x4c
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e00d      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	334d      	adds	r3, #77	; 0x4d
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f000 8100 	beq.w	8002ee0 <HCD_HC_IN_IRQHandler+0xcca>
 8002ce0:	e000      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ce2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	334c      	adds	r3, #76	; 0x4c
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f006 f826 	bl	8008d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d00:	e0ef      	b.n	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 ff11 	bl	8005b32 <USB_ReadChInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d12f      	bne.n	8002d7a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	; 0x4d
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	331a      	adds	r3, #26
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3344      	adds	r3, #68	; 0x44
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fc81 	bl	800667a <USB_HC_Halt>
 8002d78:	e0b3      	b.n	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fed5 	bl	8005b32 <USB_ReadChInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	f040 80a7 	bne.w	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3326      	adds	r3, #38	; 0x26
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d11b      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3344      	adds	r3, #68	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	334d      	adds	r3, #77	; 0x4d
 8002dce:	2204      	movs	r2, #4
 8002dd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fc4d 	bl	800667a <USB_HC_Halt>
 8002de0:	e03f      	b.n	8002e62 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3326      	adds	r3, #38	; 0x26
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3326      	adds	r3, #38	; 0x26
 8002e08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d129      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	799b      	ldrb	r3, [r3, #6]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	331b      	adds	r3, #27
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d110      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	334d      	adds	r3, #77	; 0x4d
 8002e50:	2204      	movs	r2, #4
 8002e52:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fc0c 	bl	800667a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	331b      	adds	r3, #27
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d129      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	331b      	adds	r3, #27
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	0151      	lsls	r1, r2, #5
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	440a      	add	r2, r1
 8002ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	0151      	lsls	r1, r2, #5
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	440a      	add	r2, r1
 8002ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec6:	f043 0320 	orr.w	r3, r3, #32
 8002eca:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2310      	movs	r3, #16
 8002edc:	6093      	str	r3, [r2, #8]
 8002ede:	e000      	b.n	8002ee2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002ee0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fe13 	bl	8005b32 <USB_ReadChInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d11b      	bne.n	8002f4e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2304      	movs	r3, #4
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	; 0x4d
 8002f38:	2207      	movs	r2, #7
 8002f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fb98 	bl	800667a <USB_HC_Halt>
 8002f4a:	f000 bc6f 	b.w	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 fdeb 	bl	8005b32 <USB_ReadChInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 8082 	bne.w	800306c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	2320      	movs	r3, #32
 8002f78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3319      	adds	r3, #25
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d124      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3319      	adds	r3, #25
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	; 0x4c
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334d      	adds	r3, #77	; 0x4d
 8002fc8:	2203      	movs	r2, #3
 8002fca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fb50 	bl	800667a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	331a      	adds	r3, #26
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 841d 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x944>
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	331b      	adds	r3, #27
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 8411 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3326      	adds	r3, #38	; 0x26
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d009      	beq.n	8003034 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	331b      	adds	r3, #27
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334d      	adds	r3, #77	; 0x4d
 8003044:	2203      	movs	r2, #3
 8003046:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fb12 	bl	800667a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3344      	adds	r3, #68	; 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e3df      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fd5c 	bl	8005b32 <USB_ReadChInterrupts>
 800307a:	4603      	mov	r3, r0
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d111      	bne.n	80030aa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	461a      	mov	r2, r3
 8003094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003098:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fae9 	bl	800667a <USB_HC_Halt>
 80030a8:	e3c0      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fd3d 	bl	8005b32 <USB_ReadChInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d168      	bne.n	8003194 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3344      	adds	r3, #68	; 0x44
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fd27 	bl	8005b32 <USB_ReadChInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d112      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3319      	adds	r3, #25
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2340      	movs	r3, #64	; 0x40
 8003112:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	331b      	adds	r3, #27
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331b      	adds	r3, #27
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	; 0x4d
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fa74 	bl	800667a <USB_HC_Halt>
 8003192:	e34b      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fcc8 	bl	8005b32 <USB_ReadChInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d139      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	; 0x4d
 80031bc:	2205      	movs	r2, #5
 80031be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	331a      	adds	r3, #26
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3319      	adds	r3, #25
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3344      	adds	r3, #68	; 0x44
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fa37 	bl	800667a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2340      	movs	r3, #64	; 0x40
 800321c:	6093      	str	r3, [r2, #8]
 800321e:	e305      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fc82 	bl	8005b32 <USB_ReadChInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11a      	bne.n	800326e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	2308      	movs	r3, #8
 8003248:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334d      	adds	r3, #77	; 0x4d
 800325a:	2206      	movs	r2, #6
 800325c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fa07 	bl	800667a <USB_HC_Halt>
 800326c:	e2de      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fc5b 	bl	8005b32 <USB_ReadChInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b10      	cmp	r3, #16
 8003284:	d144      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3344      	adds	r3, #68	; 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334d      	adds	r3, #77	; 0x4d
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3319      	adds	r3, #25
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d114      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3318      	adds	r3, #24
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3319      	adds	r3, #25
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f9bf 	bl	800667a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2310      	movs	r3, #16
 800330c:	6093      	str	r3, [r2, #8]
 800330e:	e28d      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fc0a 	bl	8005b32 <USB_ReadChInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d169      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	799b      	ldrb	r3, [r3, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334d      	adds	r3, #77	; 0x4d
 8003340:	2207      	movs	r2, #7
 8003342:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f994 	bl	800667a <USB_HC_Halt>
 8003352:	e049      	b.n	80033e8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3344      	adds	r3, #68	; 0x44
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	1c59      	adds	r1, r3, #1
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4403      	add	r3, r0
 8003374:	3344      	adds	r3, #68	; 0x44
 8003376:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3344      	adds	r3, #68	; 0x44
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d922      	bls.n	80033d4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3344      	adds	r3, #68	; 0x44
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	; 0x4c
 80033b2:	2204      	movs	r2, #4
 80033b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	334c      	adds	r3, #76	; 0x4c
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f005 fcbd 	bl	8008d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 80033d2:	e009      	b.n	80033e8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334c      	adds	r3, #76	; 0x4c
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	6093      	str	r3, [r2, #8]
 80033fa:	e217      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fb94 	bl	8005b32 <USB_ReadChInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d11b      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334d      	adds	r3, #77	; 0x4d
 8003426:	2209      	movs	r2, #9
 8003428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f003 f921 	bl	800667a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	e1ee      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fb6b 	bl	8005b32 <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	f040 81df 	bne.w	8003826 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	2302      	movs	r3, #2
 8003478:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	; 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 8093 	bne.w	80035b8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334d      	adds	r3, #77	; 0x4d
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334c      	adds	r3, #76	; 0x4c
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3326      	adds	r3, #38	; 0x26
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d00b      	beq.n	80034e8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3326      	adds	r3, #38	; 0x26
 80034e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	f040 8190 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	799b      	ldrb	r3, [r3, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333d      	adds	r3, #61	; 0x3d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	f083 0301 	eor.w	r3, r3, #1
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	333d      	adds	r3, #61	; 0x3d
 8003518:	4602      	mov	r2, r0
 800351a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	799b      	ldrb	r3, [r3, #6]
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 8171 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3334      	adds	r3, #52	; 0x34
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8165 	beq.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3334      	adds	r3, #52	; 0x34
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	3328      	adds	r3, #40	; 0x28
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	440b      	add	r3, r1
 8003564:	1e59      	subs	r1, r3, #1
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	3328      	adds	r3, #40	; 0x28
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	fbb1 f3f3 	udiv	r3, r1, r3
 800357c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 813f 	beq.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	333d      	adds	r3, #61	; 0x3d
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	333d      	adds	r3, #61	; 0x3d
 80035b2:	4602      	mov	r2, r0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e127      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	; 0x4d
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d120      	bne.n	8003610 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	334d      	adds	r3, #77	; 0x4d
 80035de:	2202      	movs	r2, #2
 80035e0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331b      	adds	r3, #27
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 8107 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	; 0x4c
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e0fb      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	334d      	adds	r3, #77	; 0x4d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b04      	cmp	r3, #4
 8003624:	d13a      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334d      	adds	r3, #77	; 0x4d
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334c      	adds	r3, #76	; 0x4c
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	331b      	adds	r3, #27
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 80d1 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	331b      	adds	r3, #27
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	440a      	add	r2, r1
 8003690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003698:	6053      	str	r3, [r2, #4]
 800369a:	e0b5      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334d      	adds	r3, #77	; 0x4d
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d114      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334d      	adds	r3, #77	; 0x4d
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	334c      	adds	r3, #76	; 0x4c
 80036d6:	2202      	movs	r2, #2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e095      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	334d      	adds	r3, #77	; 0x4d
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d114      	bne.n	800371c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	; 0x4d
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	; 0x4c
 8003716:	2205      	movs	r2, #5
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e075      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	; 0x4d
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b07      	cmp	r3, #7
 8003730:	d00a      	beq.n	8003748 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334d      	adds	r3, #77	; 0x4d
 8003742:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003744:	2b09      	cmp	r3, #9
 8003746:	d170      	bne.n	800382a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	; 0x4d
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3344      	adds	r3, #68	; 0x44
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4403      	add	r3, r0
 800377c:	3344      	adds	r3, #68	; 0x44
 800377e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	3344      	adds	r3, #68	; 0x44
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d914      	bls.n	80037c0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3344      	adds	r3, #68	; 0x44
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	334c      	adds	r3, #76	; 0x4c
 80037ba:	2204      	movs	r2, #4
 80037bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037be:	e022      	b.n	8003806 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	; 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003806:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	334c      	adds	r3, #76	; 0x4c
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f005 fa94 	bl	8008d4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003824:	e002      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800382a:	bf00      	nop
  }
}
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b08a      	sub	sp, #40	; 0x28
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	0c5b      	lsrs	r3, r3, #17
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003866:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d004      	beq.n	8003878 <HCD_RXQLVL_IRQHandler+0x46>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b05      	cmp	r3, #5
 8003872:	f000 80b6 	beq.w	80039e2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003876:	e0b7      	b.n	80039e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80b3 	beq.w	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	332c      	adds	r3, #44	; 0x2c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80a7 	beq.w	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3338      	adds	r3, #56	; 0x38
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	18d1      	adds	r1, r2, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4403      	add	r3, r0
 80038bc:	3334      	adds	r3, #52	; 0x34
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	f200 8083 	bhi.w	80039cc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	332c      	adds	r3, #44	; 0x2c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	b292      	uxth	r2, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	f002 f8bb 	bl	8005a5c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	332c      	adds	r3, #44	; 0x2c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	18d1      	adds	r1, r2, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	332c      	adds	r3, #44	; 0x2c
 800390c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3338      	adds	r3, #56	; 0x38
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	18d1      	adds	r1, r2, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4403      	add	r3, r0
 8003932:	3338      	adds	r3, #56	; 0x38
 8003934:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	0cdb      	lsrs	r3, r3, #19
 8003946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4293      	cmp	r3, r2
 8003964:	d13f      	bne.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d03c      	beq.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003982:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800398a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	333c      	adds	r3, #60	; 0x3c
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f083 0301 	eor.w	r3, r3, #1
 80039b4:	b2d8      	uxtb	r0, r3
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	333c      	adds	r3, #60	; 0x3c
 80039c6:	4602      	mov	r2, r0
 80039c8:	701a      	strb	r2, [r3, #0]
      break;
 80039ca:	e00c      	b.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	; 0x4c
 80039dc:	2204      	movs	r2, #4
 80039de:	701a      	strb	r2, [r3, #0]
      break;
 80039e0:	e001      	b.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039e6:	bf00      	nop
  }
}
 80039e8:	bf00      	nop
 80039ea:	3728      	adds	r7, #40	; 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d10b      	bne.n	8003a40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f005 f96e 	bl	8008d14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d132      	bne.n	8003ab0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0308 	orr.w	r3, r3, #8
 8003a50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d126      	bne.n	8003aaa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7a5b      	ldrb	r3, [r3, #9]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d113      	bne.n	8003a8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6e:	d106      	bne.n	8003a7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 f980 	bl	8005d7c <USB_InitFSLSPClkSel>
 8003a7c:	e011      	b.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f979 	bl	8005d7c <USB_InitFSLSPClkSel>
 8003a8a:	e00a      	b.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	79db      	ldrb	r3, [r3, #7]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003aa0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f005 f960 	bl	8008d68 <HAL_HCD_PortEnabled_Callback>
 8003aa8:	e002      	b.n	8003ab0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f005 f96a 	bl	8008d84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d103      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e12b      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f9bc 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f001 fa20 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a81      	ldr	r2, [pc, #516]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d807      	bhi.n	8003b5c <HAL_I2C_Init+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a80      	ldr	r2, [pc, #512]	; (8003d50 <HAL_I2C_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e006      	b.n	8003b6a <HAL_I2C_Init+0x92>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a7d      	ldr	r2, [pc, #500]	; (8003d54 <HAL_I2C_Init+0x27c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0e7      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a78      	ldr	r2, [pc, #480]	; (8003d58 <HAL_I2C_Init+0x280>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d802      	bhi.n	8003bac <HAL_I2C_Init+0xd4>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <HAL_I2C_Init+0xe8>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <HAL_I2C_Init+0x284>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	495c      	ldr	r1, [pc, #368]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d819      	bhi.n	8003c14 <HAL_I2C_Init+0x13c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e59      	subs	r1, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_I2C_Init+0x138>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e59      	subs	r1, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	e051      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c10:	2304      	movs	r3, #4
 8003c12:	e04f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_I2C_Init+0x168>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e012      	b.n	8003c66 <HAL_I2C_Init+0x18e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Init+0x196>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <HAL_I2C_Init+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1e58      	subs	r0, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	440b      	add	r3, r1
 8003c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	6809      	ldr	r1, [r1, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6911      	ldr	r1, [r2, #16]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	000186a0 	.word	0x000186a0
 8003d50:	001e847f 	.word	0x001e847f
 8003d54:	003d08ff 	.word	0x003d08ff
 8003d58:	431bde83 	.word	0x431bde83
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e128      	b.n	8003fc4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a90      	ldr	r2, [pc, #576]	; (8003fcc <HAL_I2S_Init+0x26c>)
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd f8bd 	bl	8000f0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003da8:	f023 030f 	bic.w	r3, r3, #15
 8003dac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2202      	movs	r2, #2
 8003db4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d060      	beq.n	8003e80 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d802      	bhi.n	8003dde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f001 f9c4 	bl	800516c <HAL_RCCEx_GetPeriphCLKFreq>
 8003de4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dee:	d125      	bne.n	8003e3c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d010      	beq.n	8003e1a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	3305      	adds	r3, #5
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e01f      	b.n	8003e5a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	3305      	adds	r3, #5
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e00e      	b.n	8003e5a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	3305      	adds	r3, #5
 8003e58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a5c      	ldr	r2, [pc, #368]	; (8003fd0 <HAL_I2S_Init+0x270>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e003      	b.n	8003e88 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e80:	2302      	movs	r3, #2
 8003e82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d902      	bls.n	8003e94 <HAL_I2S_Init+0x134>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2bff      	cmp	r3, #255	; 0xff
 8003e92:	d907      	bls.n	8003ea4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0210 	orr.w	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e08f      	b.n	8003fc4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ec2:	f023 030f 	bic.w	r3, r3, #15
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6851      	ldr	r1, [r2, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68d2      	ldr	r2, [r2, #12]
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6992      	ldr	r2, [r2, #24]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d161      	bne.n	8003fb4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <HAL_I2S_Init+0x274>)
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <HAL_I2S_Init+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2S_Init+0x1a4>
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_I2S_Init+0x27c>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2S_Init+0x1a8>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4932      	ldr	r1, [pc, #200]	; (8003fd8 <HAL_I2S_Init+0x278>)
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2S_Init+0x1b8>
 8003f14:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <HAL_I2S_Init+0x27c>)
 8003f16:	e001      	b.n	8003f1c <HAL_I2S_Init+0x1bc>
 8003f18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f20:	f023 030f 	bic.w	r3, r3, #15
 8003f24:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <HAL_I2S_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_I2S_Init+0x1d4>
 8003f30:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <HAL_I2S_Init+0x27c>)
 8003f32:	e001      	b.n	8003f38 <HAL_I2S_Init+0x1d8>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f38:	2202      	movs	r2, #2
 8003f3a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a25      	ldr	r2, [pc, #148]	; (8003fd8 <HAL_I2S_Init+0x278>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2S_Init+0x1ea>
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_I2S_Init+0x27c>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2S_Init+0x1ee>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5a:	d003      	beq.n	8003f64 <HAL_I2S_Init+0x204>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e001      	b.n	8003f70 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f9c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <HAL_I2S_Init+0x278>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_I2S_Init+0x24c>
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_I2S_Init+0x27c>)
 8003faa:	e001      	b.n	8003fb0 <HAL_I2S_Init+0x250>
 8003fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb0:	897a      	ldrh	r2, [r7, #10]
 8003fb2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	080040d7 	.word	0x080040d7
 8003fd0:	cccccccd 	.word	0xcccccccd
 8003fd4:	080041ed 	.word	0x080041ed
 8003fd8:	40003800 	.word	0x40003800
 8003fdc:	40003400 	.word	0x40003400

08003fe0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004060:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffb8 	bl	8003fe0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff93 	bl	8003ff4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d13a      	bne.n	8004168 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d109      	bne.n	8004110 <I2S_IRQHandler+0x3a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d102      	bne.n	8004110 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ffb4 	bl	8004078 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d126      	bne.n	8004168 <I2S_IRQHandler+0x92>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d11f      	bne.n	8004168 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004136:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f043 0202 	orr.w	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff50 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d136      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d109      	bne.n	8004192 <I2S_IRQHandler+0xbc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d102      	bne.n	8004192 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff45 	bl	800401c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d122      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d11b      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff13 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a92      	ldr	r2, [pc, #584]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004206:	4b92      	ldr	r3, [pc, #584]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004208:	e001      	b.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800420a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a8b      	ldr	r2, [pc, #556]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004224:	4b8a      	ldr	r3, [pc, #552]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004226:	e001      	b.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d004      	beq.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8099 	bne.w	8004376 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d107      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f925 	bl	80044a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9c8 	bl	8004608 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d13a      	bne.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d035      	beq.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6e      	ldr	r2, [pc, #440]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004296:	4b6e      	ldr	r3, [pc, #440]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004298:	e001      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4969      	ldr	r1, [pc, #420]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a6:	428b      	cmp	r3, r1
 80042a8:	d101      	bne.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042aa:	4b69      	ldr	r3, [pc, #420]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ac:	e001      	b.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe88 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b08      	cmp	r3, #8
 8004300:	f040 80c3 	bne.w	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80bd 	beq.w	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800431e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a49      	ldr	r2, [pc, #292]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800432a:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800432c:	e001      	b.n	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800432e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4944      	ldr	r1, [pc, #272]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433a:	428b      	cmp	r3, r1
 800433c:	d101      	bne.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800433e:	4b44      	ldr	r3, [pc, #272]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004340:	e001      	b.n	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004346:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800434a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe4a 	bl	8004008 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004374:	e089      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d107      	bne.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8be 	bl	800450c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8fd 	bl	80045a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d12f      	bne.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02a      	beq.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043da:	e001      	b.n	80043e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4919      	ldr	r1, [pc, #100]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d101      	bne.n	80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ee:	e001      	b.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0202 	orr.w	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fdfa 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d136      	bne.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d031      	beq.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004434:	e001      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4902      	ldr	r1, [pc, #8]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004442:	428b      	cmp	r3, r1
 8004444:	d106      	bne.n	8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004446:	4b02      	ldr	r3, [pc, #8]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004448:	e006      	b.n	8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800444a:	bf00      	nop
 800444c:	40003800 	.word	0x40003800
 8004450:	40003400 	.word	0x40003400
 8004454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004458:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800445c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fdc0 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	e000      	b.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800448a:	bf00      	nop
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c99      	adds	r1, r3, #2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6251      	str	r1, [r2, #36]	; 0x24
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d113      	bne.n	8004502 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ffc9 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	1c99      	adds	r1, r3, #2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6251      	str	r1, [r2, #36]	; 0x24
 800451e:	8819      	ldrh	r1, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <I2SEx_TxISR_I2SExt+0x22>
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800452c:	e001      	b.n	8004532 <I2SEx_TxISR_I2SExt+0x26>
 800452e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004532:	460a      	mov	r2, r1
 8004534:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d121      	bne.n	8004592 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <I2SEx_TxISR_I2SExt+0x50>
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800455a:	e001      	b.n	8004560 <I2SEx_TxISR_I2SExt+0x54>
 800455c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	490d      	ldr	r1, [pc, #52]	; (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d101      	bne.n	8004570 <I2SEx_TxISR_I2SExt+0x64>
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800456e:	e001      	b.n	8004574 <I2SEx_TxISR_I2SExt+0x68>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004578:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff81 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40003800 	.word	0x40003800
 80045a0:	40003400 	.word	0x40003400

080045a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68d8      	ldr	r0, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	1c99      	adds	r1, r3, #2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045bc:	b282      	uxth	r2, r0
 80045be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d113      	bne.n	8004600 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff4a 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <I2SEx_RxISR_I2SExt+0x16>
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <I2SEx_RxISR_I2SExt+0x94>)
 800461c:	e001      	b.n	8004622 <I2SEx_RxISR_I2SExt+0x1a>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004622:	68d8      	ldr	r0, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	1c99      	adds	r1, r3, #2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800462e:	b282      	uxth	r2, r0
 8004630:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d121      	bne.n	800468e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <I2SEx_RxISR_I2SExt+0x50>
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <I2SEx_RxISR_I2SExt+0x94>)
 8004656:	e001      	b.n	800465c <I2SEx_RxISR_I2SExt+0x54>
 8004658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	490d      	ldr	r1, [pc, #52]	; (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004664:	428b      	cmp	r3, r1
 8004666:	d101      	bne.n	800466c <I2SEx_RxISR_I2SExt+0x64>
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <I2SEx_RxISR_I2SExt+0x94>)
 800466a:	e001      	b.n	8004670 <I2SEx_RxISR_I2SExt+0x68>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004674:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff03 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40003800 	.word	0x40003800
 800469c:	40003400 	.word	0x40003400

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e267      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d075      	beq.n	80047aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00c      	beq.n	80046e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d112      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d6:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e2:	d10b      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05b      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e242      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x74>
 8004706:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6f      	ldr	r2, [pc, #444]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6c      	ldr	r2, [pc, #432]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fc fdac 	bl	80012b4 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7fc fda8 	bl	80012b4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e207      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xc0>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fc fd98 	bl	80012b4 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004788:	f7fc fd94 	bl	80012b4 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1f3      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1c7      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4937      	ldr	r1, [pc, #220]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	e03a      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fc fd4d 	bl	80012b4 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fc fd49 	bl	80012b4 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1a8      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4925      	ldr	r1, [pc, #148]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fc fd2c 	bl	80012b4 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004860:	f7fc fd28 	bl	80012b4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e187      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_RCC_OscConfig+0x248>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fc fd0c 	bl	80012b4 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fc fd08 	bl	80012b4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e167      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x200>
 80048be:	e01b      	b.n	80048f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_OscConfig+0x248>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fcf5 	bl	80012b4 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	e00e      	b.n	80048ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fc fcf1 	bl	80012b4 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d907      	bls.n	80048ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e150      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470000 	.word	0x42470000
 80048e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ea      	bne.n	80048ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8097 	beq.w	8004a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	4b7d      	ldr	r3, [pc, #500]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a7c      	ldr	r2, [pc, #496]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b7a      	ldr	r3, [pc, #488]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b77      	ldr	r3, [pc, #476]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b74      	ldr	r3, [pc, #464]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fc fcb1 	bl	80012b4 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004956:	f7fc fcad 	bl	80012b4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e10c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_RCC_OscConfig+0x2ea>
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a63      	ldr	r2, [pc, #396]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	e01c      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x30c>
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a5e      	ldr	r2, [pc, #376]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a5b      	ldr	r2, [pc, #364]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 80049ac:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a57      	ldr	r2, [pc, #348]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
 80049b8:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a54      	ldr	r2, [pc, #336]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fc fc72 	bl	80012b4 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fc fc6e 	bl	80012b4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0cb      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ee      	beq.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f8:	f7fc fc5c 	bl	80012b4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fc fc58 	bl	80012b4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0b5      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ee      	bne.n	8004a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a1 	beq.w	8004b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3e:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d05c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d141      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fc fc2c 	bl	80012b4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc fc28 	bl	80012b4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e087      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	491b      	ldr	r1, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fc fc01 	bl	80012b4 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fc fbfd 	bl	80012b4 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e05c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x416>
 8004ad4:	e054      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fc fbea 	bl	80012b4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fc fbe6 	bl	80012b4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e045      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
 8004b02:	e03d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e038      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x4ec>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d028      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d121      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0cc      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90c      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a58      	ldr	r2, [pc, #352]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d044      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e067      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4934      	ldr	r1, [pc, #208]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c80:	f7fc fb18 	bl	80012b4 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fc fb14 	bl	80012b4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e04f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20c      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f821 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fa78 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	08009458 	.word	0x08009458
 8004d54:	200001e8 	.word	0x200001e8
 8004d58:	200001ec 	.word	0x200001ec

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b094      	sub	sp, #80	; 0x50
 8004d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	; 0x44
 8004d68:	2300      	movs	r3, #0
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d74:	4b79      	ldr	r3, [pc, #484]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x40>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	f200 80e1 	bhi.w	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8e:	e0db      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d94:	e0db      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d96:	4b73      	ldr	r3, [pc, #460]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d9a:	e0d8      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b6a      	ldr	r3, [pc, #424]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dce:	4622      	mov	r2, r4
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de0:	0150      	lsls	r0, r2, #5
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4621      	mov	r1, r4
 8004de8:	1a51      	subs	r1, r2, r1
 8004dea:	6139      	str	r1, [r7, #16]
 8004dec:	4629      	mov	r1, r5
 8004dee:	eb63 0301 	sbc.w	r3, r3, r1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e00:	4659      	mov	r1, fp
 8004e02:	018b      	lsls	r3, r1, #6
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	018a      	lsls	r2, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ebb2 0801 	subs.w	r8, r2, r1
 8004e14:	4659      	mov	r1, fp
 8004e16:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	eb49 0303 	adc.w	r3, r9, r3
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	024b      	lsls	r3, r1, #9
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e58:	4621      	mov	r1, r4
 8004e5a:	024a      	lsls	r2, r1, #9
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	2200      	movs	r2, #0
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e6c:	f7fb f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e78:	e058      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	2200      	movs	r2, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	4611      	mov	r1, r2
 8004e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea6:	0150      	lsls	r0, r2, #5
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4641      	mov	r1, r8
 8004eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb45 0303 	adc.w	r3, r5, r3
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f02:	4629      	mov	r1, r5
 8004f04:	028b      	lsls	r3, r1, #10
 8004f06:	4621      	mov	r1, r4
 8004f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	028a      	lsls	r2, r1, #10
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	2200      	movs	r2, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	61fa      	str	r2, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	f7fb f952 	bl	80001c8 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3750      	adds	r7, #80	; 0x50
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	007a1200 	.word	0x007a1200

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200001e8 	.word	0x200001e8

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	08009468 	.word	0x08009468

08004fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d035      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd0:	4b62      	ldr	r3, [pc, #392]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd6:	f7fc f96d 	bl	80012b4 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fde:	f7fc f969 	bl	80012b4 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e0b0      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff0:	4b5b      	ldr	r3, [pc, #364]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	019a      	lsls	r2, r3, #6
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4955      	ldr	r1, [pc, #340]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005010:	4b52      	ldr	r3, [pc, #328]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fc f94d 	bl	80012b4 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fc f949 	bl	80012b4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e090      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8083 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4b44      	ldr	r3, [pc, #272]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a43      	ldr	r2, [pc, #268]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005070:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc f91f 	bl	80012b4 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800507a:	f7fc f91b 	bl	80012b4 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e062      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800508c:	4b35      	ldr	r3, [pc, #212]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005098:	4b31      	ldr	r3, [pc, #196]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02f      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d028      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050d2:	4b23      	ldr	r3, [pc, #140]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d114      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050de:	f7fc f8e9 	bl	80012b4 <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e4:	e00a      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc f8e5 	bl	80012b4 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e02a      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ee      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d10d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512a:	490d      	ldr	r1, [pc, #52]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005138:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800513c:	6093      	str	r3, [r2, #8]
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	4905      	ldr	r1, [pc, #20]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800514c:	4313      	orrs	r3, r2
 800514e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	42470068 	.word	0x42470068
 8005160:	40023800 	.word	0x40023800
 8005164:	40007000 	.word	0x40007000
 8005168:	42470e40 	.word	0x42470e40

0800516c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d13f      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a0:	d12f      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051a4:	617b      	str	r3, [r7, #20]
          break;
 80051a6:	e02f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051a8:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b4:	d108      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051b6:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e007      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	0f1b      	lsrs	r3, r3, #28
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
          break;
 8005200:	e002      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
          break;
 8005206:	bf00      	nop
        }
      }
      break;
 8005208:	e000      	b.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800520a:	bf00      	nop
    }
  }
  return frequency;
 800520c:	697b      	ldr	r3, [r7, #20]
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	00bb8000 	.word	0x00bb8000
 8005224:	007a1200 	.word	0x007a1200
 8005228:	00f42400 	.word	0x00f42400

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07b      	b.n	8005336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fec4 	bl	800100c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0104 	and.w	r1, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0210 	and.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_SPI_Transmit+0x22>
 800535c:	2302      	movs	r3, #2
 800535e:	e12d      	b.n	80055bc <HAL_SPI_Transmit+0x27e>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005368:	f7fb ffa4 	bl	80012b4 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005382:	e116      	b.n	80055b2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0x52>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005394:	e10d      	b.n	80055b2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d10f      	bne.n	80053fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d14f      	bne.n	80054c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0xf6>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d142      	bne.n	80054ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005458:	e02f      	b.n	80054ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	86da      	strh	r2, [r3, #54]	; 0x36
 800548c:	e015      	b.n	80054ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fb ff11 	bl	80012b4 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x168>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x16e>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80054b8:	e07b      	b.n	80055b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ca      	bne.n	800545a <HAL_SPI_Transmit+0x11c>
 80054c4:	e050      	b.n	8005568 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_SPI_Transmit+0x196>
 80054ce:	8afb      	ldrh	r3, [r7, #22]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d144      	bne.n	800555e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054fa:	e030      	b.n	800555e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d113      	bne.n	8005532 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005530:	e015      	b.n	800555e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005532:	f7fb febf 	bl	80012b4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d803      	bhi.n	800554a <HAL_SPI_Transmit+0x20c>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d102      	bne.n	8005550 <HAL_SPI_Transmit+0x212>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800555c:	e029      	b.n	80055b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1c9      	bne.n	80054fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f8b1 	bl	80056d4 <SPI_EndRxTxTransaction>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e003      	b.n	80055b2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055d4:	f7fb fe6e 	bl	80012b4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	4413      	add	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055e4:	f7fb fe66 	bl	80012b4 <HAL_GetTick>
 80055e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	0d1b      	lsrs	r3, r3, #20
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	fb02 f303 	mul.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055fa:	e054      	b.n	80056a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d050      	beq.n	80056a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005604:	f7fb fe56 	bl	80012b4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	429a      	cmp	r2, r3
 8005612:	d902      	bls.n	800561a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d13d      	bne.n	8005696 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005632:	d111      	bne.n	8005658 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d004      	beq.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d107      	bne.n	8005658 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005660:	d10f      	bne.n	8005682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e017      	b.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d19b      	bne.n	80055fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200001e8 	.word	0x200001e8

080056d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	2102      	movs	r1, #2
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff ff6a 	bl	80055c4 <SPI_WaitFlagStateUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e032      	b.n	800576c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005706:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <SPI_EndRxTxTransaction+0xa0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <SPI_EndRxTxTransaction+0xa4>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	0d5b      	lsrs	r3, r3, #21
 8005712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005724:	d112      	bne.n	800574c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff47 	bl	80055c4 <SPI_WaitFlagStateUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e00f      	b.n	800576c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3b01      	subs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b80      	cmp	r3, #128	; 0x80
 8005764:	d0f2      	beq.n	800574c <SPI_EndRxTxTransaction+0x78>
 8005766:	e000      	b.n	800576a <SPI_EndRxTxTransaction+0x96>
        break;
 8005768:	bf00      	nop
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	200001e8 	.word	0x200001e8
 8005778:	165e9f81 	.word	0x165e9f81

0800577c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800577c:	b084      	sub	sp, #16
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	f107 001c 	add.w	r0, r7, #28
 800578a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005792:	2b01      	cmp	r3, #1
 8005794:	d123      	bne.n	80057de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9dc 	bl	8005b90 <USB_CoreReset>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
 80057dc:	e01b      	b.n	8005816 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9d0 	bl	8005b90 <USB_CoreReset>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
 8005808:	e005      	b.n	8005816 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005816:	7fbb      	ldrb	r3, [r7, #30]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10b      	bne.n	8005834 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f043 0206 	orr.w	r2, r3, #6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005840:	b004      	add	sp, #16
 8005842:	4770      	bx	lr

08005844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f043 0201 	orr.w	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d115      	bne.n	80058d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058b6:	200a      	movs	r0, #10
 80058b8:	f7fb fd08 	bl	80012cc <HAL_Delay>
      ms += 10U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	330a      	adds	r3, #10
 80058c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f956 	bl	8005b74 <USB_GetMode>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d01e      	beq.n	800590c <USB_SetCurrentMode+0x84>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2bc7      	cmp	r3, #199	; 0xc7
 80058d2:	d9f0      	bls.n	80058b6 <USB_SetCurrentMode+0x2e>
 80058d4:	e01a      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058e8:	200a      	movs	r0, #10
 80058ea:	f7fb fcef 	bl	80012cc <HAL_Delay>
      ms += 10U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	330a      	adds	r3, #10
 80058f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f93d 	bl	8005b74 <USB_GetMode>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <USB_SetCurrentMode+0x84>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2bc7      	cmp	r3, #199	; 0xc7
 8005904:	d9f0      	bls.n	80058e8 <USB_SetCurrentMode+0x60>
 8005906:	e001      	b.n	800590c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e005      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2bc8      	cmp	r3, #200	; 0xc8
 8005910:	d101      	bne.n	8005916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800593a:	d901      	bls.n	8005940 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e01b      	b.n	8005978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	daf2      	bge.n	800592e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	019b      	lsls	r3, r3, #6
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005964:	d901      	bls.n	800596a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d0f0      	beq.n	8005958 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800599c:	d901      	bls.n	80059a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e018      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	daf2      	bge.n	8005990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2210      	movs	r2, #16
 80059b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e006      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d0f0      	beq.n	80059b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	; 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	460b      	mov	r3, r1
 80059f0:	71fb      	strb	r3, [r7, #7]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d123      	bne.n	8005a4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a06:	88bb      	ldrh	r3, [r7, #4]
 8005a08:	3303      	adds	r3, #3
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e018      	b.n	8005a46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	031a      	lsls	r2, r3, #12
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a20:	461a      	mov	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3e2      	bcc.n	8005a14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3724      	adds	r7, #36	; 0x24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b08b      	sub	sp, #44	; 0x2c
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	e014      	b.n	8005ab2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	3301      	adds	r3, #1
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3e6      	bcc.n	8005a88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aba:	8bfb      	ldrh	r3, [r7, #30]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01e      	beq.n	8005afe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aca:	461a      	mov	r2, r3
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	3301      	adds	r3, #1
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005af2:	8bfb      	ldrh	r3, [r7, #30]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005af8:	8bfb      	ldrh	r3, [r7, #30]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1ea      	bne.n	8005ad4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	372c      	adds	r7, #44	; 0x2c
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b66:	68bb      	ldr	r3, [r7, #8]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0301 	and.w	r3, r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ba8:	d901      	bls.n	8005bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01b      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	daf2      	bge.n	8005b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bd2:	d901      	bls.n	8005bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e006      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d0f0      	beq.n	8005bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d119      	bne.n	8005c7e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10a      	bne.n	8005c68 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c60:	f043 0304 	orr.w	r3, r3, #4
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e014      	b.n	8005c92 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e009      	b.n	8005c92 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c92:	2110      	movs	r1, #16
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fe43 	bl	8005920 <USB_FlushTxFifo>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fe6d 	bl	8005984 <USB_FlushRxFifo>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	e015      	b.n	8005ce6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005cea:	461a      	mov	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d3e3      	bcc.n	8005cba <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <USB_HostInit+0x170>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d10b      	bne.n	8005d20 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <USB_HostInit+0x174>)
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a14      	ldr	r2, [pc, #80]	; (8005d6c <USB_HostInit+0x178>)
 8005d1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d1e:	e009      	b.n	8005d34 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <USB_HostInit+0x17c>)
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <USB_HostInit+0x180>)
 8005d30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f043 0210 	orr.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <USB_HostInit+0x184>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	40040000 	.word	0x40040000
 8005d68:	01000200 	.word	0x01000200
 8005d6c:	00e00300 	.word	0x00e00300
 8005d70:	00600080 	.word	0x00600080
 8005d74:	004000e0 	.word	0x004000e0
 8005d78:	a3200008 	.word	0xa3200008

08005d7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d107      	bne.n	8005dce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dca:	6053      	str	r3, [r2, #4]
 8005dcc:	e00c      	b.n	8005de8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d107      	bne.n	8005de4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005de0:	6053      	str	r3, [r2, #4]
 8005de2:	e001      	b.n	8005de8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e16:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e24:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e26:	2064      	movs	r0, #100	; 0x64
 8005e28:	f7fb fa50 	bl	80012cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e38:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e3a:	200a      	movs	r0, #10
 8005e3c:	f7fb fa46 	bl	80012cc <HAL_Delay>

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e6e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <USB_DriveVbus+0x44>
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d106      	bne.n	8005e8e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e8c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d109      	bne.n	8005eae <USB_DriveVbus+0x64>
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	0c5b      	lsrs	r3, r3, #17
 8005eda:	f003 0303 	and.w	r3, r3, #3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	b29b      	uxth	r3, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	70fb      	strb	r3, [r7, #3]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70bb      	strb	r3, [r7, #2]
 8005f22:	4613      	mov	r3, r2
 8005f24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d87c      	bhi.n	8006044 <USB_HC_Init+0x138>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <USB_HC_Init+0x44>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08006007 	.word	0x08006007
 8005f58:	08005f61 	.word	0x08005f61
 8005f5c:	08005fc9 	.word	0x08005fc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	da10      	bge.n	8005f9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f9c:	e055      	b.n	800604a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a6f      	ldr	r2, [pc, #444]	; (8006160 <USB_HC_Init+0x254>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d151      	bne.n	800604a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fc4:	60d3      	str	r3, [r2, #12]
      break;
 8005fc6:	e040      	b.n	800604a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da34      	bge.n	800604e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006004:	e023      	b.n	800604e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006012:	461a      	mov	r2, r3
 8006014:	f240 2325 	movw	r3, #549	; 0x225
 8006018:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800601a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da17      	bge.n	8006052 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	440a      	add	r2, r1
 8006038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006040:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006042:	e006      	b.n	8006052 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
      break;
 8006048:	e004      	b.n	8006054 <USB_HC_Init+0x148>
      break;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <USB_HC_Init+0x148>
      break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <USB_HC_Init+0x148>
      break;
 8006052:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	440a      	add	r2, r1
 800607c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	6939      	ldr	r1, [r7, #16]
 800609c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060a0:	4313      	orrs	r3, r2
 80060a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da03      	bge.n	80060c0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e001      	b.n	80060c4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fef9 	bl	8005ebc <USB_GetHostSpeed>
 80060ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d106      	bne.n	80060e2 <USB_HC_Init+0x1d6>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d003      	beq.n	80060e2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e001      	b.n	80060e6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e6:	787b      	ldrb	r3, [r7, #1]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060ee:	78bb      	ldrb	r3, [r7, #2]
 80060f0:	02db      	lsls	r3, r3, #11
 80060f2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060fc:	049b      	lsls	r3, r3, #18
 80060fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006102:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006104:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006106:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800610a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	431a      	orrs	r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006124:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800612a:	2b03      	cmp	r3, #3
 800612c:	d003      	beq.n	8006136 <USB_HC_Init+0x22a>
 800612e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10f      	bne.n	8006156 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	440a      	add	r2, r1
 800614c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006154:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006156:	7ffb      	ldrb	r3, [r7, #31]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40040000 	.word	0x40040000

08006164 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800617c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006180:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a5d      	ldr	r2, [pc, #372]	; (80062fc <USB_HC_StartXfer+0x198>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d12f      	bne.n	80061ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11c      	bne.n	80061ca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	7c9b      	ldrb	r3, [r3, #18]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <USB_HC_StartXfer+0x3c>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	7c9b      	ldrb	r3, [r3, #18]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d124      	bne.n	80061ea <USB_HC_StartXfer+0x86>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	799b      	ldrb	r3, [r3, #6]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d120      	bne.n	80061ea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	60d3      	str	r3, [r2, #12]
 80061c8:	e00f      	b.n	80061ea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	791b      	ldrb	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <USB_HC_StartXfer+0x86>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	795b      	ldrb	r3, [r3, #5]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d107      	bne.n	80061ea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fb6b 	bl	80068bc <USB_DoPing>
        return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e232      	b.n	8006650 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	799b      	ldrb	r3, [r3, #6]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d158      	bne.n	80062a4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80061f2:	2301      	movs	r3, #1
 80061f4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	78db      	ldrb	r3, [r3, #3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	8a92      	ldrh	r2, [r2, #20]
 8006204:	fb03 f202 	mul.w	r2, r3, r2
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	61da      	str	r2, [r3, #28]
 800620c:	e07c      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	7c9b      	ldrb	r3, [r3, #18]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d130      	bne.n	8006278 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	2bbc      	cmp	r3, #188	; 0xbc
 800621c:	d918      	bls.n	8006250 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	8a9b      	ldrh	r3, [r3, #20]
 8006222:	461a      	mov	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d003      	beq.n	8006240 <USB_HC_StartXfer+0xdc>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d103      	bne.n	8006248 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2202      	movs	r2, #2
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e05f      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2201      	movs	r2, #1
 800624c:	60da      	str	r2, [r3, #12]
 800624e:	e05b      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d007      	beq.n	8006270 <USB_HC_StartXfer+0x10c>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d003      	beq.n	8006270 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2204      	movs	r2, #4
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e04b      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2203      	movs	r2, #3
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	e047      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10d      	bne.n	800629a <USB_HC_StartXfer+0x136>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	8a92      	ldrh	r2, [r2, #20]
 8006286:	4293      	cmp	r3, r2
 8006288:	d907      	bls.n	800629a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800628a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	8a92      	ldrh	r2, [r2, #20]
 8006290:	fb03 f202 	mul.w	r2, r3, r2
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61da      	str	r2, [r3, #28]
 8006298:	e036      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	61da      	str	r2, [r3, #28]
 80062a2:	e031      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d018      	beq.n	80062de <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	8a92      	ldrh	r2, [r2, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	3b01      	subs	r3, #1
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	8a92      	ldrh	r2, [r2, #20]
 80062bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80062c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062c4:	8b7b      	ldrh	r3, [r7, #26]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d90b      	bls.n	80062e2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80062ca:	8b7b      	ldrh	r3, [r7, #26]
 80062cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	8a92      	ldrh	r2, [r2, #20]
 80062d4:	fb03 f202 	mul.w	r2, r3, r2
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61da      	str	r2, [r3, #28]
 80062dc:	e001      	b.n	80062e2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80062de:	2301      	movs	r3, #1
 80062e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	78db      	ldrb	r3, [r3, #3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	8a92      	ldrh	r2, [r2, #20]
 80062f0:	fb03 f202 	mul.w	r2, r3, r2
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	61da      	str	r2, [r3, #28]
 80062f8:	e006      	b.n	8006308 <USB_HC_StartXfer+0x1a4>
 80062fa:	bf00      	nop
 80062fc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006310:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006312:	04d9      	lsls	r1, r3, #19
 8006314:	4ba3      	ldr	r3, [pc, #652]	; (80065a4 <USB_HC_StartXfer+0x440>)
 8006316:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006318:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	7d9b      	ldrb	r3, [r3, #22]
 800631e:	075b      	lsls	r3, r3, #29
 8006320:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	0148      	lsls	r0, r1, #5
 8006328:	6a39      	ldr	r1, [r7, #32]
 800632a:	4401      	add	r1, r0
 800632c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006330:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006332:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	460a      	mov	r2, r1
 800634c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	bf0c      	ite	eq
 800635e:	2301      	moveq	r3, #1
 8006360:	2300      	movne	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	440a      	add	r2, r1
 800637c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006380:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006384:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	7e7b      	ldrb	r3, [r7, #25]
 8006396:	075b      	lsls	r3, r3, #29
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	0148      	lsls	r0, r1, #5
 800639c:	6a39      	ldr	r1, [r7, #32]
 800639e:	4401      	add	r1, r0
 80063a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	799b      	ldrb	r3, [r3, #6]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	f040 80c3 	bne.w	8006538 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	7c5b      	ldrb	r3, [r3, #17]
 80063b6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063bc:	4313      	orrs	r3, r2
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	6a3a      	ldr	r2, [r7, #32]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063ce:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	79db      	ldrb	r3, [r3, #7]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d123      	bne.n	8006440 <USB_HC_StartXfer+0x2dc>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	78db      	ldrb	r3, [r3, #3]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11f      	bne.n	8006440 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	440a      	add	r2, r1
 8006416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	4413      	add	r3, r2
 8006428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	440a      	add	r2, r1
 8006436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	7c9b      	ldrb	r3, [r3, #18]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d003      	beq.n	8006450 <USB_HC_StartXfer+0x2ec>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	7c9b      	ldrb	r3, [r3, #18]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d117      	bne.n	8006480 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006454:	2b01      	cmp	r3, #1
 8006456:	d113      	bne.n	8006480 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	78db      	ldrb	r3, [r3, #3]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d10f      	bne.n	8006480 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	7c9b      	ldrb	r3, [r3, #18]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d162      	bne.n	800654e <USB_HC_StartXfer+0x3ea>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	78db      	ldrb	r3, [r3, #3]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d15e      	bne.n	800654e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	3b01      	subs	r3, #1
 8006496:	2b03      	cmp	r3, #3
 8006498:	d858      	bhi.n	800654c <USB_HC_StartXfer+0x3e8>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <USB_HC_StartXfer+0x33c>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064d3 	.word	0x080064d3
 80064a8:	080064f5 	.word	0x080064f5
 80064ac:	08006517 	.word	0x08006517
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ce:	6053      	str	r3, [r2, #4]
          break;
 80064d0:	e03d      	b.n	800654e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ec:	f043 030e 	orr.w	r3, r3, #14
 80064f0:	6053      	str	r3, [r2, #4]
          break;
 80064f2:	e02c      	b.n	800654e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	440a      	add	r2, r1
 800650a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006512:	6053      	str	r3, [r2, #4]
          break;
 8006514:	e01b      	b.n	800654e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	6a3a      	ldr	r2, [r7, #32]
 800652a:	440a      	add	r2, r1
 800652c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006534:	6053      	str	r3, [r2, #4]
          break;
 8006536:	e00a      	b.n	800654e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	461a      	mov	r2, r3
 8006546:	2300      	movs	r3, #0
 8006548:	6053      	str	r3, [r2, #4]
 800654a:	e000      	b.n	800654e <USB_HC_StartXfer+0x3ea>
          break;
 800654c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006564:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	78db      	ldrb	r3, [r3, #3]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e003      	b.n	8006580 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800657e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006586:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006594:	461a      	mov	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e055      	b.n	8006650 <USB_HC_StartXfer+0x4ec>
 80065a4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	78db      	ldrb	r3, [r3, #3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d14e      	bne.n	800664e <USB_HC_StartXfer+0x4ea>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d04a      	beq.n	800664e <USB_HC_StartXfer+0x4ea>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	79db      	ldrb	r3, [r3, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d146      	bne.n	800664e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	7c9b      	ldrb	r3, [r3, #18]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d831      	bhi.n	800662c <USB_HC_StartXfer+0x4c8>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <USB_HC_StartXfer+0x46c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	080065e1 	.word	0x080065e1
 80065d4:	08006605 	.word	0x08006605
 80065d8:	080065e1 	.word	0x080065e1
 80065dc:	08006605 	.word	0x08006605
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	3303      	adds	r3, #3
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065ea:	8afa      	ldrh	r2, [r7, #22]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d91c      	bls.n	8006630 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]
        }
        break;
 8006602:	e015      	b.n	8006630 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	3303      	adds	r3, #3
 800660a:	089b      	lsrs	r3, r3, #2
 800660c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800660e:	8afa      	ldrh	r2, [r7, #22]
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	b29b      	uxth	r3, r3
 800661a:	429a      	cmp	r2, r3
 800661c:	d90a      	bls.n	8006634 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	619a      	str	r2, [r3, #24]
        }
        break;
 800662a:	e003      	b.n	8006634 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <USB_HC_StartXfer+0x4d2>
        break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <USB_HC_StartXfer+0x4d2>
        break;
 8006634:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	785a      	ldrb	r2, [r3, #1]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	b29b      	uxth	r3, r3
 8006644:	2000      	movs	r0, #0
 8006646:	9000      	str	r0, [sp, #0]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7ff f9c9 	bl	80059e0 <USB_WritePacket>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3728      	adds	r7, #40	; 0x28
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	b29b      	uxth	r3, r3
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800667a:	b480      	push	{r7}
 800667c:	b089      	sub	sp, #36	; 0x24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	0c9b      	lsrs	r3, r3, #18
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	0fdb      	lsrs	r3, r3, #31
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	0fdb      	lsrs	r3, r3, #31
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d10d      	bne.n	80066fc <USB_HC_Halt+0x82>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <USB_HC_Halt+0x82>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d002      	beq.n	80066f8 <USB_HC_Halt+0x7e>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d101      	bne.n	80066fc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e0d8      	b.n	80068ae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <USB_HC_Halt+0x8e>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d173      	bne.n	80067f0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006726:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d14a      	bne.n	80067ca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d133      	bne.n	80067a8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	440a      	add	r2, r1
 8006756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800675a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800675e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3301      	adds	r3, #1
 8006784:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800678c:	d82e      	bhi.n	80067ec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067a4:	d0ec      	beq.n	8006780 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067a6:	e081      	b.n	80068ac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067c8:	e070      	b.n	80068ac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ea:	e05f      	b.n	80068ac <USB_HC_Halt+0x232>
            break;
 80067ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ee:	e05d      	b.n	80068ac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	440a      	add	r2, r1
 8006806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800680e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d133      	bne.n	8006888 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	440a      	add	r2, r1
 8006836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800683e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	440a      	add	r2, r1
 8006856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800685a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800685e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3301      	adds	r3, #1
 8006864:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800686c:	d81d      	bhi.n	80068aa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006884:	d0ec      	beq.n	8006860 <USB_HC_Halt+0x1e6>
 8006886:	e011      	b.n	80068ac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e000      	b.n	80068ac <USB_HC_Halt+0x232>
          break;
 80068aa:	bf00      	nop
    }
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3724      	adds	r7, #36	; 0x24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	04da      	lsls	r2, r3, #19
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <USB_DoPing+0x74>)
 80068da:	4013      	ands	r3, r2
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006904:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800690c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	461a      	mov	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	1ff80000 	.word	0x1ff80000

08006934 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe ff8c 	bl	8005866 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800694e:	2110      	movs	r1, #16
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fe ffe5 	bl	8005920 <USB_FlushTxFifo>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f80f 	bl	8005984 <USB_FlushRxFifo>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e01f      	b.n	80069b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006994:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800699c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	461a      	mov	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b0f      	cmp	r3, #15
 80069ba:	d9dc      	bls.n	8006976 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069bc:	2300      	movs	r3, #0
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	e034      	b.n	8006a2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f6:	461a      	mov	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a08:	d80c      	bhi.n	8006a24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a20:	d0ec      	beq.n	80069fc <USB_StopHost+0xc8>
 8006a22:	e000      	b.n	8006a26 <USB_StopHost+0xf2>
        break;
 8006a24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b0f      	cmp	r3, #15
 8006a30:	d9c7      	bls.n	80069c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295
 8006a46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7fe fefb 	bl	8005844 <USB_EnableGlobalInt>

  return ret;
 8006a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b089      	sub	sp, #36	; 0x24
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a60:	2301      	movs	r3, #1
 8006a62:	2202      	movs	r2, #2
 8006a64:	2102      	movs	r1, #2
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fc85 	bl	8007376 <USBH_FindInterface>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d002      	beq.n	8006a7c <USBH_CDC_InterfaceInit+0x24>
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d901      	bls.n	8006a80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e13d      	b.n	8006cfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc5a 	bl	800733e <USBH_SelectInterface>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a94:	2302      	movs	r3, #2
 8006a96:	e131      	b.n	8006cfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a9e:	2050      	movs	r0, #80	; 0x50
 8006aa0:	f002 fb74 	bl	800918c <malloc>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e11f      	b.n	8006cfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006abc:	2250      	movs	r2, #80	; 0x50
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	f002 fc1f 	bl	8009304 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	211a      	movs	r1, #26
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da15      	bge.n	8006b0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	211a      	movs	r1, #26
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	211a      	movs	r1, #26
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 ffce 	bl	8008ab2 <USBH_AllocPipe>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	7858      	ldrb	r0, [r3, #1]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	8952      	ldrh	r2, [r2, #10]
 8006b36:	9202      	str	r2, [sp, #8]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4623      	mov	r3, r4
 8006b40:	4602      	mov	r2, r0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 ff86 	bl	8008a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 fa95 	bl	8009080 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b56:	2300      	movs	r3, #0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	210a      	movs	r1, #10
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc0a 	bl	8007376 <USBH_FindInterface>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2bff      	cmp	r3, #255	; 0xff
 8006b6a:	d002      	beq.n	8006b72 <USBH_CDC_InterfaceInit+0x11a>
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d901      	bls.n	8006b76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	e0c2      	b.n	8006cfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	211a      	movs	r1, #26
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da16      	bge.n	8006bbc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	211a      	movs	r1, #26
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	211a      	movs	r1, #26
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	835a      	strh	r2, [r3, #26]
 8006bba:	e015      	b.n	8006be8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	211a      	movs	r1, #26
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	211a      	movs	r1, #26
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006be2:	881a      	ldrh	r2, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	211a      	movs	r1, #26
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b25b      	sxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	da16      	bge.n	8006c2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	211a      	movs	r1, #26
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c10:	781a      	ldrb	r2, [r3, #0]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	211a      	movs	r1, #26
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	835a      	strh	r2, [r3, #26]
 8006c2c:	e015      	b.n	8006c5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	211a      	movs	r1, #26
 8006c34:	fb01 f303 	mul.w	r3, r1, r3
 8006c38:	4413      	add	r3, r2
 8006c3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	211a      	movs	r1, #26
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c54:	881a      	ldrh	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	7b9b      	ldrb	r3, [r3, #14]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 ff26 	bl	8008ab2 <USBH_AllocPipe>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	7bdb      	ldrb	r3, [r3, #15]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 ff1c 	bl	8008ab2 <USBH_AllocPipe>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7b59      	ldrb	r1, [r3, #13]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	7b98      	ldrb	r0, [r3, #14]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	8b12      	ldrh	r2, [r2, #24]
 8006c9a:	9202      	str	r2, [sp, #8]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	9201      	str	r2, [sp, #4]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fed4 	bl	8008a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	7b19      	ldrb	r1, [r3, #12]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	7bd8      	ldrb	r0, [r3, #15]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	8b52      	ldrh	r2, [r2, #26]
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4623      	mov	r3, r4
 8006cce:	4602      	mov	r2, r0
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 febf 	bl	8008a54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	7b5b      	ldrb	r3, [r3, #13]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f002 f9ca 	bl	8009080 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	7b1b      	ldrb	r3, [r3, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f002 f9c3 	bl	8009080 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd90      	pop	{r4, r7, pc}

08006d04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 feb4 	bl	8008a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fedf 	bl	8008af4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	7b1b      	ldrb	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00e      	beq.n	8006d62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	7b1b      	ldrb	r3, [r3, #12]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fea1 	bl	8008a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	7b1b      	ldrb	r3, [r3, #12]
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fecc 	bl	8008af4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	7b5b      	ldrb	r3, [r3, #13]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	7b5b      	ldrb	r3, [r3, #13]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fe8e 	bl	8008a92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	7b5b      	ldrb	r3, [r3, #13]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 feb9 	bl	8008af4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f002 f9fd 	bl	800919c <free>
    phost->pActiveClass->pData = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da8:	2200      	movs	r2, #0
 8006daa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3340      	adds	r3, #64	; 0x40
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8b1 	bl	8006f36 <GetLineCoding>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006dd8:	7afb      	ldrb	r3, [r7, #11]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de4:	2102      	movs	r1, #2
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dea:	7afb      	ldrb	r3, [r7, #11]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d877      	bhi.n	8006f08 <USBH_CDC_Process+0x114>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <USBH_CDC_Process+0x2c>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e35 	.word	0x08006e35
 8006e24:	08006e3b 	.word	0x08006e3b
 8006e28:	08006e6b 	.word	0x08006e6b
 8006e2c:	08006edf 	.word	0x08006edf
 8006e30:	08006eed 	.word	0x08006eed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	e06d      	b.n	8006f16 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f897 	bl	8006f74 <SetLineCoding>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e58:	e058      	b.n	8006f0c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d055      	beq.n	8006f0c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e68:	e050      	b.n	8006f0c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	3340      	adds	r3, #64	; 0x40
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f860 	bl	8006f36 <GetLineCoding>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d126      	bne.n	8006ece <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	791b      	ldrb	r3, [r3, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d13b      	bne.n	8006f10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d133      	bne.n	8006f10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d12b      	bne.n	8006f10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d124      	bne.n	8006f10 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f958 	bl	800717c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ecc:	e020      	b.n	8006f10 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d01d      	beq.n	8006f10 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006edc:	e018      	b.n	8006f10 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f867 	bl	8006fb2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f8da 	bl	800709e <CDC_ProcessReception>
      break;
 8006eea:	e014      	b.n	8006f16 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006eec:	2100      	movs	r1, #0
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 f822 	bl	8007f38 <USBH_ClrFeature>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f06:	e005      	b.n	8006f14 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f08:	bf00      	nop
 8006f0a:	e004      	b.n	8006f16 <USBH_CDC_Process+0x122>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <USBH_CDC_Process+0x122>
      break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <USBH_CDC_Process+0x122>
      break;
 8006f14:	bf00      	nop

  }

  return status;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	22a1      	movs	r2, #161	; 0xa1
 8006f44:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2221      	movs	r2, #33	; 0x21
 8006f4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2207      	movs	r2, #7
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fb23 	bl	80085b0 <USBH_CtlReq>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2207      	movs	r2, #7
 8006f9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2207      	movs	r2, #7
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fb04 	bl	80085b0 <USBH_CtlReq>
 8006fa8:	4603      	mov	r3, r0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b086      	sub	sp, #24
 8006fb6:	af02      	add	r7, sp, #8
 8006fb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d002      	beq.n	8006fd8 <CDC_ProcessTransmission+0x26>
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d023      	beq.n	800701e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fd6:	e05e      	b.n	8007096 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	8b12      	ldrh	r2, [r2, #24]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d90b      	bls.n	8006ffc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	69d9      	ldr	r1, [r3, #28]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8b1a      	ldrh	r2, [r3, #24]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	7b5b      	ldrb	r3, [r3, #13]
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	9000      	str	r0, [sp, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fcea 	bl	80089ce <USBH_BulkSendData>
 8006ffa:	e00b      	b.n	8007014 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	7b5b      	ldrb	r3, [r3, #13]
 800700a:	2001      	movs	r0, #1
 800700c:	9000      	str	r0, [sp, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fcdd 	bl	80089ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800701c:	e03b      	b.n	8007096 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	7b5b      	ldrb	r3, [r3, #13]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 f801 	bl	800902c <USBH_LL_GetURBState>
 800702a:	4603      	mov	r3, r0
 800702c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d128      	bne.n	8007086 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	8b12      	ldrh	r2, [r2, #24]
 800703c:	4293      	cmp	r3, r2
 800703e:	d90e      	bls.n	800705e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	8b12      	ldrh	r2, [r2, #24]
 8007048:	1a9a      	subs	r2, r3, r2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	8b12      	ldrh	r2, [r2, #24]
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61da      	str	r2, [r3, #28]
 800705c:	e002      	b.n	8007064 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007074:	e00e      	b.n	8007094 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f868 	bl	8007154 <USBH_CDC_TransmitCallback>
      break;
 8007084:	e006      	b.n	8007094 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d103      	bne.n	8007094 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007094:	bf00      	nop
  }
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d002      	beq.n	80070c4 <CDC_ProcessReception+0x26>
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d00e      	beq.n	80070e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070c2:	e043      	b.n	800714c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6a19      	ldr	r1, [r3, #32]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	8b5a      	ldrh	r2, [r3, #26]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	7b1b      	ldrb	r3, [r3, #12]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fca1 	bl	8008a18 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2204      	movs	r2, #4
 80070da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070de:	e035      	b.n	800714c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	7b1b      	ldrb	r3, [r3, #12]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 ffa0 	bl	800902c <USBH_LL_GetURBState>
 80070ec:	4603      	mov	r3, r0
 80070ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070f0:	7cfb      	ldrb	r3, [r7, #19]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d129      	bne.n	800714a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	7b1b      	ldrb	r3, [r3, #12]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 ff03 	bl	8008f08 <USBH_LL_GetLastXferSize>
 8007102:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	429a      	cmp	r2, r3
 800710c:	d016      	beq.n	800713c <CDC_ProcessReception+0x9e>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	8b5b      	ldrh	r3, [r3, #26]
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4293      	cmp	r3, r2
 8007118:	d910      	bls.n	800713c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad2      	subs	r2, r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	441a      	add	r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2203      	movs	r2, #3
 8007136:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800713a:	e006      	b.n	800714a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f80f 	bl	8007168 <USBH_CDC_ReceiveCallback>
      break;
 800714a:	bf00      	nop
  }
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	e029      	b.n	80071fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	79fa      	ldrb	r2, [r7, #7]
 80071ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f81f 	bl	8007204 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fdd3 	bl	8008da0 <USBH_LL_Init>

  return USBH_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e009      	b.n	800722a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	33e0      	adds	r3, #224	; 0xe0
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b0f      	cmp	r3, #15
 800722e:	d9f2      	bls.n	8007216 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	e009      	b.n	800724a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007250:	d3f1      	bcc.n	8007236 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2240      	movs	r2, #64	; 0x40
 8007276:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	331c      	adds	r3, #28
 80072a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 f82b 	bl	8009304 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f002 f822 	bl	8009304 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f203 3326 	addw	r3, r3, #806	; 0x326
 80072c6:	2212      	movs	r2, #18
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 f81a 	bl	8009304 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072d6:	223e      	movs	r2, #62	; 0x3e
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f002 f812 	bl	8009304 <memset>

  return USBH_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d016      	beq.n	800732c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10e      	bne.n	8007326 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	33de      	adds	r3, #222	; 0xde
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
 8007324:	e004      	b.n	8007330 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007326:	2302      	movs	r3, #2
 8007328:	73fb      	strb	r3, [r7, #15]
 800732a:	e001      	b.n	8007330 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	429a      	cmp	r2, r3
 8007358:	d204      	bcs.n	8007364 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007362:	e001      	b.n	8007368 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007376:	b480      	push	{r7}
 8007378:	b087      	sub	sp, #28
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	4608      	mov	r0, r1
 8007380:	4611      	mov	r1, r2
 8007382:	461a      	mov	r2, r3
 8007384:	4603      	mov	r3, r0
 8007386:	70fb      	strb	r3, [r7, #3]
 8007388:	460b      	mov	r3, r1
 800738a:	70bb      	strb	r3, [r7, #2]
 800738c:	4613      	mov	r3, r2
 800738e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800739e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073a0:	e025      	b.n	80073ee <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	221a      	movs	r2, #26
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	3308      	adds	r3, #8
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	3302      	adds	r3, #2
 80073b2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	795b      	ldrb	r3, [r3, #5]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d002      	beq.n	80073c4 <USBH_FindInterface+0x4e>
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	2bff      	cmp	r3, #255	; 0xff
 80073c2:	d111      	bne.n	80073e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073c8:	78ba      	ldrb	r2, [r7, #2]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d002      	beq.n	80073d4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ce:	78bb      	ldrb	r3, [r7, #2]
 80073d0:	2bff      	cmp	r3, #255	; 0xff
 80073d2:	d109      	bne.n	80073e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073d8:	787a      	ldrb	r2, [r7, #1]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d002      	beq.n	80073e4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073de:	787b      	ldrb	r3, [r7, #1]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	d101      	bne.n	80073e8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	e006      	b.n	80073f6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	3301      	adds	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d9d6      	bls.n	80073a2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073f4:	23ff      	movs	r3, #255	; 0xff
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fd04 	bl	8008e18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007410:	2101      	movs	r1, #1
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fe1d 	bl	8009052 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af04      	add	r7, sp, #16
 800742a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800742c:	2302      	movs	r3, #2
 800742e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d102      	bne.n	8007446 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2203      	movs	r2, #3
 8007444:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b0b      	cmp	r3, #11
 800744e:	f200 81be 	bhi.w	80077ce <USBH_Process+0x3aa>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <USBH_Process+0x34>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007489 	.word	0x08007489
 800745c:	080074bb 	.word	0x080074bb
 8007460:	08007523 	.word	0x08007523
 8007464:	08007769 	.word	0x08007769
 8007468:	080077cf 	.word	0x080077cf
 800746c:	080075c7 	.word	0x080075c7
 8007470:	0800770f 	.word	0x0800770f
 8007474:	080075fd 	.word	0x080075fd
 8007478:	0800761d 	.word	0x0800761d
 800747c:	0800763d 	.word	0x0800763d
 8007480:	08007681 	.word	0x08007681
 8007484:	08007751 	.word	0x08007751
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 819e 	beq.w	80077d2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800749c:	20c8      	movs	r0, #200	; 0xc8
 800749e:	f001 fe22 	bl	80090e6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fd15 	bl	8008ed2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074b8:	e18b      	b.n	80077d2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074d2:	e18d      	b.n	80077f0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074de:	d914      	bls.n	800750a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074e6:	3301      	adds	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d903      	bls.n	8007502 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	220d      	movs	r2, #13
 80074fe:	701a      	strb	r2, [r3, #0]
      break;
 8007500:	e176      	b.n	80077f0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
      break;
 8007508:	e172      	b.n	80077f0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007510:	f103 020a 	add.w	r2, r3, #10
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800751a:	200a      	movs	r0, #10
 800751c:	f001 fde3 	bl	80090e6 <USBH_Delay>
      break;
 8007520:	e166      	b.n	80077f0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007532:	2104      	movs	r1, #4
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007538:	2064      	movs	r0, #100	; 0x64
 800753a:	f001 fdd4 	bl	80090e6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fca0 	bl	8008e84 <USBH_LL_GetSpeed>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2205      	movs	r2, #5
 8007552:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 faab 	bl	8008ab2 <USBH_AllocPipe>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007564:	2180      	movs	r1, #128	; 0x80
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 faa3 	bl	8008ab2 <USBH_AllocPipe>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7919      	ldrb	r1, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007588:	b292      	uxth	r2, r2
 800758a:	9202      	str	r2, [sp, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	9201      	str	r2, [sp, #4]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	4603      	mov	r3, r0
 8007594:	2280      	movs	r2, #128	; 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fa5c 	bl	8008a54 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	7959      	ldrb	r1, [r3, #5]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075b0:	b292      	uxth	r2, r2
 80075b2:	9202      	str	r2, [sp, #8]
 80075b4:	2200      	movs	r2, #0
 80075b6:	9201      	str	r2, [sp, #4]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4603      	mov	r3, r0
 80075bc:	2200      	movs	r2, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fa48 	bl	8008a54 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c4:	e114      	b.n	80077f0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f918 	bl	80077fc <USBH_HandleEnum>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 80fe 	bne.w	80077d6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d103      	bne.n	80075f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2208      	movs	r2, #8
 80075f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075f2:	e0f0      	b.n	80077d6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2207      	movs	r2, #7
 80075f8:	701a      	strb	r2, [r3, #0]
      break;
 80075fa:	e0ec      	b.n	80077d6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80e9 	beq.w	80077da <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800760e:	2101      	movs	r1, #1
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2208      	movs	r2, #8
 8007618:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800761a:	e0de      	b.n	80077da <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007622:	b29b      	uxth	r3, r3
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fc3f 	bl	8007eaa <USBH_SetCfg>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 80d5 	bne.w	80077de <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2209      	movs	r2, #9
 8007638:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800763a:	e0d0      	b.n	80077de <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800764a:	2101      	movs	r1, #1
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc4f 	bl	8007ef0 <USBH_SetFeature>
 8007652:	4603      	mov	r3, r0
 8007654:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220a      	movs	r2, #10
 8007662:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007664:	e0bd      	b.n	80077e2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b03      	cmp	r3, #3
 800766c:	f040 80b9 	bne.w	80077e2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	220a      	movs	r2, #10
 8007674:	701a      	strb	r2, [r3, #0]
      break;
 8007676:	e0b4      	b.n	80077e2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	220a      	movs	r2, #10
 800767c:	701a      	strb	r2, [r3, #0]
      break;
 800767e:	e0b0      	b.n	80077e2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80ad 	beq.w	80077e6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
 8007698:	e016      	b.n	80076c8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800769a:	7bfa      	ldrb	r2, [r7, #15]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	32de      	adds	r2, #222	; 0xde
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	791a      	ldrb	r2, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d108      	bne.n	80076c2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076b0:	7bfa      	ldrb	r2, [r7, #15]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32de      	adds	r2, #222	; 0xde
 80076b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80076c0:	e005      	b.n	80076ce <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	3301      	adds	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0e5      	beq.n	800769a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d016      	beq.n	8007706 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2206      	movs	r2, #6
 80076ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076f6:	2103      	movs	r1, #3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076fc:	e073      	b.n	80077e6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	220d      	movs	r2, #13
 8007702:	701a      	strb	r2, [r3, #0]
      break;
 8007704:	e06f      	b.n	80077e6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	701a      	strb	r2, [r3, #0]
      break;
 800770c:	e06b      	b.n	80077e6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d017      	beq.n	8007748 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	220b      	movs	r2, #11
 8007734:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007736:	e058      	b.n	80077ea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d154      	bne.n	80077ea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	220d      	movs	r2, #13
 8007744:	701a      	strb	r2, [r3, #0]
      break;
 8007746:	e050      	b.n	80077ea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	220d      	movs	r2, #13
 800774c:	701a      	strb	r2, [r3, #0]
      break;
 800774e:	e04c      	b.n	80077ea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d049      	beq.n	80077ee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
      }
      break;
 8007766:	e042      	b.n	80077ee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fd47 	bl	8007204 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077a4:	2105      	movs	r1, #5
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d107      	bne.n	80077c6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fe1f 	bl	8007402 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077c4:	e014      	b.n	80077f0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fb26 	bl	8008e18 <USBH_LL_Start>
      break;
 80077cc:	e010      	b.n	80077f0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80077ce:	bf00      	nop
 80077d0:	e00e      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077d2:	bf00      	nop
 80077d4:	e00c      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077d6:	bf00      	nop
 80077d8:	e00a      	b.n	80077f0 <USBH_Process+0x3cc>
    break;
 80077da:	bf00      	nop
 80077dc:	e008      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077de:	bf00      	nop
 80077e0:	e006      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077e2:	bf00      	nop
 80077e4:	e004      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <USBH_Process+0x3cc>
      break;
 80077ee:	bf00      	nop
  }
  return USBH_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop

080077fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af04      	add	r7, sp, #16
 8007802:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b07      	cmp	r3, #7
 8007812:	f200 81c1 	bhi.w	8007b98 <USBH_HandleEnum+0x39c>
 8007816:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBH_HandleEnum+0x20>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	0800783d 	.word	0x0800783d
 8007820:	080078fb 	.word	0x080078fb
 8007824:	08007965 	.word	0x08007965
 8007828:	080079f3 	.word	0x080079f3
 800782c:	08007a5d 	.word	0x08007a5d
 8007830:	08007acd 	.word	0x08007acd
 8007834:	08007b13 	.word	0x08007b13
 8007838:	08007b59 	.word	0x08007b59
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800783c:	2108      	movs	r1, #8
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa50 	bl	8007ce4 <USBH_Get_DevDesc>
 8007844:	4603      	mov	r3, r0
 8007846:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d130      	bne.n	80078b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7919      	ldrb	r1, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007872:	b292      	uxth	r2, r2
 8007874:	9202      	str	r2, [sp, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	9201      	str	r2, [sp, #4]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	4603      	mov	r3, r0
 800787e:	2280      	movs	r2, #128	; 0x80
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 f8e7 	bl	8008a54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7959      	ldrb	r1, [r3, #5]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800789a:	b292      	uxth	r2, r2
 800789c:	9202      	str	r2, [sp, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	4603      	mov	r3, r0
 80078a6:	2200      	movs	r2, #0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f8d3 	bl	8008a54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078ae:	e175      	b.n	8007b9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	f040 8172 	bne.w	8007b9c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078be:	3301      	adds	r3, #1
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d903      	bls.n	80078da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	220d      	movs	r2, #13
 80078d6:	701a      	strb	r2, [r3, #0]
      break;
 80078d8:	e160      	b.n	8007b9c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	795b      	ldrb	r3, [r3, #5]
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f907 	bl	8008af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f901 	bl	8008af4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
      break;
 80078f8:	e150      	b.n	8007b9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078fa:	2112      	movs	r1, #18
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f9f1 	bl	8007ce4 <USBH_Get_DevDesc>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007912:	e145      	b.n	8007ba0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b03      	cmp	r3, #3
 8007918:	f040 8142 	bne.w	8007ba0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007922:	3301      	adds	r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007932:	2b03      	cmp	r3, #3
 8007934:	d903      	bls.n	800793e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	220d      	movs	r2, #13
 800793a:	701a      	strb	r2, [r3, #0]
      break;
 800793c:	e130      	b.n	8007ba0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	795b      	ldrb	r3, [r3, #5]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f8d5 	bl	8008af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	791b      	ldrb	r3, [r3, #4]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f8cf 	bl	8008af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
      break;
 8007962:	e11d      	b.n	8007ba0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007964:	2101      	movs	r1, #1
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa7b 	bl	8007e62 <USBH_SetAddress>
 800796c:	4603      	mov	r3, r0
 800796e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d132      	bne.n	80079dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007976:	2002      	movs	r0, #2
 8007978:	f001 fbb5 	bl	80090e6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2203      	movs	r2, #3
 8007988:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7919      	ldrb	r1, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800799e:	b292      	uxth	r2, r2
 80079a0:	9202      	str	r2, [sp, #8]
 80079a2:	2200      	movs	r2, #0
 80079a4:	9201      	str	r2, [sp, #4]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4603      	mov	r3, r0
 80079aa:	2280      	movs	r2, #128	; 0x80
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f851 	bl	8008a54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7959      	ldrb	r1, [r3, #5]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079c6:	b292      	uxth	r2, r2
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	9201      	str	r2, [sp, #4]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4603      	mov	r3, r0
 80079d2:	2200      	movs	r2, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f83d 	bl	8008a54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079da:	e0e3      	b.n	8007ba4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	f040 80e0 	bne.w	8007ba4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	220d      	movs	r2, #13
 80079e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	705a      	strb	r2, [r3, #1]
      break;
 80079f0:	e0d8      	b.n	8007ba4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079f2:	2109      	movs	r1, #9
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f9a1 	bl	8007d3c <USBH_Get_CfgDesc>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2204      	movs	r2, #4
 8007a08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a0a:	e0cd      	b.n	8007ba8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f040 80ca 	bne.w	8007ba8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d903      	bls.n	8007a36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	220d      	movs	r2, #13
 8007a32:	701a      	strb	r2, [r3, #0]
      break;
 8007a34:	e0b8      	b.n	8007ba8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f859 	bl	8008af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f853 	bl	8008af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
      break;
 8007a5a:	e0a5      	b.n	8007ba8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f969 	bl	8007d3c <USBH_Get_CfgDesc>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2205      	movs	r2, #5
 8007a78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a7a:	e097      	b.n	8007bac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	f040 8094 	bne.w	8007bac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d903      	bls.n	8007aa6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220d      	movs	r2, #13
 8007aa2:	701a      	strb	r2, [r3, #0]
      break;
 8007aa4:	e082      	b.n	8007bac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	795b      	ldrb	r3, [r3, #5]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f821 	bl	8008af4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f81b 	bl	8008af4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	e06f      	b.n	8007bac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d019      	beq.n	8007b0a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ae2:	23ff      	movs	r3, #255	; 0xff
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f953 	bl	8007d90 <USBH_Get_StringDesc>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2206      	movs	r2, #6
 8007af8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007afa:	e059      	b.n	8007bb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d156      	bne.n	8007bb0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2206      	movs	r2, #6
 8007b06:	705a      	strb	r2, [r3, #1]
      break;
 8007b08:	e052      	b.n	8007bb0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2206      	movs	r2, #6
 8007b0e:	705a      	strb	r2, [r3, #1]
      break;
 8007b10:	e04e      	b.n	8007bb0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d019      	beq.n	8007b50 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b28:	23ff      	movs	r3, #255	; 0xff
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f930 	bl	8007d90 <USBH_Get_StringDesc>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2207      	movs	r2, #7
 8007b3e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b40:	e038      	b.n	8007bb4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d135      	bne.n	8007bb4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2207      	movs	r2, #7
 8007b4c:	705a      	strb	r2, [r3, #1]
      break;
 8007b4e:	e031      	b.n	8007bb4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2207      	movs	r2, #7
 8007b54:	705a      	strb	r2, [r3, #1]
      break;
 8007b56:	e02d      	b.n	8007bb4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d017      	beq.n	8007b92 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b6e:	23ff      	movs	r3, #255	; 0xff
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f90d 	bl	8007d90 <USBH_Get_StringDesc>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b84:	e018      	b.n	8007bb8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d115      	bne.n	8007bb8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b90:	e012      	b.n	8007bb8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
      break;
 8007b96:	e00f      	b.n	8007bb8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b98:	bf00      	nop
 8007b9a:	e00e      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e00c      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e00a      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e008      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e006      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <USBH_HandleEnum+0x3be>
      break;
 8007bb8:	bf00      	nop
  }
  return Status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f804 	bl	8007c06 <USBH_HandleSof>
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b0b      	cmp	r3, #11
 8007c16:	d10a      	bne.n	8007c2e <USBH_HandleSof+0x28>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
  }
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c46:	bf00      	nop
}
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c62:	bf00      	nop
}
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f8c6 	bl	8008e4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	791b      	ldrb	r3, [r3, #4]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 ff13 	bl	8008af4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	795b      	ldrb	r3, [r3, #5]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 ff0d 	bl	8008af4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007cf0:	887b      	ldrh	r3, [r7, #2]
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf6:	d901      	bls.n	8007cfc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e01b      	b.n	8007d34 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f872 	bl	8007df8 <USBH_GetDescriptor>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d24:	887a      	ldrh	r2, [r7, #2]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f929 	bl	8007f80 <USBH_ParseDevDesc>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	331c      	adds	r3, #28
 8007d4c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007d4e:	887b      	ldrh	r3, [r7, #2]
 8007d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d54:	d901      	bls.n	8007d5a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e016      	b.n	8007d88 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f846 	bl	8007df8 <USBH_GetDescriptor>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9b3 	bl	80080e8 <USBH_ParseCfgDesc>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	72fb      	strb	r3, [r7, #11]
 8007da0:	4613      	mov	r3, r2
 8007da2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007da4:	893b      	ldrh	r3, [r7, #8]
 8007da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007daa:	d802      	bhi.n	8007db2 <USBH_Get_StringDesc+0x22>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e01c      	b.n	8007df0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007dbe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007dc6:	893b      	ldrh	r3, [r7, #8]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	2100      	movs	r1, #0
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f812 	bl	8007df8 <USBH_GetDescriptor>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007de4:	893a      	ldrh	r2, [r7, #8]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fb93 	bl	8008514 <USBH_ParseStringDesc>
  }

  return status;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	72fb      	strb	r3, [r7, #11]
 8007e06:	4613      	mov	r3, r2
 8007e08:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d11c      	bne.n	8007e4c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2206      	movs	r2, #6
 8007e22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	893a      	ldrh	r2, [r7, #8]
 8007e28:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e2a:	893b      	ldrh	r3, [r7, #8]
 8007e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e34:	d104      	bne.n	8007e40 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f240 4209 	movw	r2, #1033	; 0x409
 8007e3c:	829a      	strh	r2, [r3, #20]
 8007e3e:	e002      	b.n	8007e46 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8b3a      	ldrh	r2, [r7, #24]
 8007e4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e4c:	8b3b      	ldrh	r3, [r7, #24]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fbac 	bl	80085b0 <USBH_CtlReq>
 8007e58:	4603      	mov	r3, r0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d10f      	bne.n	8007e96 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fb88 	bl	80085b0 <USBH_CtlReq>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	789b      	ldrb	r3, [r3, #2]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d10e      	bne.n	8007edc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2209      	movs	r2, #9
 8007ec8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	887a      	ldrh	r2, [r7, #2]
 8007ece:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb65 	bl	80085b0 <USBH_CtlReq>
 8007ee6:	4603      	mov	r3, r0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	789b      	ldrb	r3, [r3, #2]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10f      	bne.n	8007f24 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb41 	bl	80085b0 <USBH_CtlReq>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10f      	bne.n	8007f6c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fb1d 	bl	80085b0 <USBH_CtlReq>
 8007f76:	4603      	mov	r3, r0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007f94:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e098      	b.n	80080d6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	785a      	ldrb	r2, [r3, #1]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3303      	adds	r3, #3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	791a      	ldrb	r2, [r3, #4]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	795a      	ldrb	r2, [r3, #5]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	799a      	ldrb	r2, [r3, #6]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	79da      	ldrb	r2, [r3, #7]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11b      	bne.n	800803c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	79db      	ldrb	r3, [r3, #7]
 8008008:	2b20      	cmp	r3, #32
 800800a:	dc0f      	bgt.n	800802c <USBH_ParseDevDesc+0xac>
 800800c:	2b08      	cmp	r3, #8
 800800e:	db0f      	blt.n	8008030 <USBH_ParseDevDesc+0xb0>
 8008010:	3b08      	subs	r3, #8
 8008012:	4a34      	ldr	r2, [pc, #208]	; (80080e4 <USBH_ParseDevDesc+0x164>)
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <USBH_ParseDevDesc+0xb8>
 800802a:	e001      	b.n	8008030 <USBH_ParseDevDesc+0xb0>
 800802c:	2b40      	cmp	r3, #64	; 0x40
 800802e:	d003      	beq.n	8008038 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2208      	movs	r2, #8
 8008034:	71da      	strb	r2, [r3, #7]
        break;
 8008036:	e000      	b.n	800803a <USBH_ParseDevDesc+0xba>
        break;
 8008038:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800803a:	e00e      	b.n	800805a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008042:	2b02      	cmp	r3, #2
 8008044:	d107      	bne.n	8008056 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	79db      	ldrb	r3, [r3, #7]
 800804a:	2b08      	cmp	r3, #8
 800804c:	d005      	beq.n	800805a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2208      	movs	r2, #8
 8008052:	71da      	strb	r2, [r3, #7]
 8008054:	e001      	b.n	800805a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008056:	2303      	movs	r3, #3
 8008058:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d939      	bls.n	80080d4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3308      	adds	r3, #8
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	3309      	adds	r3, #9
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	330a      	adds	r3, #10
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29a      	uxth	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	330b      	adds	r3, #11
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b29b      	uxth	r3, r3
 8008090:	4313      	orrs	r3, r2
 8008092:	b29a      	uxth	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	330c      	adds	r3, #12
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	330d      	adds	r3, #13
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	7b9a      	ldrb	r2, [r3, #14]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	7bda      	ldrb	r2, [r3, #15]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	7c1a      	ldrb	r2, [r3, #16]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	7c5a      	ldrb	r2, [r3, #17]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	01000101 	.word	0x01000101

080080e8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	; 0x30
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080fc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008116:	2302      	movs	r3, #2
 8008118:	e0db      	b.n	80082d2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	785a      	ldrb	r2, [r3, #1]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3302      	adds	r3, #2
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3303      	adds	r3, #3
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	b29b      	uxth	r3, r3
 8008142:	4313      	orrs	r3, r2
 8008144:	b29b      	uxth	r3, r3
 8008146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814a:	bf28      	it	cs
 800814c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008150:	b29a      	uxth	r2, r3
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	791a      	ldrb	r2, [r3, #4]
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	795a      	ldrb	r2, [r3, #5]
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	799a      	ldrb	r2, [r3, #6]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	79da      	ldrb	r2, [r3, #7]
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	7a1a      	ldrb	r2, [r3, #8]
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b09      	cmp	r3, #9
 8008184:	d002      	beq.n	800818c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	2209      	movs	r2, #9
 800818a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b09      	cmp	r3, #9
 8008190:	f240 809d 	bls.w	80082ce <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008194:	2309      	movs	r3, #9
 8008196:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800819c:	e081      	b.n	80082a2 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800819e:	f107 0316 	add.w	r3, r7, #22
 80081a2:	4619      	mov	r1, r3
 80081a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a6:	f000 f9e8 	bl	800857a <USBH_GetNextDesc>
 80081aa:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d176      	bne.n	80082a2 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d002      	beq.n	80081c2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	2209      	movs	r2, #9
 80081c0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80081c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081c6:	221a      	movs	r2, #26
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	3308      	adds	r3, #8
 80081ce:	6a3a      	ldr	r2, [r7, #32]
 80081d0:	4413      	add	r3, r2
 80081d2:	3302      	adds	r3, #2
 80081d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80081d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081d8:	69f8      	ldr	r0, [r7, #28]
 80081da:	f000 f87e 	bl	80082da <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081e8:	e043      	b.n	8008272 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081ea:	f107 0316 	add.w	r3, r7, #22
 80081ee:	4619      	mov	r1, r3
 80081f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f2:	f000 f9c2 	bl	800857a <USBH_GetNextDesc>
 80081f6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	d138      	bne.n	8008272 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	795b      	ldrb	r3, [r3, #5]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d113      	bne.n	8008230 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800820c:	2b02      	cmp	r3, #2
 800820e:	d003      	beq.n	8008218 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	799b      	ldrb	r3, [r3, #6]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d10b      	bne.n	8008230 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	79db      	ldrb	r3, [r3, #7]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10b      	bne.n	8008238 <USBH_ParseCfgDesc+0x150>
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b09      	cmp	r3, #9
 8008226:	d007      	beq.n	8008238 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	2209      	movs	r2, #9
 800822c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800822e:	e003      	b.n	8008238 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2207      	movs	r2, #7
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e000      	b.n	800823a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008238:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800823a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800823e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008242:	3201      	adds	r2, #1
 8008244:	00d2      	lsls	r2, r2, #3
 8008246:	211a      	movs	r1, #26
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	3308      	adds	r3, #8
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	4413      	add	r3, r2
 8008254:	3304      	adds	r3, #4
 8008256:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825a:	69b9      	ldr	r1, [r7, #24]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 f870 	bl	8008342 <USBH_ParseEPDesc>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800826c:	3301      	adds	r3, #1
 800826e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	791b      	ldrb	r3, [r3, #4]
 8008276:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800827a:	429a      	cmp	r2, r3
 800827c:	d204      	bcs.n	8008288 <USBH_ParseCfgDesc+0x1a0>
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	885a      	ldrh	r2, [r3, #2]
 8008282:	8afb      	ldrh	r3, [r7, #22]
 8008284:	429a      	cmp	r2, r3
 8008286:	d8b0      	bhi.n	80081ea <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008290:	429a      	cmp	r2, r3
 8008292:	d201      	bcs.n	8008298 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008294:	2303      	movs	r3, #3
 8008296:	e01c      	b.n	80082d2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800829c:	3301      	adds	r3, #1
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d805      	bhi.n	80082b6 <USBH_ParseCfgDesc+0x1ce>
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	885a      	ldrh	r2, [r3, #2]
 80082ae:	8afb      	ldrh	r3, [r7, #22]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	f63f af74 	bhi.w	800819e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	bf28      	it	cs
 80082be:	2302      	movcs	r3, #2
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d201      	bcs.n	80082ce <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e001      	b.n	80082d2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80082ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3730      	adds	r7, #48	; 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	785a      	ldrb	r2, [r3, #1]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	789a      	ldrb	r2, [r3, #2]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	78da      	ldrb	r2, [r3, #3]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b02      	cmp	r3, #2
 800830c:	bf28      	it	cs
 800830e:	2302      	movcs	r3, #2
 8008310:	b2da      	uxtb	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	795a      	ldrb	r2, [r3, #5]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	799a      	ldrb	r2, [r3, #6]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	79da      	ldrb	r2, [r3, #7]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	7a1a      	ldrb	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	721a      	strb	r2, [r3, #8]
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	785a      	ldrb	r2, [r3, #1]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	789a      	ldrb	r2, [r3, #2]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	78da      	ldrb	r2, [r3, #3]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3304      	adds	r3, #4
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b29a      	uxth	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3305      	adds	r3, #5
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	b29b      	uxth	r3, r3
 8008386:	4313      	orrs	r3, r2
 8008388:	b29a      	uxth	r2, r3
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	799a      	ldrb	r2, [r3, #6]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d009      	beq.n	80083b2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a6:	d804      	bhi.n	80083b2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d901      	bls.n	80083b6 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80083b2:	2303      	movs	r3, #3
 80083b4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d136      	bne.n	800842e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	78db      	ldrb	r3, [r3, #3]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d108      	bne.n	80083de <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	889b      	ldrh	r3, [r3, #4]
 80083d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d4:	f240 8097 	bls.w	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80083d8:	2303      	movs	r3, #3
 80083da:	75fb      	strb	r3, [r7, #23]
 80083dc:	e093      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	78db      	ldrb	r3, [r3, #3]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d107      	bne.n	80083fa <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	889b      	ldrh	r3, [r3, #4]
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	f240 8089 	bls.w	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80083f4:	2303      	movs	r3, #3
 80083f6:	75fb      	strb	r3, [r7, #23]
 80083f8:	e085      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	78db      	ldrb	r3, [r3, #3]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b01      	cmp	r3, #1
 8008404:	d005      	beq.n	8008412 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800840e:	2b03      	cmp	r3, #3
 8008410:	d10a      	bne.n	8008428 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	799b      	ldrb	r3, [r3, #6]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <USBH_ParseEPDesc+0xe0>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	799b      	ldrb	r3, [r3, #6]
 800841e:	2b10      	cmp	r3, #16
 8008420:	d970      	bls.n	8008504 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008422:	2303      	movs	r3, #3
 8008424:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008426:	e06d      	b.n	8008504 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008428:	2303      	movs	r3, #3
 800842a:	75fb      	strb	r3, [r7, #23]
 800842c:	e06b      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008434:	2b01      	cmp	r3, #1
 8008436:	d13c      	bne.n	80084b2 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	78db      	ldrb	r3, [r3, #3]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d005      	beq.n	8008450 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	78db      	ldrb	r3, [r3, #3]
 8008448:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800844c:	2b00      	cmp	r3, #0
 800844e:	d106      	bne.n	800845e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	889b      	ldrh	r3, [r3, #4]
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d956      	bls.n	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008458:	2303      	movs	r3, #3
 800845a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800845c:	e053      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	78db      	ldrb	r3, [r3, #3]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d10e      	bne.n	8008488 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	799b      	ldrb	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008476:	2b10      	cmp	r3, #16
 8008478:	d803      	bhi.n	8008482 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d941      	bls.n	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008482:	2303      	movs	r3, #3
 8008484:	75fb      	strb	r3, [r7, #23]
 8008486:	e03e      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	78db      	ldrb	r3, [r3, #3]
 800848c:	f003 0303 	and.w	r3, r3, #3
 8008490:	2b03      	cmp	r3, #3
 8008492:	d10b      	bne.n	80084ac <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	799b      	ldrb	r3, [r3, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <USBH_ParseEPDesc+0x164>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	889b      	ldrh	r3, [r3, #4]
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d32f      	bcc.n	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084a6:	2303      	movs	r3, #3
 80084a8:	75fb      	strb	r3, [r7, #23]
 80084aa:	e02c      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084ac:	2303      	movs	r3, #3
 80084ae:	75fb      	strb	r3, [r7, #23]
 80084b0:	e029      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d120      	bne.n	80084fe <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	889b      	ldrh	r3, [r3, #4]
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d01a      	beq.n	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084d0:	2303      	movs	r3, #3
 80084d2:	75fb      	strb	r3, [r7, #23]
 80084d4:	e017      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	78db      	ldrb	r3, [r3, #3]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d10a      	bne.n	80084f8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	799b      	ldrb	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <USBH_ParseEPDesc+0x1b0>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d909      	bls.n	8008506 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80084f2:	2303      	movs	r3, #3
 80084f4:	75fb      	strb	r3, [r7, #23]
 80084f6:	e006      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084f8:	2303      	movs	r3, #3
 80084fa:	75fb      	strb	r3, [r7, #23]
 80084fc:	e003      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80084fe:	2303      	movs	r3, #3
 8008500:	75fb      	strb	r3, [r7, #23]
 8008502:	e000      	b.n	8008506 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008504:	bf00      	nop
  }

  return status;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b03      	cmp	r3, #3
 800852a:	d120      	bne.n	800856e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	1e9a      	subs	r2, r3, #2
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	4293      	cmp	r3, r2
 8008536:	bf28      	it	cs
 8008538:	4613      	movcs	r3, r2
 800853a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3302      	adds	r3, #2
 8008540:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008542:	2300      	movs	r3, #0
 8008544:	82fb      	strh	r3, [r7, #22]
 8008546:	e00b      	b.n	8008560 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008548:	8afb      	ldrh	r3, [r7, #22]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	781a      	ldrb	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	3301      	adds	r3, #1
 8008558:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800855a:	8afb      	ldrh	r3, [r7, #22]
 800855c:	3302      	adds	r3, #2
 800855e:	82fb      	strh	r3, [r7, #22]
 8008560:	8afa      	ldrh	r2, [r7, #22]
 8008562:	8abb      	ldrh	r3, [r7, #20]
 8008564:	429a      	cmp	r2, r3
 8008566:	d3ef      	bcc.n	8008548 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
  }
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	881a      	ldrh	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	4413      	add	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	789b      	ldrb	r3, [r3, #2]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d002      	beq.n	80085d0 <USBH_CtlReq+0x20>
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d00f      	beq.n	80085ee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80085ce:	e027      	b.n	8008620 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	88fa      	ldrh	r2, [r7, #6]
 80085da:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2202      	movs	r2, #2
 80085e6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80085e8:	2301      	movs	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
      break;
 80085ec:	e018      	b.n	8008620 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f81c 	bl	800862c <USBH_HandleControl>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <USBH_CtlReq+0x54>
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	2b03      	cmp	r3, #3
 8008602:	d106      	bne.n	8008612 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	761a      	strb	r2, [r3, #24]
      break;
 8008610:	e005      	b.n	800861e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d102      	bne.n	800861e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	709a      	strb	r2, [r3, #2]
      break;
 800861e:	bf00      	nop
  }
  return status;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af02      	add	r7, sp, #8
 8008632:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7e1b      	ldrb	r3, [r3, #24]
 8008640:	3b01      	subs	r3, #1
 8008642:	2b0a      	cmp	r3, #10
 8008644:	f200 8156 	bhi.w	80088f4 <USBH_HandleControl+0x2c8>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <USBH_HandleControl+0x24>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	0800867d 	.word	0x0800867d
 8008654:	08008697 	.word	0x08008697
 8008658:	08008701 	.word	0x08008701
 800865c:	08008727 	.word	0x08008727
 8008660:	0800875f 	.word	0x0800875f
 8008664:	08008789 	.word	0x08008789
 8008668:	080087db 	.word	0x080087db
 800866c:	080087fd 	.word	0x080087fd
 8008670:	08008839 	.word	0x08008839
 8008674:	0800885f 	.word	0x0800885f
 8008678:	0800889d 	.word	0x0800889d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f103 0110 	add.w	r1, r3, #16
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	795b      	ldrb	r3, [r3, #5]
 8008686:	461a      	mov	r2, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f943 	bl	8008914 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	761a      	strb	r2, [r3, #24]
      break;
 8008694:	e139      	b.n	800890a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	795b      	ldrb	r3, [r3, #5]
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fcc5 	bl	800902c <USBH_LL_GetURBState>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d11e      	bne.n	80086ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7c1b      	ldrb	r3, [r3, #16]
 80086b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8adb      	ldrh	r3, [r3, #22]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80086be:	7b7b      	ldrb	r3, [r7, #13]
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d103      	bne.n	80086cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2203      	movs	r2, #3
 80086c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086ca:	e115      	b.n	80088f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2205      	movs	r2, #5
 80086d0:	761a      	strb	r2, [r3, #24]
      break;
 80086d2:	e111      	b.n	80088f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80086d4:	7b7b      	ldrb	r3, [r7, #13]
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d103      	bne.n	80086e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2209      	movs	r2, #9
 80086de:	761a      	strb	r2, [r3, #24]
      break;
 80086e0:	e10a      	b.n	80088f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2207      	movs	r2, #7
 80086e6:	761a      	strb	r2, [r3, #24]
      break;
 80086e8:	e106      	b.n	80088f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d003      	beq.n	80086f8 <USBH_HandleControl+0xcc>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	f040 8100 	bne.w	80088f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	220b      	movs	r2, #11
 80086fc:	761a      	strb	r2, [r3, #24]
      break;
 80086fe:	e0fb      	b.n	80088f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6899      	ldr	r1, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	899a      	ldrh	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	791b      	ldrb	r3, [r3, #4]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f93a 	bl	8008992 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2204      	movs	r2, #4
 8008722:	761a      	strb	r2, [r3, #24]
      break;
 8008724:	e0f1      	b.n	800890a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	791b      	ldrb	r3, [r3, #4]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fc7d 	bl	800902c <USBH_LL_GetURBState>
 8008732:	4603      	mov	r3, r0
 8008734:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d102      	bne.n	8008742 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2209      	movs	r2, #9
 8008740:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b05      	cmp	r3, #5
 8008746:	d102      	bne.n	800874e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008748:	2303      	movs	r3, #3
 800874a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800874c:	e0d6      	b.n	80088fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b04      	cmp	r3, #4
 8008752:	f040 80d3 	bne.w	80088fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220b      	movs	r2, #11
 800875a:	761a      	strb	r2, [r3, #24]
      break;
 800875c:	e0ce      	b.n	80088fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6899      	ldr	r1, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	899a      	ldrh	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	795b      	ldrb	r3, [r3, #5]
 800876a:	2001      	movs	r0, #1
 800876c:	9000      	str	r0, [sp, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8ea 	bl	8008948 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2206      	movs	r2, #6
 8008784:	761a      	strb	r2, [r3, #24]
      break;
 8008786:	e0c0      	b.n	800890a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	795b      	ldrb	r3, [r3, #5]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fc4c 	bl	800902c <USBH_LL_GetURBState>
 8008794:	4603      	mov	r3, r0
 8008796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d103      	bne.n	80087a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2207      	movs	r2, #7
 80087a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087a4:	e0ac      	b.n	8008900 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d105      	bne.n	80087b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	220c      	movs	r2, #12
 80087b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e0a3      	b.n	8008900 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d103      	bne.n	80087c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2205      	movs	r2, #5
 80087c2:	761a      	strb	r2, [r3, #24]
      break;
 80087c4:	e09c      	b.n	8008900 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	f040 8099 	bne.w	8008900 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	220b      	movs	r2, #11
 80087d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80087d4:	2302      	movs	r3, #2
 80087d6:	73fb      	strb	r3, [r7, #15]
      break;
 80087d8:	e092      	b.n	8008900 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f8d5 	bl	8008992 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2208      	movs	r2, #8
 80087f8:	761a      	strb	r2, [r3, #24]

      break;
 80087fa:	e086      	b.n	800890a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	791b      	ldrb	r3, [r3, #4]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc12 	bl	800902c <USBH_LL_GetURBState>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d105      	bne.n	800881e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	220d      	movs	r2, #13
 8008816:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800881c:	e072      	b.n	8008904 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b04      	cmp	r3, #4
 8008822:	d103      	bne.n	800882c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	220b      	movs	r2, #11
 8008828:	761a      	strb	r2, [r3, #24]
      break;
 800882a:	e06b      	b.n	8008904 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d168      	bne.n	8008904 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008832:	2303      	movs	r3, #3
 8008834:	73fb      	strb	r3, [r7, #15]
      break;
 8008836:	e065      	b.n	8008904 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	795b      	ldrb	r3, [r3, #5]
 800883c:	2201      	movs	r2, #1
 800883e:	9200      	str	r2, [sp, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	2100      	movs	r1, #0
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f87f 	bl	8008948 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	220a      	movs	r2, #10
 800885a:	761a      	strb	r2, [r3, #24]
      break;
 800885c:	e055      	b.n	800890a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	795b      	ldrb	r3, [r3, #5]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fbe1 	bl	800902c <USBH_LL_GetURBState>
 800886a:	4603      	mov	r3, r0
 800886c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d105      	bne.n	8008880 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	220d      	movs	r2, #13
 800887c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800887e:	e043      	b.n	8008908 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d103      	bne.n	800888e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2209      	movs	r2, #9
 800888a:	761a      	strb	r2, [r3, #24]
      break;
 800888c:	e03c      	b.n	8008908 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d139      	bne.n	8008908 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	220b      	movs	r2, #11
 8008898:	761a      	strb	r2, [r3, #24]
      break;
 800889a:	e035      	b.n	8008908 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7e5b      	ldrb	r3, [r3, #25]
 80088a0:	3301      	adds	r3, #1
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	765a      	strb	r2, [r3, #25]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7e5b      	ldrb	r3, [r3, #25]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d806      	bhi.n	80088be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80088bc:	e025      	b.n	800890a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088c4:	2106      	movs	r1, #6
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	795b      	ldrb	r3, [r3, #5]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f90c 	bl	8008af4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	791b      	ldrb	r3, [r3, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f906 	bl	8008af4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088ee:	2302      	movs	r3, #2
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e00a      	b.n	800890a <USBH_HandleControl+0x2de>

    default:
      break;
 80088f4:	bf00      	nop
 80088f6:	e008      	b.n	800890a <USBH_HandleControl+0x2de>
      break;
 80088f8:	bf00      	nop
 80088fa:	e006      	b.n	800890a <USBH_HandleControl+0x2de>
      break;
 80088fc:	bf00      	nop
 80088fe:	e004      	b.n	800890a <USBH_HandleControl+0x2de>
      break;
 8008900:	bf00      	nop
 8008902:	e002      	b.n	800890a <USBH_HandleControl+0x2de>
      break;
 8008904:	bf00      	nop
 8008906:	e000      	b.n	800890a <USBH_HandleControl+0x2de>
      break;
 8008908:	bf00      	nop
  }

  return status;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af04      	add	r7, sp, #16
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008922:	79f9      	ldrb	r1, [r7, #7]
 8008924:	2300      	movs	r3, #0
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	2308      	movs	r3, #8
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	2200      	movs	r2, #0
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb46 	bl	8008fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af04      	add	r7, sp, #16
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	460b      	mov	r3, r1
 8008958:	80fb      	strh	r3, [r7, #6]
 800895a:	4613      	mov	r3, r2
 800895c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800896c:	7979      	ldrb	r1, [r7, #5]
 800896e:	7e3b      	ldrb	r3, [r7, #24]
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	2301      	movs	r3, #1
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	2300      	movs	r3, #0
 8008980:	2200      	movs	r2, #0
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fb21 	bl	8008fca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	af04      	add	r7, sp, #16
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	4611      	mov	r1, r2
 800899e:	461a      	mov	r2, r3
 80089a0:	460b      	mov	r3, r1
 80089a2:	80fb      	strh	r3, [r7, #6]
 80089a4:	4613      	mov	r3, r2
 80089a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a8:	7979      	ldrb	r1, [r7, #5]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	2301      	movs	r3, #1
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	2201      	movs	r2, #1
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fb03 	bl	8008fca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089c4:	2300      	movs	r3, #0

}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b088      	sub	sp, #32
 80089d2:	af04      	add	r7, sp, #16
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	4611      	mov	r1, r2
 80089da:	461a      	mov	r2, r3
 80089dc:	460b      	mov	r3, r1
 80089de:	80fb      	strh	r3, [r7, #6]
 80089e0:	4613      	mov	r3, r2
 80089e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089f2:	7979      	ldrb	r1, [r7, #5]
 80089f4:	7e3b      	ldrb	r3, [r7, #24]
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	2301      	movs	r3, #1
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2302      	movs	r3, #2
 8008a06:	2200      	movs	r2, #0
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fade 	bl	8008fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af04      	add	r7, sp, #16
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	460b      	mov	r3, r1
 8008a28:	80fb      	strh	r3, [r7, #6]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a2e:	7979      	ldrb	r1, [r7, #5]
 8008a30:	2300      	movs	r3, #0
 8008a32:	9303      	str	r3, [sp, #12]
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	9302      	str	r3, [sp, #8]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	2302      	movs	r3, #2
 8008a42:	2201      	movs	r2, #1
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 fac0 	bl	8008fca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	4611      	mov	r1, r2
 8008a60:	461a      	mov	r2, r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	70fb      	strb	r3, [r7, #3]
 8008a66:	460b      	mov	r3, r1
 8008a68:	70bb      	strb	r3, [r7, #2]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a6e:	7878      	ldrb	r0, [r7, #1]
 8008a70:	78ba      	ldrb	r2, [r7, #2]
 8008a72:	78f9      	ldrb	r1, [r7, #3]
 8008a74:	8b3b      	ldrh	r3, [r7, #24]
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	7d3b      	ldrb	r3, [r7, #20]
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	7c3b      	ldrb	r3, [r7, #16]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4603      	mov	r3, r0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa53 	bl	8008f2e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa72 	bl	8008f8c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f836 	bl	8008b30 <USBH_GetFreePipe>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
 8008aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00a      	beq.n	8008ae8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	89fb      	ldrh	r3, [r7, #14]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	33e0      	adds	r3, #224	; 0xe0
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ae8:	89fb      	ldrh	r3, [r7, #14]
 8008aea:	b2db      	uxtb	r3, r3
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2b0f      	cmp	r3, #15
 8008b04:	d80d      	bhi.n	8008b22 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	33e0      	adds	r3, #224	; 0xe0
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	33e0      	adds	r3, #224	; 0xe0
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
 8008b40:	e00f      	b.n	8008b62 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	33e0      	adds	r3, #224	; 0xe0
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	e007      	b.n	8008b6c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	2b0f      	cmp	r3, #15
 8008b66:	d9ec      	bls.n	8008b42 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	490e      	ldr	r1, [pc, #56]	; (8008bb8 <MX_USB_HOST_Init+0x40>)
 8008b80:	480e      	ldr	r0, [pc, #56]	; (8008bbc <MX_USB_HOST_Init+0x44>)
 8008b82:	f7fe fb05 	bl	8007190 <USBH_Init>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b8c:	f7f8 f948 	bl	8000e20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b90:	490b      	ldr	r1, [pc, #44]	; (8008bc0 <MX_USB_HOST_Init+0x48>)
 8008b92:	480a      	ldr	r0, [pc, #40]	; (8008bbc <MX_USB_HOST_Init+0x44>)
 8008b94:	f7fe fba9 	bl	80072ea <USBH_RegisterClass>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b9e:	f7f8 f93f 	bl	8000e20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008ba2:	4806      	ldr	r0, [pc, #24]	; (8008bbc <MX_USB_HOST_Init+0x44>)
 8008ba4:	f7fe fc2d 	bl	8007402 <USBH_Start>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008bae:	f7f8 f937 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	2000037c 	.word	0x2000037c
 8008bc0:	200001f4 	.word	0x200001f4

08008bc4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008bc8:	4802      	ldr	r0, [pc, #8]	; (8008bd4 <MX_USB_HOST_Process+0x10>)
 8008bca:	f7fe fc2b 	bl	8007424 <USBH_Process>
}
 8008bce:	bf00      	nop
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000037c 	.word	0x2000037c

08008bd8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d819      	bhi.n	8008c20 <USBH_UserProcess+0x48>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <USBH_UserProcess+0x1c>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c21 	.word	0x08008c21
 8008bf8:	08008c11 	.word	0x08008c11
 8008bfc:	08008c21 	.word	0x08008c21
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c09 	.word	0x08008c09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <USBH_UserProcess+0x58>)
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	701a      	strb	r2, [r3, #0]
  break;
 8008c0e:	e008      	b.n	8008c22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c10:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <USBH_UserProcess+0x58>)
 8008c12:	2202      	movs	r2, #2
 8008c14:	701a      	strb	r2, [r3, #0]
  break;
 8008c16:	e004      	b.n	8008c22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <USBH_UserProcess+0x58>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
  break;
 8008c1e:	e000      	b.n	8008c22 <USBH_UserProcess+0x4a>

  default:
  break;
 8008c20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000754 	.word	0x20000754

08008c34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	609a      	str	r2, [r3, #8]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c54:	d147      	bne.n	8008ce6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	6313      	str	r3, [r2, #48]	; 0x30
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	4619      	mov	r1, r3
 8008c86:	481b      	ldr	r0, [pc, #108]	; (8008cf4 <HAL_HCD_MspInit+0xc0>)
 8008c88:	f7f8 fc56 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c92:	2302      	movs	r3, #2
 8008c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c9e:	230a      	movs	r3, #10
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4812      	ldr	r0, [pc, #72]	; (8008cf4 <HAL_HCD_MspInit+0xc0>)
 8008caa:	f7f8 fc45 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cae:	4b10      	ldr	r3, [pc, #64]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb2:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	6353      	str	r3, [r2, #52]	; 0x34
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc2:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <HAL_HCD_MspInit+0xbc>)
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2043      	movs	r0, #67	; 0x43
 8008cdc:	f7f8 fbf5 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ce0:	2043      	movs	r0, #67	; 0x43
 8008ce2:	f7f8 fc0e 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	3728      	adds	r7, #40	; 0x28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	40020000 	.word	0x40020000

08008cf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe ff6b 	bl	8007be2 <USBH_LL_IncTimer>
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe ffa3 	bl	8007c6e <USBH_LL_Connect>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe ffac 	bl	8007c9c <USBH_LL_Disconnect>
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe ff5d 	bl	8007c36 <USBH_LL_PortEnabled>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe ff5d 	bl	8007c52 <USBH_LL_PortDisabled>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d12a      	bne.n	8008e08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008db2:	4a18      	ldr	r2, [pc, #96]	; (8008e14 <USBH_LL_Init+0x74>)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dbe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dcc:	2208      	movs	r2, #8
 8008dce:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dde:	2202      	movs	r2, #2
 8008de0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008de2:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <USBH_LL_Init+0x74>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008de8:	480a      	ldr	r0, [pc, #40]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dea:	f7f8 fd5a 	bl	80018a2 <HAL_HCD_Init>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008df4:	f7f8 f814 	bl	8000e20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008df8:	4806      	ldr	r0, [pc, #24]	; (8008e14 <USBH_LL_Init+0x74>)
 8008dfa:	f7f9 f9bb 	bl	8002174 <HAL_HCD_GetCurrentFrame>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fe fede 	bl	8007bc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000758 	.word	0x20000758

08008e18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f9 f928 	bl	8002084 <HAL_HCD_Start>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f95e 	bl	80090fc <USBH_Get_USB_Status>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7f9 f930 	bl	80020ca <HAL_HCD_Stop>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 f943 	bl	80090fc <USBH_Get_USB_Status>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f9 f97a 	bl	8002190 <HAL_HCD_GetCurrentSpeed>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d00c      	beq.n	8008ebc <USBH_LL_GetSpeed+0x38>
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d80d      	bhi.n	8008ec2 <USBH_LL_GetSpeed+0x3e>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <USBH_LL_GetSpeed+0x2c>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d003      	beq.n	8008eb6 <USBH_LL_GetSpeed+0x32>
 8008eae:	e008      	b.n	8008ec2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e008      	b.n	8008ec8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	e005      	b.n	8008ec8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e002      	b.n	8008ec8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	bf00      	nop
  }
  return  speed;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7f9 f90b 	bl	8002104 <HAL_HCD_ResetPort>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f901 	bl	80090fc <USBH_Get_USB_Status>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f9 f913 	bl	800214a <HAL_HCD_HC_GetXferCount>
 8008f24:	4603      	mov	r3, r0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f2e:	b590      	push	{r4, r7, lr}
 8008f30:	b089      	sub	sp, #36	; 0x24
 8008f32:	af04      	add	r7, sp, #16
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	70fb      	strb	r3, [r7, #3]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70bb      	strb	r3, [r7, #2]
 8008f44:	4613      	mov	r3, r2
 8008f46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f56:	787c      	ldrb	r4, [r7, #1]
 8008f58:	78ba      	ldrb	r2, [r7, #2]
 8008f5a:	78f9      	ldrb	r1, [r7, #3]
 8008f5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f5e:	9302      	str	r3, [sp, #8]
 8008f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	f7f8 fcff 	bl	8001970 <HAL_HCD_HC_Init>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 f8bf 	bl	80090fc <USBH_Get_USB_Status>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd90      	pop	{r4, r7, pc}

08008f8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f8 fd98 	bl	8001ae0 <HAL_HCD_HC_Halt>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f8a0 	bl	80090fc <USBH_Get_USB_Status>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008fca:	b590      	push	{r4, r7, lr}
 8008fcc:	b089      	sub	sp, #36	; 0x24
 8008fce:	af04      	add	r7, sp, #16
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	70fb      	strb	r3, [r7, #3]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70bb      	strb	r3, [r7, #2]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ff2:	787c      	ldrb	r4, [r7, #1]
 8008ff4:	78ba      	ldrb	r2, [r7, #2]
 8008ff6:	78f9      	ldrb	r1, [r7, #3]
 8008ff8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009000:	9302      	str	r3, [sp, #8]
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4623      	mov	r3, r4
 800900e:	f7f8 fd8b 	bl	8001b28 <HAL_HCD_HC_SubmitRequest>
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 f86f 	bl	80090fc <USBH_Get_USB_Status>
 800901e:	4603      	mov	r3, r0
 8009020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009022:	7bbb      	ldrb	r3, [r7, #14]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	bd90      	pop	{r4, r7, pc}

0800902c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	4611      	mov	r1, r2
 8009042:	4618      	mov	r0, r3
 8009044:	f7f9 f86c 	bl	8002120 <HAL_HCD_HC_GetURBState>
 8009048:	4603      	mov	r3, r0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009064:	2b01      	cmp	r3, #1
 8009066:	d103      	bne.n	8009070 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f872 	bl	8009154 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009070:	20c8      	movs	r0, #200	; 0xc8
 8009072:	f7f8 f92b 	bl	80012cc <HAL_Delay>
  return USBH_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
 800908c:	4613      	mov	r3, r2
 800908e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009096:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	4613      	mov	r3, r2
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	3317      	adds	r3, #23
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	68f9      	ldr	r1, [r7, #12]
 80090b2:	4613      	mov	r3, r2
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	333c      	adds	r3, #60	; 0x3c
 80090be:	78ba      	ldrb	r2, [r7, #2]
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e009      	b.n	80090d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	4613      	mov	r3, r2
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	333d      	adds	r3, #61	; 0x3d
 80090d4:	78ba      	ldrb	r2, [r7, #2]
 80090d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7f8 f8ec 	bl	80012cc <HAL_Delay>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d817      	bhi.n	8009140 <USBH_Get_USB_Status+0x44>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <USBH_Get_USB_Status+0x1c>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009129 	.word	0x08009129
 800911c:	0800912f 	.word	0x0800912f
 8009120:	08009135 	.word	0x08009135
 8009124:	0800913b 	.word	0x0800913b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
    break;
 800912c:	e00b      	b.n	8009146 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800912e:	2302      	movs	r3, #2
 8009130:	73fb      	strb	r3, [r7, #15]
    break;
 8009132:	e008      	b.n	8009146 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
    break;
 8009138:	e005      	b.n	8009146 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]
    break;
 800913e:	e002      	b.n	8009146 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009140:	2302      	movs	r3, #2
 8009142:	73fb      	strb	r3, [r7, #15]
    break;
 8009144:	bf00      	nop
  }
  return usb_status;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e001      	b.n	8009172 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800916e:	2301      	movs	r3, #1
 8009170:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	461a      	mov	r2, r3
 8009176:	2101      	movs	r1, #1
 8009178:	4803      	ldr	r0, [pc, #12]	; (8009188 <MX_DriverVbusFS+0x34>)
 800917a:	f7f8 fb79 	bl	8001870 <HAL_GPIO_WritePin>
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	40020800 	.word	0x40020800

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 b82b 	b.w	80091ec <_malloc_r>
 8009196:	bf00      	nop
 8009198:	20000260 	.word	0x20000260

0800919c <free>:
 800919c:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <free+0xc>)
 800919e:	4601      	mov	r1, r0
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f000 b8f3 	b.w	800938c <_free_r>
 80091a6:	bf00      	nop
 80091a8:	20000260 	.word	0x20000260

080091ac <sbrk_aligned>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	4e0e      	ldr	r6, [pc, #56]	; (80091e8 <sbrk_aligned+0x3c>)
 80091b0:	460c      	mov	r4, r1
 80091b2:	6831      	ldr	r1, [r6, #0]
 80091b4:	4605      	mov	r5, r0
 80091b6:	b911      	cbnz	r1, 80091be <sbrk_aligned+0x12>
 80091b8:	f000 f8ac 	bl	8009314 <_sbrk_r>
 80091bc:	6030      	str	r0, [r6, #0]
 80091be:	4621      	mov	r1, r4
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 f8a7 	bl	8009314 <_sbrk_r>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d00a      	beq.n	80091e0 <sbrk_aligned+0x34>
 80091ca:	1cc4      	adds	r4, r0, #3
 80091cc:	f024 0403 	bic.w	r4, r4, #3
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d007      	beq.n	80091e4 <sbrk_aligned+0x38>
 80091d4:	1a21      	subs	r1, r4, r0
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 f89c 	bl	8009314 <_sbrk_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d101      	bne.n	80091e4 <sbrk_aligned+0x38>
 80091e0:	f04f 34ff 	mov.w	r4, #4294967295
 80091e4:	4620      	mov	r0, r4
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	20000b3c 	.word	0x20000b3c

080091ec <_malloc_r>:
 80091ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	1ccd      	adds	r5, r1, #3
 80091f2:	f025 0503 	bic.w	r5, r5, #3
 80091f6:	3508      	adds	r5, #8
 80091f8:	2d0c      	cmp	r5, #12
 80091fa:	bf38      	it	cc
 80091fc:	250c      	movcc	r5, #12
 80091fe:	2d00      	cmp	r5, #0
 8009200:	4607      	mov	r7, r0
 8009202:	db01      	blt.n	8009208 <_malloc_r+0x1c>
 8009204:	42a9      	cmp	r1, r5
 8009206:	d905      	bls.n	8009214 <_malloc_r+0x28>
 8009208:	230c      	movs	r3, #12
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	2600      	movs	r6, #0
 800920e:	4630      	mov	r0, r6
 8009210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009214:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092e8 <_malloc_r+0xfc>
 8009218:	f000 f868 	bl	80092ec <__malloc_lock>
 800921c:	f8d8 3000 	ldr.w	r3, [r8]
 8009220:	461c      	mov	r4, r3
 8009222:	bb5c      	cbnz	r4, 800927c <_malloc_r+0x90>
 8009224:	4629      	mov	r1, r5
 8009226:	4638      	mov	r0, r7
 8009228:	f7ff ffc0 	bl	80091ac <sbrk_aligned>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	4604      	mov	r4, r0
 8009230:	d155      	bne.n	80092de <_malloc_r+0xf2>
 8009232:	f8d8 4000 	ldr.w	r4, [r8]
 8009236:	4626      	mov	r6, r4
 8009238:	2e00      	cmp	r6, #0
 800923a:	d145      	bne.n	80092c8 <_malloc_r+0xdc>
 800923c:	2c00      	cmp	r4, #0
 800923e:	d048      	beq.n	80092d2 <_malloc_r+0xe6>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	4631      	mov	r1, r6
 8009244:	4638      	mov	r0, r7
 8009246:	eb04 0903 	add.w	r9, r4, r3
 800924a:	f000 f863 	bl	8009314 <_sbrk_r>
 800924e:	4581      	cmp	r9, r0
 8009250:	d13f      	bne.n	80092d2 <_malloc_r+0xe6>
 8009252:	6821      	ldr	r1, [r4, #0]
 8009254:	1a6d      	subs	r5, r5, r1
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ffa7 	bl	80091ac <sbrk_aligned>
 800925e:	3001      	adds	r0, #1
 8009260:	d037      	beq.n	80092d2 <_malloc_r+0xe6>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	442b      	add	r3, r5
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	f8d8 3000 	ldr.w	r3, [r8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d038      	beq.n	80092e2 <_malloc_r+0xf6>
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	42a2      	cmp	r2, r4
 8009274:	d12b      	bne.n	80092ce <_malloc_r+0xe2>
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
 800927a:	e00f      	b.n	800929c <_malloc_r+0xb0>
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	1b52      	subs	r2, r2, r5
 8009280:	d41f      	bmi.n	80092c2 <_malloc_r+0xd6>
 8009282:	2a0b      	cmp	r2, #11
 8009284:	d917      	bls.n	80092b6 <_malloc_r+0xca>
 8009286:	1961      	adds	r1, r4, r5
 8009288:	42a3      	cmp	r3, r4
 800928a:	6025      	str	r5, [r4, #0]
 800928c:	bf18      	it	ne
 800928e:	6059      	strne	r1, [r3, #4]
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	bf08      	it	eq
 8009294:	f8c8 1000 	streq.w	r1, [r8]
 8009298:	5162      	str	r2, [r4, r5]
 800929a:	604b      	str	r3, [r1, #4]
 800929c:	4638      	mov	r0, r7
 800929e:	f104 060b 	add.w	r6, r4, #11
 80092a2:	f000 f829 	bl	80092f8 <__malloc_unlock>
 80092a6:	f026 0607 	bic.w	r6, r6, #7
 80092aa:	1d23      	adds	r3, r4, #4
 80092ac:	1af2      	subs	r2, r6, r3
 80092ae:	d0ae      	beq.n	800920e <_malloc_r+0x22>
 80092b0:	1b9b      	subs	r3, r3, r6
 80092b2:	50a3      	str	r3, [r4, r2]
 80092b4:	e7ab      	b.n	800920e <_malloc_r+0x22>
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	6862      	ldr	r2, [r4, #4]
 80092ba:	d1dd      	bne.n	8009278 <_malloc_r+0x8c>
 80092bc:	f8c8 2000 	str.w	r2, [r8]
 80092c0:	e7ec      	b.n	800929c <_malloc_r+0xb0>
 80092c2:	4623      	mov	r3, r4
 80092c4:	6864      	ldr	r4, [r4, #4]
 80092c6:	e7ac      	b.n	8009222 <_malloc_r+0x36>
 80092c8:	4634      	mov	r4, r6
 80092ca:	6876      	ldr	r6, [r6, #4]
 80092cc:	e7b4      	b.n	8009238 <_malloc_r+0x4c>
 80092ce:	4613      	mov	r3, r2
 80092d0:	e7cc      	b.n	800926c <_malloc_r+0x80>
 80092d2:	230c      	movs	r3, #12
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f000 f80e 	bl	80092f8 <__malloc_unlock>
 80092dc:	e797      	b.n	800920e <_malloc_r+0x22>
 80092de:	6025      	str	r5, [r4, #0]
 80092e0:	e7dc      	b.n	800929c <_malloc_r+0xb0>
 80092e2:	605b      	str	r3, [r3, #4]
 80092e4:	deff      	udf	#255	; 0xff
 80092e6:	bf00      	nop
 80092e8:	20000b38 	.word	0x20000b38

080092ec <__malloc_lock>:
 80092ec:	4801      	ldr	r0, [pc, #4]	; (80092f4 <__malloc_lock+0x8>)
 80092ee:	f000 b84b 	b.w	8009388 <__retarget_lock_acquire_recursive>
 80092f2:	bf00      	nop
 80092f4:	20000c7c 	.word	0x20000c7c

080092f8 <__malloc_unlock>:
 80092f8:	4801      	ldr	r0, [pc, #4]	; (8009300 <__malloc_unlock+0x8>)
 80092fa:	f000 b846 	b.w	800938a <__retarget_lock_release_recursive>
 80092fe:	bf00      	nop
 8009300:	20000c7c 	.word	0x20000c7c

08009304 <memset>:
 8009304:	4402      	add	r2, r0
 8009306:	4603      	mov	r3, r0
 8009308:	4293      	cmp	r3, r2
 800930a:	d100      	bne.n	800930e <memset+0xa>
 800930c:	4770      	bx	lr
 800930e:	f803 1b01 	strb.w	r1, [r3], #1
 8009312:	e7f9      	b.n	8009308 <memset+0x4>

08009314 <_sbrk_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d06      	ldr	r5, [pc, #24]	; (8009330 <_sbrk_r+0x1c>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	f7f7 fef0 	bl	8001104 <_sbrk>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_sbrk_r+0x1a>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_sbrk_r+0x1a>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	20000c78 	.word	0x20000c78

08009334 <__errno>:
 8009334:	4b01      	ldr	r3, [pc, #4]	; (800933c <__errno+0x8>)
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000260 	.word	0x20000260

08009340 <__libc_init_array>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	4d0d      	ldr	r5, [pc, #52]	; (8009378 <__libc_init_array+0x38>)
 8009344:	4c0d      	ldr	r4, [pc, #52]	; (800937c <__libc_init_array+0x3c>)
 8009346:	1b64      	subs	r4, r4, r5
 8009348:	10a4      	asrs	r4, r4, #2
 800934a:	2600      	movs	r6, #0
 800934c:	42a6      	cmp	r6, r4
 800934e:	d109      	bne.n	8009364 <__libc_init_array+0x24>
 8009350:	4d0b      	ldr	r5, [pc, #44]	; (8009380 <__libc_init_array+0x40>)
 8009352:	4c0c      	ldr	r4, [pc, #48]	; (8009384 <__libc_init_array+0x44>)
 8009354:	f000 f866 	bl	8009424 <_init>
 8009358:	1b64      	subs	r4, r4, r5
 800935a:	10a4      	asrs	r4, r4, #2
 800935c:	2600      	movs	r6, #0
 800935e:	42a6      	cmp	r6, r4
 8009360:	d105      	bne.n	800936e <__libc_init_array+0x2e>
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	f855 3b04 	ldr.w	r3, [r5], #4
 8009368:	4798      	blx	r3
 800936a:	3601      	adds	r6, #1
 800936c:	e7ee      	b.n	800934c <__libc_init_array+0xc>
 800936e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009372:	4798      	blx	r3
 8009374:	3601      	adds	r6, #1
 8009376:	e7f2      	b.n	800935e <__libc_init_array+0x1e>
 8009378:	08009478 	.word	0x08009478
 800937c:	08009478 	.word	0x08009478
 8009380:	08009478 	.word	0x08009478
 8009384:	0800947c 	.word	0x0800947c

08009388 <__retarget_lock_acquire_recursive>:
 8009388:	4770      	bx	lr

0800938a <__retarget_lock_release_recursive>:
 800938a:	4770      	bx	lr

0800938c <_free_r>:
 800938c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938e:	2900      	cmp	r1, #0
 8009390:	d044      	beq.n	800941c <_free_r+0x90>
 8009392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009396:	9001      	str	r0, [sp, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f1a1 0404 	sub.w	r4, r1, #4
 800939e:	bfb8      	it	lt
 80093a0:	18e4      	addlt	r4, r4, r3
 80093a2:	f7ff ffa3 	bl	80092ec <__malloc_lock>
 80093a6:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <_free_r+0x94>)
 80093a8:	9801      	ldr	r0, [sp, #4]
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	b933      	cbnz	r3, 80093bc <_free_r+0x30>
 80093ae:	6063      	str	r3, [r4, #4]
 80093b0:	6014      	str	r4, [r2, #0]
 80093b2:	b003      	add	sp, #12
 80093b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b8:	f7ff bf9e 	b.w	80092f8 <__malloc_unlock>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d908      	bls.n	80093d2 <_free_r+0x46>
 80093c0:	6825      	ldr	r5, [r4, #0]
 80093c2:	1961      	adds	r1, r4, r5
 80093c4:	428b      	cmp	r3, r1
 80093c6:	bf01      	itttt	eq
 80093c8:	6819      	ldreq	r1, [r3, #0]
 80093ca:	685b      	ldreq	r3, [r3, #4]
 80093cc:	1949      	addeq	r1, r1, r5
 80093ce:	6021      	streq	r1, [r4, #0]
 80093d0:	e7ed      	b.n	80093ae <_free_r+0x22>
 80093d2:	461a      	mov	r2, r3
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b10b      	cbz	r3, 80093dc <_free_r+0x50>
 80093d8:	42a3      	cmp	r3, r4
 80093da:	d9fa      	bls.n	80093d2 <_free_r+0x46>
 80093dc:	6811      	ldr	r1, [r2, #0]
 80093de:	1855      	adds	r5, r2, r1
 80093e0:	42a5      	cmp	r5, r4
 80093e2:	d10b      	bne.n	80093fc <_free_r+0x70>
 80093e4:	6824      	ldr	r4, [r4, #0]
 80093e6:	4421      	add	r1, r4
 80093e8:	1854      	adds	r4, r2, r1
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	d1e0      	bne.n	80093b2 <_free_r+0x26>
 80093f0:	681c      	ldr	r4, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	6053      	str	r3, [r2, #4]
 80093f6:	440c      	add	r4, r1
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	e7da      	b.n	80093b2 <_free_r+0x26>
 80093fc:	d902      	bls.n	8009404 <_free_r+0x78>
 80093fe:	230c      	movs	r3, #12
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	e7d6      	b.n	80093b2 <_free_r+0x26>
 8009404:	6825      	ldr	r5, [r4, #0]
 8009406:	1961      	adds	r1, r4, r5
 8009408:	428b      	cmp	r3, r1
 800940a:	bf04      	itt	eq
 800940c:	6819      	ldreq	r1, [r3, #0]
 800940e:	685b      	ldreq	r3, [r3, #4]
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	bf04      	itt	eq
 8009414:	1949      	addeq	r1, r1, r5
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	6054      	str	r4, [r2, #4]
 800941a:	e7ca      	b.n	80093b2 <_free_r+0x26>
 800941c:	b003      	add	sp, #12
 800941e:	bd30      	pop	{r4, r5, pc}
 8009420:	20000b38 	.word	0x20000b38

08009424 <_init>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr

08009430 <_fini>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr
